"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.scaleMatrixFromScale = scaleMatrixFromScale;
exports.offsetsMatrixFromOffsets = offsetsMatrixFromOffsets;
exports.positionMatrixFromNothing = positionMatrixFromNothing;
exports.positionMatrixFromDistance = positionMatrixFromDistance;
exports.positionMatrixFromPosition = positionMatrixFromPosition;
exports.rotationsMatrixFromAngles = rotationsMatrixFromAngles;
exports.rotationsMatrixFromRotations = rotationsMatrixFromRotations;
exports.normalsMatrixFromRotationsMatrix = normalsMatrixFromRotationsMatrix;
exports.projectionMatrixFromWidthAndHeight = projectionMatrixFromWidthAndHeight;
var _vector = require("../maths/vector");
var _array = require("../utilities/array");
var _constants = require("../constants");
var _matrix = require("../maths/matrix");
function scaleMatrixFromScale(scale) {
    var scaleMatrix = (0, _matrix).identity4();
    scaleMatrix = (0, _matrix).scale4(scaleMatrix, scale);
    return scaleMatrix;
}
function offsetsMatrixFromOffsets(offsets) {
    var offsetsMatrix = (0, _matrix).identity4(); ///
    offsetsMatrix = (0, _matrix).translate4(offsetsMatrix, offsets);
    return offsetsMatrix;
}
function positionMatrixFromNothing() {
    var positionMatrix = (0, _matrix).identity4(); ///
    return positionMatrix;
}
function positionMatrixFromDistance(distance) {
    var positionMatrix = (0, _matrix).identity4(); ///
    var x = 0, y = 0, z = -distance;
    positionMatrix = (0, _matrix).translate4(positionMatrix, [
        x,
        y,
        z
    ]);
    return positionMatrix;
}
function positionMatrixFromPosition(position) {
    var positionMatrix = (0, _matrix).identity4(); ///
    positionMatrix = (0, _matrix).translate4(positionMatrix, position);
    return positionMatrix;
}
function rotationsMatrixFromAngles(angles, param) {
    var reverseOrder = param === void 0 ? false : param;
    var rotationsMatrix = (0, _matrix).identity4(); ///
    var firstAngle = (0, _array).first(angles), secondAngle = (0, _array).second(angles), thirdAngle = (0, _array).third(angles), xAngle = firstAngle, yAngle = secondAngle, zAngle = thirdAngle, xAxis = [
        1,
        0,
        0
    ], yAxis = [
        0,
        1,
        0
    ], zAxis = [
        0,
        0,
        1
    ];
    if (reverseOrder) {
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, zAngle, zAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, yAngle, yAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, xAngle, xAxis);
    } else {
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, xAngle, xAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, yAngle, yAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, zAngle, zAxis);
    }
    return rotationsMatrix;
}
function rotationsMatrixFromRotations(rotations) {
    var scalar = _constants.DEGREES_TO_RADIANS_MULTIPLIER, angles = (0, _vector).scale3(rotations, scalar), rotationsMatrix = rotationsMatrixFromAngles(angles);
    return rotationsMatrix;
}
function normalsMatrixFromRotationsMatrix(rotationsMatrix) {
    var normalsMatrix = (0, _matrix).invert4(rotationsMatrix);
    normalsMatrix = (0, _matrix).transpose4(normalsMatrix);
    return normalsMatrix;
}
function projectionMatrixFromWidthAndHeight(width, height) {
    var fieldOfView = _constants.FIELD_OF_VIEW, aspectRatio = width / height, zNear = _constants.Z_NEAR, zFar = _constants.Z_FAR, projectionMatrix = (0, _matrix).perspective4(fieldOfView, aspectRatio, zNear, zFar);
    return projectionMatrix;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWF0cml4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBzY2FsZTMgfSBmcm9tIFwiLi4vbWF0aHMvdmVjdG9yXCI7XG5pbXBvcnQgeyBmaXJzdCwgc2Vjb25kLCB0aGlyZCB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXJyYXlcIjtcbmltcG9ydCB7IERFR1JFRVNfVE9fUkFESUFOU19NVUxUSVBMSUVSLCBGSUVMRF9PRl9WSUVXLCBaX05FQVIsIFpfRkFSIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgaWRlbnRpdHk0LCBzY2FsZTQsIGludmVydDQsIHJvdGF0ZTQsIHRyYW5zbGF0ZTQsIHRyYW5zcG9zZTQsIHBlcnNwZWN0aXZlNCB9IGZyb20gXCIuLi9tYXRocy9tYXRyaXhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlTWF0cml4RnJvbVNjYWxlKHNjYWxlKSB7XG4gIGxldCBzY2FsZU1hdHJpeCA9IGlkZW50aXR5NCgpO1xuXG4gIHNjYWxlTWF0cml4ID0gc2NhbGU0KHNjYWxlTWF0cml4LCBzY2FsZSk7XG5cbiAgcmV0dXJuIHNjYWxlTWF0cml4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb2Zmc2V0c01hdHJpeEZyb21PZmZzZXRzKG9mZnNldHMpIHtcbiAgbGV0IG9mZnNldHNNYXRyaXggPSBpZGVudGl0eTQoKTsgLy8vXG5cbiAgb2Zmc2V0c01hdHJpeCA9IHRyYW5zbGF0ZTQob2Zmc2V0c01hdHJpeCwgb2Zmc2V0cyk7XG5cbiAgcmV0dXJuIG9mZnNldHNNYXRyaXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3NpdGlvbk1hdHJpeEZyb21Ob3RoaW5nKCkge1xuICBsZXQgcG9zaXRpb25NYXRyaXggPSBpZGVudGl0eTQoKTsgLy8vXG5cbiAgcmV0dXJuIHBvc2l0aW9uTWF0cml4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9zaXRpb25NYXRyaXhGcm9tRGlzdGFuY2UoZGlzdGFuY2UpIHtcbiAgbGV0IHBvc2l0aW9uTWF0cml4ID0gaWRlbnRpdHk0KCk7IC8vL1xuXG4gIGNvbnN0IHggPSAwLFxuICAgICAgICB5ID0gMCxcbiAgICAgICAgeiA9IC1kaXN0YW5jZTtcblxuICBwb3NpdGlvbk1hdHJpeCA9IHRyYW5zbGF0ZTQocG9zaXRpb25NYXRyaXgsIFsgeCwgeSwgeiBdKTtcblxuICByZXR1cm4gcG9zaXRpb25NYXRyaXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3NpdGlvbk1hdHJpeEZyb21Qb3NpdGlvbihwb3NpdGlvbikge1xuICBsZXQgcG9zaXRpb25NYXRyaXggPSBpZGVudGl0eTQoKTsgLy8vXG5cbiAgcG9zaXRpb25NYXRyaXggPSB0cmFuc2xhdGU0KHBvc2l0aW9uTWF0cml4LCBwb3NpdGlvbik7XG5cbiAgcmV0dXJuIHBvc2l0aW9uTWF0cml4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRpb25zTWF0cml4RnJvbUFuZ2xlcyhhbmdsZXMsIHJldmVyc2VPcmRlciA9IGZhbHNlKSB7XG4gIGxldCByb3RhdGlvbnNNYXRyaXggPSBpZGVudGl0eTQoKTsgLy8vXG5cbiAgY29uc3QgZmlyc3RBbmdsZSA9IGZpcnN0KGFuZ2xlcyksXG4gICAgICAgIHNlY29uZEFuZ2xlID0gc2Vjb25kKGFuZ2xlcyksXG4gICAgICAgIHRoaXJkQW5nbGUgPSB0aGlyZChhbmdsZXMpLFxuICAgICAgICB4QW5nbGUgPSBmaXJzdEFuZ2xlLFxuICAgICAgICB5QW5nbGUgPSBzZWNvbmRBbmdsZSxcbiAgICAgICAgekFuZ2xlID0gdGhpcmRBbmdsZSxcbiAgICAgICAgeEF4aXMgPSBbIDEsIDAsIDAgXSxcbiAgICAgICAgeUF4aXMgPSBbIDAsIDEsIDAgXSxcbiAgICAgICAgekF4aXMgPSBbIDAsIDAsIDEgXTtcblxuICBpZiAocmV2ZXJzZU9yZGVyKSB7XG4gICAgcm90YXRpb25zTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbnNNYXRyaXgsIHpBbmdsZSwgekF4aXMpO1xuXG4gICAgcm90YXRpb25zTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbnNNYXRyaXgsIHlBbmdsZSwgeUF4aXMpO1xuXG4gICAgcm90YXRpb25zTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbnNNYXRyaXgsIHhBbmdsZSwgeEF4aXMpO1xuICB9IGVsc2Uge1xuICAgIHJvdGF0aW9uc01hdHJpeCA9IHJvdGF0ZTQocm90YXRpb25zTWF0cml4LCB4QW5nbGUsIHhBeGlzKTtcblxuICAgIHJvdGF0aW9uc01hdHJpeCA9IHJvdGF0ZTQocm90YXRpb25zTWF0cml4LCB5QW5nbGUsIHlBeGlzKTtcblxuICAgIHJvdGF0aW9uc01hdHJpeCA9IHJvdGF0ZTQocm90YXRpb25zTWF0cml4LCB6QW5nbGUsIHpBeGlzKTtcbiAgfVxuXG4gIHJldHVybiByb3RhdGlvbnNNYXRyaXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGlvbnNNYXRyaXhGcm9tUm90YXRpb25zKHJvdGF0aW9ucykge1xuICBjb25zdCBzY2FsYXIgPSBERUdSRUVTX1RPX1JBRElBTlNfTVVMVElQTElFUixcbiAgICAgICAgYW5nbGVzID0gc2NhbGUzKHJvdGF0aW9ucywgc2NhbGFyKSxcbiAgICAgICAgcm90YXRpb25zTWF0cml4ID0gcm90YXRpb25zTWF0cml4RnJvbUFuZ2xlcyhhbmdsZXMpO1xuXG4gIHJldHVybiByb3RhdGlvbnNNYXRyaXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxzTWF0cml4RnJvbVJvdGF0aW9uc01hdHJpeChyb3RhdGlvbnNNYXRyaXgpIHtcbiAgbGV0IG5vcm1hbHNNYXRyaXggPSBpbnZlcnQ0KHJvdGF0aW9uc01hdHJpeCk7XG5cbiAgbm9ybWFsc01hdHJpeCA9IHRyYW5zcG9zZTQobm9ybWFsc01hdHJpeCk7XG5cbiAgcmV0dXJuIG5vcm1hbHNNYXRyaXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9qZWN0aW9uTWF0cml4RnJvbVdpZHRoQW5kSGVpZ2h0KHdpZHRoLCBoZWlnaHQpIHtcbiAgY29uc3QgZmllbGRPZlZpZXcgPSBGSUVMRF9PRl9WSUVXLCAgLy8vXG4gICAgICAgIGFzcGVjdFJhdGlvID0gd2lkdGggLyBoZWlnaHQsXG4gICAgICAgIHpOZWFyID0gWl9ORUFSLCAvLy9cbiAgICAgICAgekZhciA9IFpfRkFSLCAvLy9cbiAgICAgICAgcHJvamVjdGlvbk1hdHJpeCA9IHBlcnNwZWN0aXZlNChmaWVsZE9mVmlldywgYXNwZWN0UmF0aW8sIHpOZWFyLCB6RmFyKTtcblxuICByZXR1cm4gcHJvamVjdGlvbk1hdHJpeDtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQ0FBQSxVQUFZOzs7O1FBT0ksb0JBQW9CLEdBQXBCLG9CQUFvQjtRQVFwQix3QkFBd0IsR0FBeEIsd0JBQXdCO1FBUXhCLHlCQUF5QixHQUF6Qix5QkFBeUI7UUFNekIsMEJBQTBCLEdBQTFCLDBCQUEwQjtRQVkxQiwwQkFBMEIsR0FBMUIsMEJBQTBCO1FBUTFCLHlCQUF5QixHQUF6Qix5QkFBeUI7UUE4QnpCLDRCQUE0QixHQUE1Qiw0QkFBNEI7UUFRNUIsZ0NBQWdDLEdBQWhDLGdDQUFnQztRQVFoQyxrQ0FBa0MsR0FBbEMsa0NBQWtDO0FBN0YzQixHQUFpQixDQUFqQixPQUFpQjtBQUNILEdBQW9CLENBQXBCLE1BQW9CO0FBQ21CLEdBQWMsQ0FBZCxVQUFjO0FBQ0EsR0FBaUIsQ0FBakIsT0FBaUI7U0FFM0Ysb0JBQW9CLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDM0MsR0FBRyxDQUFDLFdBQVcsT0FIeUUsT0FBaUI7SUFLekcsV0FBVyxPQUw2RSxPQUFpQixTQUtwRixXQUFXLEVBQUUsS0FBSztXQUVoQyxXQUFXO0FBQ3BCLENBQUM7U0FFZSx3QkFBd0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqRCxHQUFHLENBQUMsYUFBYSxPQVh1RSxPQUFpQixjQVd4RSxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7SUFFcEMsYUFBYSxPQWIyRSxPQUFpQixhQWE5RSxhQUFhLEVBQUUsT0FBTztX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