"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.scaleMatrixFromScale = scaleMatrixFromScale;
exports.offsetsMatrixFromOffsets = offsetsMatrixFromOffsets;
exports.positionMatrixFromNothing = positionMatrixFromNothing;
exports.positionMatrixFromDistance = positionMatrixFromDistance;
exports.positionMatrixFromPosition = positionMatrixFromPosition;
exports.rotationsMatrixFromAngles = rotationsMatrixFromAngles;
exports.rotationsMatrixFromRotations = rotationsMatrixFromRotations;
exports.normalsMatrixFromRotationsMatrix = normalsMatrixFromRotationsMatrix;
exports.projectionMatrixFromCameraAndCanvas = projectionMatrixFromCameraAndCanvas;
var _vector = require("../maths/vector");
var _array = require("../utilities/array");
var _constants = require("../constants");
var _matrix = require("../maths/matrix");
function scaleMatrixFromScale(scale) {
    var scaleMatrix = (0, _matrix).identity4();
    scaleMatrix = (0, _matrix).scale4(scaleMatrix, scale);
    return scaleMatrix;
}
function offsetsMatrixFromOffsets(offsets) {
    var offsetsMatrix = (0, _matrix).identity4(); ///
    offsetsMatrix = (0, _matrix).translate4(offsetsMatrix, offsets);
    return offsetsMatrix;
}
function positionMatrixFromNothing() {
    var positionMatrix = (0, _matrix).identity4(); ///
    return positionMatrix;
}
function positionMatrixFromDistance(distance) {
    var positionMatrix = (0, _matrix).identity4(); ///
    var x = 0, y = 0, z = -distance;
    positionMatrix = (0, _matrix).translate4(positionMatrix, [
        x,
        y,
        z
    ]);
    return positionMatrix;
}
function positionMatrixFromPosition(position) {
    var positionMatrix = (0, _matrix).identity4(); ///
    positionMatrix = (0, _matrix).translate4(positionMatrix, position);
    return positionMatrix;
}
function rotationsMatrixFromAngles(angles, param) {
    var reverseOrder = param === void 0 ? false : param;
    var rotationsMatrix = (0, _matrix).identity4(); ///
    var firstAngle = (0, _array).first(angles), secondAngle = (0, _array).second(angles), thirdAngle = 0, xAngle = firstAngle, yAngle = secondAngle, zAngle = thirdAngle, xAxis = [
        1,
        0,
        0
    ], yAxis = [
        0,
        1,
        0
    ], zAxis = [
        0,
        0,
        1
    ];
    if (reverseOrder) {
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, zAngle, zAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, yAngle, yAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, xAngle, xAxis);
    } else {
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, xAngle, xAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, yAngle, yAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, zAngle, zAxis);
    }
    return rotationsMatrix;
}
function rotationsMatrixFromRotations(rotations) {
    var scalar = _constants.DEGREES_TO_RADIANS_MULTIPLIER, angles = (0, _vector).scale3(rotations, scalar), rotationsMatrix = rotationsMatrixFromAngles(angles);
    return rotationsMatrix;
}
function normalsMatrixFromRotationsMatrix(rotationsMatrix) {
    var normalsMatrix = (0, _matrix).invert4(rotationsMatrix); ///
    normalsMatrix = (0, _matrix).transpose4(normalsMatrix);
    return normalsMatrix;
}
function projectionMatrixFromCameraAndCanvas(camera, canvas) {
    var zFar = camera.getZFar(), zNear = camera.getZNear(), width = canvas.getWidth(), height = canvas.getHeight(), fieldOfView = camera.getFieldOfView(), aspectRatio = width / height, projectionMatrix = (0, _matrix).perspective4(fieldOfView, aspectRatio, zNear, zFar);
    return projectionMatrix;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWF0cml4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBzY2FsZTMgfSBmcm9tIFwiLi4vbWF0aHMvdmVjdG9yXCI7XG5pbXBvcnQgeyBmaXJzdCwgc2Vjb25kIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hcnJheVwiO1xuaW1wb3J0IHsgREVHUkVFU19UT19SQURJQU5TX01VTFRJUExJRVIgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBpZGVudGl0eTQsIHNjYWxlNCwgaW52ZXJ0NCwgcm90YXRlNCwgdHJhbnNsYXRlNCwgdHJhbnNwb3NlNCwgcGVyc3BlY3RpdmU0IH0gZnJvbSBcIi4uL21hdGhzL21hdHJpeFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gc2NhbGVNYXRyaXhGcm9tU2NhbGUoc2NhbGUpIHtcbiAgbGV0IHNjYWxlTWF0cml4ID0gaWRlbnRpdHk0KCk7XG5cbiAgc2NhbGVNYXRyaXggPSBzY2FsZTQoc2NhbGVNYXRyaXgsIHNjYWxlKTtcblxuICByZXR1cm4gc2NhbGVNYXRyaXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvZmZzZXRzTWF0cml4RnJvbU9mZnNldHMob2Zmc2V0cykge1xuICBsZXQgb2Zmc2V0c01hdHJpeCA9IGlkZW50aXR5NCgpOyAvLy9cblxuICBvZmZzZXRzTWF0cml4ID0gdHJhbnNsYXRlNChvZmZzZXRzTWF0cml4LCBvZmZzZXRzKTtcblxuICByZXR1cm4gb2Zmc2V0c01hdHJpeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvc2l0aW9uTWF0cml4RnJvbU5vdGhpbmcoKSB7XG4gIGxldCBwb3NpdGlvbk1hdHJpeCA9IGlkZW50aXR5NCgpOyAvLy9cblxuICByZXR1cm4gcG9zaXRpb25NYXRyaXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3NpdGlvbk1hdHJpeEZyb21EaXN0YW5jZShkaXN0YW5jZSkge1xuICBsZXQgcG9zaXRpb25NYXRyaXggPSBpZGVudGl0eTQoKTsgLy8vXG5cbiAgY29uc3QgeCA9IDAsXG4gICAgICAgIHkgPSAwLFxuICAgICAgICB6ID0gLWRpc3RhbmNlO1xuXG4gIHBvc2l0aW9uTWF0cml4ID0gdHJhbnNsYXRlNChwb3NpdGlvbk1hdHJpeCwgWyB4LCB5LCB6IF0pO1xuXG4gIHJldHVybiBwb3NpdGlvbk1hdHJpeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvc2l0aW9uTWF0cml4RnJvbVBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gIGxldCBwb3NpdGlvbk1hdHJpeCA9IGlkZW50aXR5NCgpOyAvLy9cblxuICBwb3NpdGlvbk1hdHJpeCA9IHRyYW5zbGF0ZTQocG9zaXRpb25NYXRyaXgsIHBvc2l0aW9uKTtcblxuICByZXR1cm4gcG9zaXRpb25NYXRyaXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGlvbnNNYXRyaXhGcm9tQW5nbGVzKGFuZ2xlcywgcmV2ZXJzZU9yZGVyID0gZmFsc2UpIHtcbiAgbGV0IHJvdGF0aW9uc01hdHJpeCA9IGlkZW50aXR5NCgpOyAvLy9cblxuICBjb25zdCBmaXJzdEFuZ2xlID0gZmlyc3QoYW5nbGVzKSxcbiAgICAgICAgc2Vjb25kQW5nbGUgPSBzZWNvbmQoYW5nbGVzKSxcbiAgICAgICAgdGhpcmRBbmdsZSA9IDAsIC8vL1xuICAgICAgICB4QW5nbGUgPSBmaXJzdEFuZ2xlLCAgLy8vL1xuICAgICAgICB5QW5nbGUgPSBzZWNvbmRBbmdsZSwgLy8vXG4gICAgICAgIHpBbmdsZSA9IHRoaXJkQW5nbGUsICAvLy9cbiAgICAgICAgeEF4aXMgPSBbIDEsIDAsIDAgXSxcbiAgICAgICAgeUF4aXMgPSBbIDAsIDEsIDAgXSxcbiAgICAgICAgekF4aXMgPSBbIDAsIDAsIDEgXTtcblxuICBpZiAocmV2ZXJzZU9yZGVyKSB7XG4gICAgcm90YXRpb25zTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbnNNYXRyaXgsIHpBbmdsZSwgekF4aXMpO1xuICAgIHJvdGF0aW9uc01hdHJpeCA9IHJvdGF0ZTQocm90YXRpb25zTWF0cml4LCB5QW5nbGUsIHlBeGlzKTtcbiAgICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGU0KHJvdGF0aW9uc01hdHJpeCwgeEFuZ2xlLCB4QXhpcyk7XG4gIH0gZWxzZSB7XG4gICAgcm90YXRpb25zTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbnNNYXRyaXgsIHhBbmdsZSwgeEF4aXMpO1xuICAgIHJvdGF0aW9uc01hdHJpeCA9IHJvdGF0ZTQocm90YXRpb25zTWF0cml4LCB5QW5nbGUsIHlBeGlzKTtcbiAgICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGU0KHJvdGF0aW9uc01hdHJpeCwgekFuZ2xlLCB6QXhpcyk7XG4gIH1cblxuICByZXR1cm4gcm90YXRpb25zTWF0cml4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRpb25zTWF0cml4RnJvbVJvdGF0aW9ucyhyb3RhdGlvbnMpIHtcbiAgY29uc3Qgc2NhbGFyID0gREVHUkVFU19UT19SQURJQU5TX01VTFRJUExJRVIsIC8vL1xuICAgICAgICBhbmdsZXMgPSBzY2FsZTMocm90YXRpb25zLCBzY2FsYXIpLFxuICAgICAgICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGlvbnNNYXRyaXhGcm9tQW5nbGVzKGFuZ2xlcyk7XG5cbiAgcmV0dXJuIHJvdGF0aW9uc01hdHJpeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbHNNYXRyaXhGcm9tUm90YXRpb25zTWF0cml4KHJvdGF0aW9uc01hdHJpeCkge1xuICBsZXQgbm9ybWFsc01hdHJpeCA9IGludmVydDQocm90YXRpb25zTWF0cml4KTsgLy8vXG5cbiAgbm9ybWFsc01hdHJpeCA9IHRyYW5zcG9zZTQobm9ybWFsc01hdHJpeCk7XG5cbiAgcmV0dXJuIG5vcm1hbHNNYXRyaXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9qZWN0aW9uTWF0cml4RnJvbUNhbWVyYUFuZENhbnZhcyhjYW1lcmEsIGNhbnZhcykge1xuICBjb25zdCB6RmFyID0gY2FtZXJhLmdldFpGYXIoKSxcbiAgICAgICAgek5lYXIgPSBjYW1lcmEuZ2V0Wk5lYXIoKSxcbiAgICAgICAgd2lkdGggPSBjYW52YXMuZ2V0V2lkdGgoKSxcbiAgICAgICAgaGVpZ2h0ID0gY2FudmFzLmdldEhlaWdodCgpLFxuICAgICAgICBmaWVsZE9mVmlldyA9IGNhbWVyYS5nZXRGaWVsZE9mVmlldygpLFxuICAgICAgICBhc3BlY3RSYXRpbyA9ICggd2lkdGggLyBoZWlnaHQgKSxcbiAgICAgICAgcHJvamVjdGlvbk1hdHJpeCA9IHBlcnNwZWN0aXZlNChmaWVsZE9mVmlldywgYXNwZWN0UmF0aW8sIHpOZWFyLCB6RmFyKTtcblxuICByZXR1cm4gcHJvamVjdGlvbk1hdHJpeDtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQ0FBQSxVQUFZOzs7O1FBT0ksb0JBQW9CLEdBQXBCLG9CQUFvQjtRQVFwQix3QkFBd0IsR0FBeEIsd0JBQXdCO1FBUXhCLHlCQUF5QixHQUF6Qix5QkFBeUI7UUFNekIsMEJBQTBCLEdBQTFCLDBCQUEwQjtRQVkxQiwwQkFBMEIsR0FBMUIsMEJBQTBCO1FBUTFCLHlCQUF5QixHQUF6Qix5QkFBeUI7UUEwQnpCLDRCQUE0QixHQUE1Qiw0QkFBNEI7UUFRNUIsZ0NBQWdDLEdBQWhDLGdDQUFnQztRQVFoQyxtQ0FBbUMsR0FBbkMsbUNBQW1DO0FBekY1QixHQUFpQixDQUFqQixPQUFpQjtBQUNWLEdBQW9CLENBQXBCLE1BQW9CO0FBQ0osR0FBYyxDQUFkLFVBQWM7QUFDOEIsR0FBaUIsQ0FBakIsT0FBaUI7U0FFM0Ysb0JBQW9CLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDM0MsR0FBRyxDQUFDLFdBQVcsT0FIeUUsT0FBaUI7SUFLekcsV0FBVyxPQUw2RSxPQUFpQixTQUtwRixXQUFXLEVBQUUsS0FBSztXQUVoQyxXQUFXO0FBQ3BCLENBQUM7U0FFZSx3QkFBd0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqRCxHQUFHLENBQUMsYUFBYSxPQVh1RSxPQUFpQixjQVd4RSxD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