"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.cloneTextureCoordinateTuples = cloneTextureCoordinateTuples;
exports.calculateMappedTextureCoordinateTuples = calculateMappedTextureCoordinateTuples;
exports.calculateAdjustedTextureCoordinateTuples = calculateAdjustedTextureCoordinateTuples;
var _vertices = require("../utilities/vertices");
var _matrix = require("../maths/matrix");
var _array = require("../utilities/array");
var _quaternion = require("../utilities/quaternion");
var _vector = require("../maths/vector");
function cloneTextureCoordinateTuples(textureCoordinateTuples) {
    textureCoordinateTuples = textureCoordinateTuples.map(function(textureCoordinateTuple) {
        return textureCoordinateTuple.slice();
    }); ///
    return textureCoordinateTuples;
}
function calculateMappedTextureCoordinateTuples(textureCoordinateTuples, extent) {
    var left = extent.left, bottom = extent.bottom, width = extent.width, height = extent.height, mappedTextureCoordinateTuples = textureCoordinateTuples.map(function(textureCoordinateTuple) {
        return (0, _vector).add2((0, _vector).multiply2(textureCoordinateTuple, [
            width,
            height
        ]), [
            left,
            bottom
        ]);
    }); ///
    return mappedTextureCoordinateTuples;
}
function calculateAdjustedTextureCoordinateTuples(vertices, normal, parentVertices, textureCoordinateTuples) {
    var arbitraryRotationQuaternion = (0, _quaternion).calculateArbitraryRotationQuaternion(normal), rotationQuaternion = arbitraryRotationQuaternion; ///
    var rotatedVertices = (0, _vertices).rotateVertices(vertices, rotationQuaternion);
    parentVertices = (0, _vertices).rotateVertices(parentVertices, rotationQuaternion);
    vertices = rotatedVertices; ///
    var firstVertex = (0, _array).first(vertices), secondVertex = (0, _array).second(vertices), thirdVertex = (0, _array).third(vertices), firstParentVertex = (0, _array).first(parentVertices), secondParentVertex = (0, _array).second(parentVertices), thirdParentVertex = (0, _array).third(parentVertices), firstTextureCoordinateTuple = (0, _array).first(textureCoordinateTuples), secondTextureCoordinateTuple = (0, _array).second(textureCoordinateTuples), thirdTextureCoordinateTuple = (0, _array).third(textureCoordinateTuples), firstVertexPosition = firstVertex.getPosition(), secondVertexPosition = secondVertex.getPosition(), thirdVertexPosition = thirdVertex.getPosition(), firstParentVertexPosition = firstParentVertex.getPosition(), secondParentVertexPosition = secondParentVertex.getPosition(), thirdParentVertexPosition = thirdParentVertex.getPosition(), R1x = firstVertexPosition[0], R1y = firstVertexPosition[1], R2x = secondVertexPosition[0], R2y = secondVertexPosition[1], R3x = thirdVertexPosition[0], R3y = thirdVertexPosition[1], P1x = firstParentVertexPosition[0], P2x = secondParentVertexPosition[0], P3x = thirdParentVertexPosition[0], P1y = firstParentVertexPosition[1], P2y = secondParentVertexPosition[1], P3y = thirdParentVertexPosition[1], P1u = firstTextureCoordinateTuple[0], P1v = firstTextureCoordinateTuple[1], P2u = secondTextureCoordinateTuple[0], P2v = secondTextureCoordinateTuple[1], P3u = thirdTextureCoordinateTuple[0], P3v = thirdTextureCoordinateTuple[1], textureCoordinatesMatrix = (0, _matrix).invert3([
        1,
        1,
        1,
        P1u,
        P2u,
        P3u,
        P1v,
        P2v,
        P3v
    ]), firstTransformedParentVerticesComponent = (0, _vector).transform3([
        P1x,
        P2x,
        P3x
    ], textureCoordinatesMatrix), secondTransformedParentVerticesComponent = (0, _vector).transform3([
        P1y,
        P2y,
        P3y
    ], textureCoordinatesMatrix), Ox = firstTransformedParentVerticesComponent[0], Ux = firstTransformedParentVerticesComponent[1], Vx = firstTransformedParentVerticesComponent[2], Oy = secondTransformedParentVerticesComponent[0], Uy = secondTransformedParentVerticesComponent[1], Vy = secondTransformedParentVerticesComponent[2], transformedParentVerticesMatrix = (0, _matrix).invert2([
        Ux,
        Uy,
        Vx,
        Vy
    ]), firstAdjustedTextureCoordinate = (0, _vector).transform2([
        R1x - Ox,
        R1y - Oy
    ], transformedParentVerticesMatrix), secondAdjustedTextureCoordinate = (0, _vector).transform2([
        R2x - Ox,
        R2y - Oy
    ], transformedParentVerticesMatrix), thirdAdjustedTextureCoordinate = (0, _vector).transform2([
        R3x - Ox,
        R3y - Oy
    ], transformedParentVerticesMatrix), adjustedTextureCoordinateTuple = [
        firstAdjustedTextureCoordinate,
        secondAdjustedTextureCoordinate,
        thirdAdjustedTextureCoordinate, 
    ];
    return adjustedTextureCoordinateTuple;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvdGV4dHVyZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcm90YXRlVmVydGljZXMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3ZlcnRpY2VzXCI7XG5pbXBvcnQgeyBpbnZlcnQyLCBpbnZlcnQzIH0gZnJvbSBcIi4uL21hdGhzL21hdHJpeFwiO1xuaW1wb3J0IHsgZmlyc3QsIHNlY29uZCwgdGhpcmQgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FycmF5XCI7XG5pbXBvcnQgeyBjYWxjdWxhdGVBcmJpdHJhcnlSb3RhdGlvblF1YXRlcm5pb24gfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1YXRlcm5pb25cIjtcbmltcG9ydCB7IGFkZDIsIG11bHRpcGx5MiwgdHJhbnNmb3JtMiwgdHJhbnNmb3JtMyB9IGZyb20gXCIuLi9tYXRocy92ZWN0b3JcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lVGV4dHVyZUNvb3JkaW5hdGVUdXBsZXModGV4dHVyZUNvb3JkaW5hdGVUdXBsZXMpIHtcbiAgdGV4dHVyZUNvb3JkaW5hdGVUdXBsZXMgPSB0ZXh0dXJlQ29vcmRpbmF0ZVR1cGxlcy5tYXAoKHRleHR1cmVDb29yZGluYXRlVHVwbGUpID0+IHRleHR1cmVDb29yZGluYXRlVHVwbGUuc2xpY2UoKSk7ICAvLy9cblxuICByZXR1cm4gdGV4dHVyZUNvb3JkaW5hdGVUdXBsZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVNYXBwZWRUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlcyh0ZXh0dXJlQ29vcmRpbmF0ZVR1cGxlcywgZXh0ZW50KSB7XG4gIGNvbnN0IHsgbGVmdCwgYm90dG9tLCB3aWR0aCwgaGVpZ2h0IH0gPSBleHRlbnQsXG4gICAgICAgIG1hcHBlZFRleHR1cmVDb29yZGluYXRlVHVwbGVzID0gdGV4dHVyZUNvb3JkaW5hdGVUdXBsZXMubWFwKCh0ZXh0dXJlQ29vcmRpbmF0ZVR1cGxlKSA9PiBhZGQyKG11bHRpcGx5Mih0ZXh0dXJlQ29vcmRpbmF0ZVR1cGxlLCBbIHdpZHRoLCBoZWlnaHQgXSApLCBbIGxlZnQsIGJvdHRvbSBdKSk7IC8vL1xuXG4gIHJldHVybiBtYXBwZWRUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZUFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGVUdXBsZXModmVydGljZXMsIG5vcm1hbCwgcGFyZW50VmVydGljZXMsIHRleHR1cmVDb29yZGluYXRlVHVwbGVzKSB7XG4gIGNvbnN0IGFyYml0cmFyeVJvdGF0aW9uUXVhdGVybmlvbiA9IGNhbGN1bGF0ZUFyYml0cmFyeVJvdGF0aW9uUXVhdGVybmlvbihub3JtYWwpLFxuICAgICAgICByb3RhdGlvblF1YXRlcm5pb24gPSBhcmJpdHJhcnlSb3RhdGlvblF1YXRlcm5pb247IC8vL1xuXG4gIGNvbnN0IHJvdGF0ZWRWZXJ0aWNlcyA9IHJvdGF0ZVZlcnRpY2VzKHZlcnRpY2VzLCByb3RhdGlvblF1YXRlcm5pb24pO1xuXG4gIHBhcmVudFZlcnRpY2VzID0gcm90YXRlVmVydGljZXMocGFyZW50VmVydGljZXMsIHJvdGF0aW9uUXVhdGVybmlvbik7XG5cbiAgdmVydGljZXMgPSByb3RhdGVkVmVydGljZXM7ICAvLy9cblxuICBjb25zdCBmaXJzdFZlcnRleCA9IGZpcnN0KHZlcnRpY2VzKSxcbiAgICAgICAgc2Vjb25kVmVydGV4ID0gc2Vjb25kKHZlcnRpY2VzKSxcbiAgICAgICAgdGhpcmRWZXJ0ZXggPSB0aGlyZCh2ZXJ0aWNlcyksXG4gICAgICAgIGZpcnN0UGFyZW50VmVydGV4ID0gZmlyc3QocGFyZW50VmVydGljZXMpLFxuICAgICAgICBzZWNvbmRQYXJlbnRWZXJ0ZXggPSBzZWNvbmQocGFyZW50VmVydGljZXMpLFxuICAgICAgICB0aGlyZFBhcmVudFZlcnRleCA9IHRoaXJkKHBhcmVudFZlcnRpY2VzKSxcbiAgICAgICAgZmlyc3RUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlID0gZmlyc3QodGV4dHVyZUNvb3JkaW5hdGVUdXBsZXMpLFxuICAgICAgICBzZWNvbmRUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlID0gc2Vjb25kKHRleHR1cmVDb29yZGluYXRlVHVwbGVzKSxcbiAgICAgICAgdGhpcmRUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlID0gdGhpcmQodGV4dHVyZUNvb3JkaW5hdGVUdXBsZXMpLFxuICAgICAgICBmaXJzdFZlcnRleFBvc2l0aW9uID0gZmlyc3RWZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgc2Vjb25kVmVydGV4UG9zaXRpb24gPSBzZWNvbmRWZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgdGhpcmRWZXJ0ZXhQb3NpdGlvbiA9IHRoaXJkVmVydGV4LmdldFBvc2l0aW9uKCksXG4gICAgICAgIGZpcnN0UGFyZW50VmVydGV4UG9zaXRpb24gPSBmaXJzdFBhcmVudFZlcnRleC5nZXRQb3NpdGlvbigpLFxuICAgICAgICBzZWNvbmRQYXJlbnRWZXJ0ZXhQb3NpdGlvbiA9IHNlY29uZFBhcmVudFZlcnRleC5nZXRQb3NpdGlvbigpLFxuICAgICAgICB0aGlyZFBhcmVudFZlcnRleFBvc2l0aW9uID0gdGhpcmRQYXJlbnRWZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgUjF4ID0gZmlyc3RWZXJ0ZXhQb3NpdGlvblswXSwgIC8vL1xuICAgICAgICBSMXkgPSBmaXJzdFZlcnRleFBvc2l0aW9uWzFdLCAgLy8vXG4gICAgICAgIFIyeCA9IHNlY29uZFZlcnRleFBvc2l0aW9uWzBdLCAvLy9cbiAgICAgICAgUjJ5ID0gc2Vjb25kVmVydGV4UG9zaXRpb25bMV0sIC8vL1xuICAgICAgICBSM3ggPSB0aGlyZFZlcnRleFBvc2l0aW9uWzBdLCAgLy8vXG4gICAgICAgIFIzeSA9IHRoaXJkVmVydGV4UG9zaXRpb25bMV0sICAvLy9cbiAgICAgICAgUDF4ID0gZmlyc3RQYXJlbnRWZXJ0ZXhQb3NpdGlvblswXSwgLy8vXG4gICAgICAgIFAyeCA9IHNlY29uZFBhcmVudFZlcnRleFBvc2l0aW9uWzBdLCAvLy9cbiAgICAgICAgUDN4ID0gdGhpcmRQYXJlbnRWZXJ0ZXhQb3NpdGlvblswXSwgLy8vXG4gICAgICAgIFAxeSA9IGZpcnN0UGFyZW50VmVydGV4UG9zaXRpb25bMV0sIC8vL1xuICAgICAgICBQMnkgPSBzZWNvbmRQYXJlbnRWZXJ0ZXhQb3NpdGlvblsxXSwgLy8vXG4gICAgICAgIFAzeSA9IHRoaXJkUGFyZW50VmVydGV4UG9zaXRpb25bMV0sIC8vL1xuICAgICAgICBQMXUgPSBmaXJzdFRleHR1cmVDb29yZGluYXRlVHVwbGVbMF0sIC8vL1xuICAgICAgICBQMXYgPSBmaXJzdFRleHR1cmVDb29yZGluYXRlVHVwbGVbMV0sIC8vL1xuICAgICAgICBQMnUgPSBzZWNvbmRUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlWzBdLCAvLy9cbiAgICAgICAgUDJ2ID0gc2Vjb25kVGV4dHVyZUNvb3JkaW5hdGVUdXBsZVsxXSwgLy8vXG4gICAgICAgIFAzdSA9IHRoaXJkVGV4dHVyZUNvb3JkaW5hdGVUdXBsZVswXSwgLy8vXG4gICAgICAgIFAzdiA9IHRoaXJkVGV4dHVyZUNvb3JkaW5hdGVUdXBsZVsxXSwgLy8vXG4gICAgICAgIHRleHR1cmVDb29yZGluYXRlc01hdHJpeCA9IGludmVydDMoWyAxLCAxLCAxLCBQMXUsIFAydSwgUDN1LCBQMXYsIFAydiwgUDN2IF0pLFxuICAgICAgICBmaXJzdFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnQgPSB0cmFuc2Zvcm0zKFsgUDF4LCBQMngsIFAzeCBdLCB0ZXh0dXJlQ29vcmRpbmF0ZXNNYXRyaXgpLFxuICAgICAgICBzZWNvbmRUcmFuc2Zvcm1lZFBhcmVudFZlcnRpY2VzQ29tcG9uZW50ID0gdHJhbnNmb3JtMyhbIFAxeSwgUDJ5LCBQM3kgXSwgdGV4dHVyZUNvb3JkaW5hdGVzTWF0cml4KSxcbiAgICAgICAgT3ggPSBmaXJzdFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnRbMF0sICAvLy9cbiAgICAgICAgVXggPSBmaXJzdFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnRbMV0sICAvLy9cbiAgICAgICAgVnggPSBmaXJzdFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnRbMl0sICAvLy9cbiAgICAgICAgT3kgPSBzZWNvbmRUcmFuc2Zvcm1lZFBhcmVudFZlcnRpY2VzQ29tcG9uZW50WzBdLCAgLy8vXG4gICAgICAgIFV5ID0gc2Vjb25kVHJhbnNmb3JtZWRQYXJlbnRWZXJ0aWNlc0NvbXBvbmVudFsxXSwgIC8vL1xuICAgICAgICBWeSA9IHNlY29uZFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnRbMl0sICAvLy9cbiAgICAgICAgdHJhbnNmb3JtZWRQYXJlbnRWZXJ0aWNlc01hdHJpeCA9IGludmVydDIoWyBVeCwgVXksIFZ4LCBWeSBdKSxcbiAgICAgICAgZmlyc3RBZGp1c3RlZFRleHR1cmVDb29yZGluYXRlID0gdHJhbnNmb3JtMihbIFIxeCAtIE94LCBSMXkgLSBPeSBdLCB0cmFuc2Zvcm1lZFBhcmVudFZlcnRpY2VzTWF0cml4KSxcbiAgICAgICAgc2Vjb25kQWRqdXN0ZWRUZXh0dXJlQ29vcmRpbmF0ZSA9IHRyYW5zZm9ybTIoWyBSMnggLSBPeCwgUjJ5IC0gT3kgXSwgdHJhbnNmb3JtZWRQYXJlbnRWZXJ0aWNlc01hdHJpeCksXG4gICAgICAgIHRoaXJkQWRqdXN0ZWRUZXh0dXJlQ29vcmRpbmF0ZSA9IHRyYW5zZm9ybTIoWyBSM3ggLSBPeCwgUjN5IC0gT3kgXSwgdHJhbnNmb3JtZWRQYXJlbnRWZXJ0aWNlc01hdHJpeCksXG4gICAgICAgIGFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGVUdXBsZSA9IFtcbiAgICAgICAgICBmaXJzdEFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGUsXG4gICAgICAgICAgc2Vjb25kQWRqdXN0ZWRUZXh0dXJlQ29vcmRpbmF0ZSxcbiAgICAgICAgICB0aGlyZEFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGUsXG4gICAgICAgIF07XG5cbiAgcmV0dXJuIGFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGVUdXBsZTtcbn1cbiJdLCJuYW1lcyI6WyJjbG9uZVRleHR1cmVDb29yZGluYXRlVHVwbGVzIiwiY2FsY3VsYXRlTWFwcGVkVGV4dHVyZUNvb3JkaW5hdGVUdXBsZXMiLCJjYWxjdWxhdGVBZGp1c3RlZFRleHR1cmVDb29yZGluYXRlVHVwbGVzIiwidGV4dHVyZUNvb3JkaW5hdGVUdXBsZXMiLCJtYXAiLCJ0ZXh0dXJlQ29vcmRpbmF0ZVR1cGxlIiwic2xpY2UiLCJleHRlbnQiLCJsZWZ0IiwiYm90dG9tIiwid2lkdGgiLCJoZWlnaHQiLCJtYXBwZWRUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlcyIsImFkZDIiLCJ2ZXJ0aWNlcyIsIm5vcm1hbCIsInBhcmVudFZlcnRpY2VzIiwiYXJiaXRyYXJ5Um90YXRpb25RdWF0ZXJuaW9uIiwicm90YXRpb25RdWF0ZXJuaW9uIiwicm90YXRlZFZlcnRpY2VzIiwiZmlyc3RWZXJ0ZXgiLCJzZWNvbmRWZXJ0ZXgiLCJ0aGlyZFZlcnRleCIsImZpcnN0UGFyZW50VmVydGV4Iiwic2Vjb25kUGFyZW50VmVydGV4IiwidGhpcmRQYXJlbnRWZXJ0ZXgiLCJmaXJzdFRleHR1cmVDb29yZGluYXRlVHVwbGUiLCJzZWNvbmRUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlIiwidGhpcmRUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlIiwiZmlyc3RWZXJ0ZXhQb3NpdGlvbiIsImdldFBvc2l0aW9uIiwic2Vjb25kVmVydGV4UG9zaXRpb24iLCJ0aGlyZFZlcnRleFBvc2l0aW9uIiwiZmlyc3RQYXJlbnRWZXJ0ZXhQb3NpdGlvbiIsInNlY29uZFBhcmVudFZlcnRleFBvc2l0aW9uIiwidGhpcmRQYXJlbnRWZXJ0ZXhQb3NpdGlvbiIsIlIxeCIsIlIxeSIsIlIyeCIsIlIyeSIsIlIzeCIsIlIzeSIsIlAxeCIsIlAyeCIsIlAzeCIsIlAxeSIsIlAyeSIsIlAzeSIsIlAxdSIsIlAxdiIsIlAydSIsIlAydiIsIlAzdSIsIlAzdiIsInRleHR1cmVDb29yZGluYXRlc01hdHJpeCIsImZpcnN0VHJhbnNmb3JtZWRQYXJlbnRWZXJ0aWNlc0NvbXBvbmVudCIsInNlY29uZFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnQiLCJPeCIsIlV4IiwiVngiLCJPeSIsIlV5IiwiVnkiLCJ0cmFuc2Zvcm1lZFBhcmVudFZlcnRpY2VzTWF0cml4IiwiZmlyc3RBZGp1c3RlZFRleHR1cmVDb29yZGluYXRlIiwic2Vjb25kQWRqdXN0ZWRUZXh0dXJlQ29vcmRpbmF0ZSIsInRoaXJkQWRqdXN0ZWRUZXh0dXJlQ29vcmRpbmF0ZSIsImFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGVUdXBsZSJdLCJtYXBwaW5ncyI6IkFBQUEsQ0FBWTs7OztRQVFJQSw0QkFBNEIsR0FBNUJBLDRCQUE0QjtRQU01QkMsc0NBQXNDLEdBQXRDQSxzQ0FBc0M7UUFPdENDLHdDQUF3QyxHQUF4Q0Esd0NBQXdDO0FBbkJ6QixHQUF1QixDQUF2QixTQUF1QjtBQUNyQixHQUFpQixDQUFqQixPQUFpQjtBQUNiLEdBQW9CLENBQXBCLE1BQW9CO0FBQ0osR0FBeUIsQ0FBekIsV0FBeUI7QUFDdEIsR0FBaUIsQ0FBakIsT0FBaUI7U0FFekRGLDRCQUE0QixDQUFDRyx1QkFBdUIsRUFBRSxDQUFDO0lBQ3JFQSx1QkFBdUIsR0FBR0EsdUJBQXVCLENBQUNDLEdBQUcsQ0FBQyxRQUFRLENBQVBDLHNCQUFzQjtRQUFLQSxNQUFNLENBQU5BLHNCQUFzQixDQUFDQyxLQUFLO09BQU0sQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO0lBRXZILE1BQU0sQ0FBQ0gsdUJBQXVCO0FBQ2hDLENBQUM7U0FFZUYsc0NBQXNDLENBQUNFLHVCQUF1QixFQUFFSSxNQUFNLEVBQUUsQ0FBQztJQUN2RixHQUFLLENBQUdDLElBQUksR0FBNEJELE1BQU0sQ0FBdENDLElBQUksRUFBRUMsTUFBTSxHQUFvQkYsTUFBTSxDQUFoQ0UsTUFBTSxFQUFFQyxLQUFLLEdB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