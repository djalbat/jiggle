"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _errors = require("../errors");
function createShader(type, shaderSource) {
    var _context = this.context, COMPILE_STATUS = _context.COMPILE_STATUS, pname = COMPILE_STATUS, shader = this.context.createShader(type);
    this.context.shaderSource(shader, shaderSource);
    this.context.compileShader(shader);
    var compileStatus = this.context.getShaderParameter(shader, pname);
    if (!compileStatus) {
        throw new Error(_errors.SHADER_ERROR);
    }
    return shader;
}
function createVertexShader(vertexShaderSource, canvas) {
    var _context = this.context, VERTEX_SHADER = _context.VERTEX_SHADER, type = VERTEX_SHADER, vertexShader = this.createShader(type, vertexShaderSource);
    return vertexShader;
}
function createFragmentShader(fragmentShaderSource, canvas) {
    var _context = this.context, FRAGMENT_SHADER = _context.FRAGMENT_SHADER, type = FRAGMENT_SHADER, fragmentShader = this.createShader(type, fragmentShaderSource);
    return fragmentShader;
}
var shaderMixins = {
    createShader: createShader,
    createVertexShader: createVertexShader,
    createFragmentShader: createFragmentShader
};
var _default = shaderMixins;
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvc2hhZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBTSEFERVJfRVJST1IgfSBmcm9tIFwiLi4vZXJyb3JzXCI7XG5cbmZ1bmN0aW9uIGNyZWF0ZVNoYWRlcih0eXBlLCBzaGFkZXJTb3VyY2UpIHtcbiAgY29uc3QgeyBDT01QSUxFX1NUQVRVUyB9ID0gdGhpcy5jb250ZXh0LFxuICAgICAgICBwbmFtZSA9IENPTVBJTEVfU1RBVFVTLFxuICAgICAgICBzaGFkZXIgPSB0aGlzLmNvbnRleHQuY3JlYXRlU2hhZGVyKHR5cGUpO1xuXG4gIHRoaXMuY29udGV4dC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCBzaGFkZXJTb3VyY2UpO1xuXG4gIHRoaXMuY29udGV4dC5jb21waWxlU2hhZGVyKHNoYWRlcik7XG5cbiAgY29uc3QgY29tcGlsZVN0YXR1cyA9IHRoaXMuY29udGV4dC5nZXRTaGFkZXJQYXJhbWV0ZXIoc2hhZGVyLCBwbmFtZSk7XG5cbiAgaWYgKCFjb21waWxlU3RhdHVzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFNIQURFUl9FUlJPUik7XG4gIH1cblxuICByZXR1cm4gc2hhZGVyO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVWZXJ0ZXhTaGFkZXIodmVydGV4U2hhZGVyU291cmNlLCBjYW52YXMpIHtcbiAgY29uc3QgeyBWRVJURVhfU0hBREVSIH0gPSB0aGlzLmNvbnRleHQsXG4gICAgICAgIHR5cGUgPSBWRVJURVhfU0hBREVSLFxuICAgICAgICB2ZXJ0ZXhTaGFkZXIgPSB0aGlzLmNyZWF0ZVNoYWRlcih0eXBlLCB2ZXJ0ZXhTaGFkZXJTb3VyY2UpO1xuXG4gIHJldHVybiB2ZXJ0ZXhTaGFkZXI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50U2hhZGVyKGZyYWdtZW50U2hhZGVyU291cmNlLCBjYW52YXMpIHtcbiAgY29uc3QgeyBGUkFHTUVOVF9TSEFERVIgfSA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgdHlwZSA9IEZSQUdNRU5UX1NIQURFUixcbiAgICAgICAgZnJhZ21lbnRTaGFkZXIgPSB0aGlzLmNyZWF0ZVNoYWRlcih0eXBlLCBmcmFnbWVudFNoYWRlclNvdXJjZSk7XG5cbiAgcmV0dXJuIGZyYWdtZW50U2hhZGVyO1xufVxuXG5jb25zdCBzaGFkZXJNaXhpbnMgPSB7XG4gIGNyZWF0ZVNoYWRlcixcbiAgY3JlYXRlVmVydGV4U2hhZGVyLFxuICBjcmVhdGVGcmFnbWVudFNoYWRlclxufTtcblxuZXhwb3J0IGRlZmF1bHQgc2hhZGVyTWl4aW5zO1xuIl0sIm5hbWVzIjpbImNyZWF0ZVNoYWRlciIsInR5cGUiLCJzaGFkZXJTb3VyY2UiLCJjb250ZXh0IiwiQ09NUElMRV9TVEFUVVMiLCJwbmFtZSIsInNoYWRlciIsImNvbXBpbGVTaGFkZXIiLCJjb21waWxlU3RhdHVzIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiRXJyb3IiLCJjcmVhdGVWZXJ0ZXhTaGFkZXIiLCJ2ZXJ0ZXhTaGFkZXJTb3VyY2UiLCJjYW52YXMiLCJWRVJURVhfU0hBREVSIiwidmVydGV4U2hhZGVyIiwiY3JlYXRlRnJhZ21lbnRTaGFkZXIiLCJmcmFnbWVudFNoYWRlclNvdXJjZSIsIkZSQUdNRU5UX1NIQURFUiIsImZyYWdtZW50U2hhZGVyIiwic2hhZGVyTWl4aW5zIl0sIm1hcHBpbmdzIjoiQUFBQSxDQUFZOzs7OztBQUVpQixHQUFXLENBQVgsT0FBVztTQUUvQkEsWUFBWSxDQUFDQyxJQUFJLEVBQUVDLFlBQVksRUFBRSxDQUFDO0lBQ3pDLEdBQUssQ0FBc0IsUUFBWSxHQUFaLElBQUksQ0FBQ0MsT0FBTyxFQUEvQkMsY0FBYyxHQUFLLFFBQVksQ0FBL0JBLGNBQWMsRUFDaEJDLEtBQUssR0FBR0QsY0FBYyxFQUN0QkUsTUFBTSxHQUFHLElBQUksQ0FBQ0gsT0FBTyxDQUFDSCxZQUFZLENBQUNDLElBQUk7SUFFN0MsSUFBSSxDQUFDRSxPQUFPLENBQUNELFlBQVksQ0FBQ0ksTUFBTSxFQUFFSixZQUFZO0lBRTlDLElBQUksQ0FBQ0MsT0FBTyxDQUFDSSxhQUFhLENBQUNELE1BQU07SUFFakMsR0FBSyxDQUFDRSxhQUFhLEdBQUcsSUFBSSxDQUFDTCxPQUFPLENBQUNNLGtCQUFrQixDQUFDSCxNQUFNLEVBQUVELEtBQUs7SUFFbkUsRUFBRSxHQUFHRyxhQUFhLEVBQUUsQ0FBQztRQUNuQixLQUFLLENBQUMsR0FBRyxDQUFDRSxLQUFLLENBZFUsT0FBVztJQWV0QyxDQUFDO0lBRUQsTUFBTSxDQUFDSixNQUFNO0FBQ2YsQ0FBQztTQUVRSyxrQkFBa0IsQ0FBQ0Msa0JBQWtCLEVBQUVDLE1BQU0sRUFBRSxDQUFDO0lBQ3ZELEdBQUssQ0FBcUIsUUFBWSxHQUFaLElBQUksQ0FBQ1YsT0FBTyxFQUE5QlcsYUFBYSxHQUFLLFFBQVksQ0FBOUJBLGFBQWEsRUFDZmIsSUFBSSxHQUFHYSxhQUFhLEVBQ3BCQyxZQUFZLEdBQUcsSUFBSSxDQUFDZixZQUFZLENBQUNDLElBQUksRUFBRVcsa0JBQWtCO0lBRS9ELE1BQU0sQ0FBQ0csWUFBWTtBQUNyQixDQUFDO1NBRVFDLG9CQUFvQixDQUFDQyxvQkFBb0IsRUFBRUosTUFBTSxFQUFFLENBQUM7SUFDM0QsR0FBSyxDQUF1QixRQUFZLEdBQVosSUFBSSxDQUFDVixPQUFPLEVBQWhDZSxlQUFlLEdBQUssUUFBWSxDQUFoQ0EsZUFBZSxFQUNqQmpCLElBQUksR0FBR2lCLGVBQWUsRUFDdEJDLGNBQWMsR0FBRyxJQUFJLENBQUNuQixZQUFZLENBQUNDLElBQUksRUFBRWdCLG9CQUFvQjtJQUVuRSxNQUFNLENBQUNFLGNBQWM7QUFDdkIsQ0FBQztBQUVELEdBQUssQ0FBQ0MsWUFBWSxHQUFHLENBQUM7SUFDcEJwQixZQUFZLEVBQVpBLFlBQVk7SUFDWlcsa0JBQWtCLEVBQWxCQSxrQkFBa0I7SUFDbEJLLG9CQUFvQixFQUFwQkEsb0JBQW9CO0FBQ3RCLENBQUM7ZUFFY0ksWUFBWSJ9