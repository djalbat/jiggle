"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.scaleMatrixFromScale = scaleMatrixFromScale;
exports.offsetsMatrixFromOffsets = offsetsMatrixFromOffsets;
exports.positionMatrixFromNothing = positionMatrixFromNothing;
exports.positionMatrixFromDistance = positionMatrixFromDistance;
exports.positionMatrixFromPosition = positionMatrixFromPosition;
exports.rotationsMatrixFromAngles = rotationsMatrixFromAngles;
exports.rotationsMatrixFromRotations = rotationsMatrixFromRotations;
exports.normalsMatrixFromRotationsMatrix = normalsMatrixFromRotationsMatrix;
exports.projectionMatrixFromWidthAndHeight = projectionMatrixFromWidthAndHeight;
var _vector = require("../maths/vector");
var _array = require("../utilities/array");
var _constants = require("../constants");
var _matrix = require("../maths/matrix");
function scaleMatrixFromScale(scale) {
    var scaleMatrix = (0, _matrix).identity4();
    scaleMatrix = (0, _matrix).scale4(scaleMatrix, scale);
    return scaleMatrix;
}
function offsetsMatrixFromOffsets(offsets) {
    var offsetsMatrix = (0, _matrix).identity4(); ///
    offsetsMatrix = (0, _matrix).translate4(offsetsMatrix, offsets);
    return offsetsMatrix;
}
function positionMatrixFromNothing() {
    var positionMatrix = (0, _matrix).identity4(); ///
    return positionMatrix;
}
function positionMatrixFromDistance(distance) {
    var positionMatrix = (0, _matrix).identity4(); ///
    var x = 0, y = 0, z = -distance;
    positionMatrix = (0, _matrix).translate4(positionMatrix, [
        x,
        y,
        z
    ]);
    return positionMatrix;
}
function positionMatrixFromPosition(position) {
    var positionMatrix = (0, _matrix).identity4(); ///
    positionMatrix = (0, _matrix).translate4(positionMatrix, position);
    return positionMatrix;
}
function rotationsMatrixFromAngles(angles, param) {
    var reverseOrder = param === void 0 ? false : param;
    var rotationsMatrix = (0, _matrix).identity4(); ///
    var firstAngle = (0, _array).first(angles), secondAngle = (0, _array).second(angles), thirdAngle = (0, _array).third(angles), xAngle = firstAngle, yAngle = secondAngle, zAngle = thirdAngle, xAxis = [
        1,
        0,
        0
    ], yAxis = [
        0,
        1,
        0
    ], zAxis = [
        0,
        0,
        1
    ];
    if (reverseOrder) {
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, zAngle, zAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, yAngle, yAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, xAngle, xAxis);
    } else {
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, xAngle, xAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, yAngle, yAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, zAngle, zAxis);
    }
    return rotationsMatrix;
}
function rotationsMatrixFromRotations(rotations) {
    var scalar = _constants.DEGREES_TO_RADIANS_SCALAR, angles = (0, _vector).scale3(rotations, scalar), rotationsMatrix = rotationsMatrixFromAngles(angles);
    return rotationsMatrix;
}
function normalsMatrixFromRotationsMatrix(rotationsMatrix) {
    var normalsMatrix = (0, _matrix).invert4(rotationsMatrix);
    normalsMatrix = (0, _matrix).transpose4(normalsMatrix);
    return normalsMatrix;
}
function projectionMatrixFromWidthAndHeight(width, height) {
    var fieldOfView = _constants.FIELD_OF_VIEW, aspectRatio = width / height, zNear = _constants.Z_NEAR, zFar = _constants.Z_FAR, projectionMatrix = (0, _matrix).perspective4(fieldOfView, aspectRatio, zNear, zFar);
    return projectionMatrix;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWF0cml4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBzY2FsZTMgfSBmcm9tIFwiLi4vbWF0aHMvdmVjdG9yXCI7XG5pbXBvcnQgeyBmaXJzdCwgc2Vjb25kLCB0aGlyZCB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXJyYXlcIjtcbmltcG9ydCB7IERFR1JFRVNfVE9fUkFESUFOU19TQ0FMQVIsIEZJRUxEX09GX1ZJRVcsIFpfTkVBUiwgWl9GQVIgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBpZGVudGl0eTQsIHNjYWxlNCwgaW52ZXJ0NCwgcm90YXRlNCwgdHJhbnNsYXRlNCwgdHJhbnNwb3NlNCwgcGVyc3BlY3RpdmU0IH0gZnJvbSBcIi4uL21hdGhzL21hdHJpeFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gc2NhbGVNYXRyaXhGcm9tU2NhbGUoc2NhbGUpIHtcbiAgbGV0IHNjYWxlTWF0cml4ID0gaWRlbnRpdHk0KCk7XG5cbiAgc2NhbGVNYXRyaXggPSBzY2FsZTQoc2NhbGVNYXRyaXgsIHNjYWxlKTtcblxuICByZXR1cm4gc2NhbGVNYXRyaXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvZmZzZXRzTWF0cml4RnJvbU9mZnNldHMob2Zmc2V0cykge1xuICBsZXQgb2Zmc2V0c01hdHJpeCA9IGlkZW50aXR5NCgpOyAvLy9cblxuICBvZmZzZXRzTWF0cml4ID0gdHJhbnNsYXRlNChvZmZzZXRzTWF0cml4LCBvZmZzZXRzKTtcblxuICByZXR1cm4gb2Zmc2V0c01hdHJpeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvc2l0aW9uTWF0cml4RnJvbU5vdGhpbmcoKSB7XG4gIGxldCBwb3NpdGlvbk1hdHJpeCA9IGlkZW50aXR5NCgpOyAvLy9cblxuICByZXR1cm4gcG9zaXRpb25NYXRyaXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3NpdGlvbk1hdHJpeEZyb21EaXN0YW5jZShkaXN0YW5jZSkge1xuICBsZXQgcG9zaXRpb25NYXRyaXggPSBpZGVudGl0eTQoKTsgLy8vXG5cbiAgY29uc3QgeCA9IDAsXG4gICAgICAgIHkgPSAwLFxuICAgICAgICB6ID0gLWRpc3RhbmNlO1xuXG4gIHBvc2l0aW9uTWF0cml4ID0gdHJhbnNsYXRlNChwb3NpdGlvbk1hdHJpeCwgWyB4LCB5LCB6IF0pO1xuXG4gIHJldHVybiBwb3NpdGlvbk1hdHJpeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvc2l0aW9uTWF0cml4RnJvbVBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gIGxldCBwb3NpdGlvbk1hdHJpeCA9IGlkZW50aXR5NCgpOyAvLy9cblxuICBwb3NpdGlvbk1hdHJpeCA9IHRyYW5zbGF0ZTQocG9zaXRpb25NYXRyaXgsIHBvc2l0aW9uKTtcblxuICByZXR1cm4gcG9zaXRpb25NYXRyaXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGlvbnNNYXRyaXhGcm9tQW5nbGVzKGFuZ2xlcywgcmV2ZXJzZU9yZGVyID0gZmFsc2UpIHtcbiAgbGV0IHJvdGF0aW9uc01hdHJpeCA9IGlkZW50aXR5NCgpOyAvLy9cblxuICBjb25zdCBmaXJzdEFuZ2xlID0gZmlyc3QoYW5nbGVzKSxcbiAgICAgICAgc2Vjb25kQW5nbGUgPSBzZWNvbmQoYW5nbGVzKSxcbiAgICAgICAgdGhpcmRBbmdsZSA9IHRoaXJkKGFuZ2xlcyksXG4gICAgICAgIHhBbmdsZSA9IGZpcnN0QW5nbGUsXG4gICAgICAgIHlBbmdsZSA9IHNlY29uZEFuZ2xlLFxuICAgICAgICB6QW5nbGUgPSB0aGlyZEFuZ2xlLFxuICAgICAgICB4QXhpcyA9IFsgMSwgMCwgMCBdLFxuICAgICAgICB5QXhpcyA9IFsgMCwgMSwgMCBdLFxuICAgICAgICB6QXhpcyA9IFsgMCwgMCwgMSBdO1xuXG4gIGlmIChyZXZlcnNlT3JkZXIpIHtcbiAgICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGU0KHJvdGF0aW9uc01hdHJpeCwgekFuZ2xlLCB6QXhpcyk7XG5cbiAgICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGU0KHJvdGF0aW9uc01hdHJpeCwgeUFuZ2xlLCB5QXhpcyk7XG5cbiAgICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGU0KHJvdGF0aW9uc01hdHJpeCwgeEFuZ2xlLCB4QXhpcyk7XG4gIH0gZWxzZSB7XG4gICAgcm90YXRpb25zTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbnNNYXRyaXgsIHhBbmdsZSwgeEF4aXMpO1xuXG4gICAgcm90YXRpb25zTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbnNNYXRyaXgsIHlBbmdsZSwgeUF4aXMpO1xuXG4gICAgcm90YXRpb25zTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbnNNYXRyaXgsIHpBbmdsZSwgekF4aXMpO1xuICB9XG5cbiAgcmV0dXJuIHJvdGF0aW9uc01hdHJpeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0aW9uc01hdHJpeEZyb21Sb3RhdGlvbnMocm90YXRpb25zKSB7XG4gIGNvbnN0IHNjYWxhciA9IERFR1JFRVNfVE9fUkFESUFOU19TQ0FMQVIsXG4gICAgICAgIGFuZ2xlcyA9IHNjYWxlMyhyb3RhdGlvbnMsIHNjYWxhciksXG4gICAgICAgIHJvdGF0aW9uc01hdHJpeCA9IHJvdGF0aW9uc01hdHJpeEZyb21BbmdsZXMoYW5nbGVzKTtcblxuICByZXR1cm4gcm90YXRpb25zTWF0cml4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsc01hdHJpeEZyb21Sb3RhdGlvbnNNYXRyaXgocm90YXRpb25zTWF0cml4KSB7XG4gIGxldCBub3JtYWxzTWF0cml4ID0gaW52ZXJ0NChyb3RhdGlvbnNNYXRyaXgpO1xuXG4gIG5vcm1hbHNNYXRyaXggPSB0cmFuc3Bvc2U0KG5vcm1hbHNNYXRyaXgpO1xuXG4gIHJldHVybiBub3JtYWxzTWF0cml4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvamVjdGlvbk1hdHJpeEZyb21XaWR0aEFuZEhlaWdodCh3aWR0aCwgaGVpZ2h0KSB7XG4gIGNvbnN0IGZpZWxkT2ZWaWV3ID0gRklFTERfT0ZfVklFVywgIC8vL1xuICAgICAgICBhc3BlY3RSYXRpbyA9IHdpZHRoIC8gaGVpZ2h0LFxuICAgICAgICB6TmVhciA9IFpfTkVBUiwgLy8vXG4gICAgICAgIHpGYXIgPSBaX0ZBUiwgLy8vXG4gICAgICAgIHByb2plY3Rpb25NYXRyaXggPSBwZXJzcGVjdGl2ZTQoZmllbGRPZlZpZXcsIGFzcGVjdFJhdGlvLCB6TmVhciwgekZhcik7XG5cbiAgcmV0dXJuIHByb2plY3Rpb25NYXRyaXg7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkNBQUEsVUFBWTs7OztRQU9JLG9CQUFvQixHQUFwQixvQkFBb0I7UUFRcEIsd0JBQXdCLEdBQXhCLHdCQUF3QjtRQVF4Qix5QkFBeUIsR0FBekIseUJBQXlCO1FBTXpCLDBCQUEwQixHQUExQiwwQkFBMEI7UUFZMUIsMEJBQTBCLEdBQTFCLDBCQUEwQjtRQVExQix5QkFBeUIsR0FBekIseUJBQXlCO1FBOEJ6Qiw0QkFBNEIsR0FBNUIsNEJBQTRCO1FBUTVCLGdDQUFnQyxHQUFoQyxnQ0FBZ0M7UUFRaEMsa0NBQWtDLEdBQWxDLGtDQUFrQztBQTdGM0IsR0FBaUIsQ0FBakIsT0FBaUI7QUFDSCxHQUFvQixDQUFwQixNQUFvQjtBQUNlLEdBQWMsQ0FBZCxVQUFjO0FBQ0ksR0FBaUIsQ0FBakIsT0FBaUI7U0FFM0Ysb0JBQW9CLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDM0MsR0FBRyxDQUFDLFdBQVcsT0FIeUUsT0FBaUI7SUFLekcsV0FBVyxPQUw2RSxPQUFpQixTQUtwRixXQUFXLEVBQUUsS0FBSztXQUVoQyxXQUFXO0FBQ3BCLENBQUM7U0FFZSx3QkFBd0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqRCxHQUFHLENBQUMsYUFBYSxPQVh1RSxPQUFpQixjQVd4RSxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7SUFFcEMsYUFBYSxPQWIyRSxPQUFpQixhQWE5RSxhQUFhLEVBQUUsT0FBTztXQUUxQyxhQUFh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