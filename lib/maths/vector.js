"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    zero2: function() {
        return zero2;
    },
    zero3: function() {
        return zero3;
    },
    zero4: function() {
        return zero4;
    },
    length2: function() {
        return length2;
    },
    length3: function() {
        return length3;
    },
    length4: function() {
        return length4;
    },
    dot2: function() {
        return dot2;
    },
    dot3: function() {
        return dot3;
    },
    dot4: function() {
        return dot4;
    },
    cross3: function() {
        return cross3;
    },
    normalise2: function() {
        return normalise2;
    },
    normalise3: function() {
        return normalise3;
    },
    normalise4: function() {
        return normalise4;
    },
    reflect2: function() {
        return reflect2;
    },
    reflect3: function() {
        return reflect3;
    },
    reflect4: function() {
        return reflect4;
    },
    truncate4: function() {
        return truncate4;
    },
    scale2: function() {
        return scale2;
    },
    scale3: function() {
        return scale3;
    },
    scale4: function() {
        return scale4;
    },
    add2: function() {
        return add2;
    },
    add3: function() {
        return add3;
    },
    add4: function() {
        return add4;
    },
    subtract2: function() {
        return subtract2;
    },
    subtract3: function() {
        return subtract3;
    },
    subtract4: function() {
        return subtract4;
    },
    multiply2: function() {
        return multiply2;
    },
    multiply3: function() {
        return multiply3;
    },
    multiply4: function() {
        return multiply4;
    },
    transform2: function() {
        return transform2;
    },
    transform3: function() {
        return transform3;
    },
    transform4: function() {
        return transform4;
    },
    default: function() {
        return _default;
    }
});
function zero2() {
    return [
        0,
        0
    ];
}
function zero3() {
    return [
        0,
        0,
        0
    ];
}
function zero4() {
    return [
        0,
        0,
        0,
        0
    ];
}
function length2(vector) {
    var x = vector[0], y = vector[1];
    return Math.sqrt(x * x + y * y);
}
function length3(vector) {
    var x = vector[0], y = vector[1], z = vector[2];
    return Math.sqrt(x * x + y * y + z * z);
}
function length4(vector) {
    var x = vector[0], y = vector[1], z = vector[2], w = vector[3];
    return Math.sqrt(x * x + y * y + z * z + w * w);
}
function dot2(vectorA, vectorB) {
    return vectorA[0] * vectorB[0] + vectorA[1] * vectorB[1];
}
function dot3(vectorA, vectorB) {
    return vectorA[0] * vectorB[0] + vectorA[1] * vectorB[1] + vectorA[2] * vectorB[2];
}
function dot4(vectorA, vectorB) {
    return vectorA[0] * vectorB[0] + vectorA[1] * vectorB[1] + vectorA[2] * vectorB[2] + vectorA[3] * vectorB[3];
}
function cross3(vectorA, vectorB) {
    var ax = vectorA[0], ay = vectorA[1], az = vectorA[2], bx = vectorB[0], by = vectorB[1], bz = vectorB[2];
    return [
        ay * bz - az * by,
        az * bx - ax * bz,
        ax * by - ay * bx
    ];
}
function normalise2(vector) {
    var x = vector[0], y = vector[1], length = Math.sqrt(x * x + y * y);
    if (length > 0) {
        return [
            x / length,
            y / length
        ];
    }
}
function normalise3(vector) {
    var x = vector[0], y = vector[1], z = vector[2], length = Math.sqrt(x * x + y * y + z * z);
    if (length > 0) {
        return [
            x / length,
            y / length,
            z / length
        ];
    }
}
function normalise4(vector) {
    var x = vector[0], y = vector[1], z = vector[2], w = vector[3], length = Math.sqrt(x * x + y * y + z * z + w * w);
    if (length > 0) {
        return [
            x / length,
            y / length,
            z / length,
            w / length
        ];
    }
}
function reflect2(vector) {
    return [
        -vector[0],
        -vector[1]
    ];
}
function reflect3(vector) {
    return [
        -vector[0],
        -vector[1],
        -vector[2]
    ];
}
function reflect4(vector) {
    return [
        -vector[0],
        -vector[1],
        -vector[2],
        -vector[3]
    ];
}
function truncate4(vector) {
    return [
        vector[0],
        vector[1],
        vector[2]
    ];
}
function scale2(vector, scalar) {
    return [
        vector[0] * scalar,
        vector[1] * scalar
    ];
}
function scale3(vector, scalar) {
    return [
        vector[0] * scalar,
        vector[1] * scalar,
        vector[2] * scalar
    ];
}
function scale4(vector, scalar) {
    return [
        vector[0] * scalar,
        vector[1] * scalar,
        vector[2] * scalar,
        vector[3] * scalar
    ];
}
function add2(vectorA, vectorB) {
    return [
        vectorA[0] + vectorB[0],
        vectorA[1] + vectorB[1]
    ];
}
function add3(vectorA, vectorB) {
    return [
        vectorA[0] + vectorB[0],
        vectorA[1] + vectorB[1],
        vectorA[2] + vectorB[2]
    ];
}
function add4(vectorA, vectorB) {
    return [
        vectorA[0] + vectorB[0],
        vectorA[1] + vectorB[1],
        vectorA[2] + vectorB[2],
        vectorA[3] + vectorB[3]
    ];
}
function subtract2(vectorA, vectorB) {
    return [
        vectorA[0] - vectorB[0],
        vectorA[1] - vectorB[1]
    ];
}
function subtract3(vectorA, vectorB) {
    return [
        vectorA[0] - vectorB[0],
        vectorA[1] - vectorB[1],
        vectorA[2] - vectorB[2]
    ];
}
function subtract4(vectorA, vectorB) {
    return [
        vectorA[0] - vectorB[0],
        vectorA[1] - vectorB[1],
        vectorA[2] - vectorB[2],
        vectorA[3] - vectorB[3]
    ];
}
function multiply2(vectorA, vectorB) {
    return [
        vectorA[0] * vectorB[0],
        vectorA[1] * vectorB[1]
    ];
}
function multiply3(vectorA, vectorB) {
    return [
        vectorA[0] * vectorB[0],
        vectorA[1] * vectorB[1],
        vectorA[2] * vectorB[2]
    ];
}
function multiply4(vectorA, vectorB) {
    return [
        vectorA[0] * vectorB[0],
        vectorA[1] * vectorB[1],
        vectorA[2] * vectorB[2],
        vectorA[3] * vectorB[3]
    ];
}
function transform2(vector, matrix) {
    var x = vector[0], y = vector[1];
    return [
        matrix[0] * x + matrix[2] * y,
        matrix[1] * x + matrix[3] * y
    ];
}
function transform3(vector, matrix) {
    var x = vector[0], y = vector[1], z = vector[2];
    return [
        matrix[0] * x + matrix[3] * y + matrix[6] * z,
        matrix[1] * x + matrix[4] * y + matrix[7] * z,
        matrix[2] * x + matrix[5] * y + matrix[8] * z
    ];
}
function transform4(vector, matrix) {
    var x = vector[0], y = vector[1], z = vector[2], w = vector[3];
    return [
        matrix[0] * x + matrix[4] * y + matrix[8] * z + matrix[12] * w,
        matrix[1] * x + matrix[5] * y + matrix[9] * z + matrix[13] * w,
        matrix[2] * x + matrix[6] * y + matrix[10] * z + matrix[14] * w,
        matrix[3] * x + matrix[7] * y + matrix[11] * z + matrix[15] * w
    ];
}
var _default = {
    zero2: zero2,
    zero3: zero3,
    zero4: zero4,
    length2: length2,
    length3: length3,
    length4: length4,
    dot2: dot2,
    dot3: dot3,
    dot4: dot4,
    cross3: cross3,
    normalise2: normalise2,
    normalise3: normalise3,
    normalise4: normalise4,
    reflect2: reflect2,
    reflect3: reflect3,
    reflect4: reflect4,
    truncate4: truncate4,
    scale2: scale2,
    scale3: scale3,
    scale4: scale4,
    add2: add2,
    add3: add3,
    add4: add4,
    subtract2: subtract2,
    subtract3: subtract3,
    subtract4: subtract4,
    multiply2: multiply2,
    multiply3: multiply3,
    multiply4: multiply4,
    transform2: transform2,
    transform3: transform3,
    transform4: transform4
};

//# sourceMappingURL=data:application/json;base64,