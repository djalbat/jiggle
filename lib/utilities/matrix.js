"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.scaleMatrixFromScale = scaleMatrixFromScale;
exports.offsetsMatrixFromOffsets = offsetsMatrixFromOffsets;
exports.positionMatrixFromNothing = positionMatrixFromNothing;
exports.positionMatrixFromDistance = positionMatrixFromDistance;
exports.positionMatrixFromPosition = positionMatrixFromPosition;
exports.rotationsMatrixFromAngles = rotationsMatrixFromAngles;
exports.rotationsMatrixFromRotations = rotationsMatrixFromRotations;
exports.normalsMatrixFromRotationsMatrix = normalsMatrixFromRotationsMatrix;
exports.projectionMatrixFromCameraAndCanvas = projectionMatrixFromCameraAndCanvas;
var _vector = require("../maths/vector");
var _array = require("../utilities/array");
var _constants = require("../constants");
var _matrix = require("../maths/matrix");
function scaleMatrixFromScale(scale) {
    var scaleMatrix = (0, _matrix).identity4();
    scaleMatrix = (0, _matrix).scale4(scaleMatrix, scale);
    return scaleMatrix;
}
function offsetsMatrixFromOffsets(offsets) {
    var offsetsMatrix = (0, _matrix).identity4(); ///
    offsetsMatrix = (0, _matrix).translate4(offsetsMatrix, offsets);
    return offsetsMatrix;
}
function positionMatrixFromNothing() {
    var positionMatrix = (0, _matrix).identity4(); ///
    return positionMatrix;
}
function positionMatrixFromDistance(distance) {
    var positionMatrix = (0, _matrix).identity4(); ///
    var x = 0, y = 0, z = -distance;
    positionMatrix = (0, _matrix).translate4(positionMatrix, [
        x,
        y,
        z
    ]);
    return positionMatrix;
}
function positionMatrixFromPosition(position) {
    var positionMatrix = (0, _matrix).identity4(); ///
    positionMatrix = (0, _matrix).translate4(positionMatrix, position);
    return positionMatrix;
}
function rotationsMatrixFromAngles(angles) {
    var reverseOrder = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var rotationsMatrix = (0, _matrix).identity4(); ///
    var firstAngle = (0, _array).first(angles), secondAngle = (0, _array).second(angles), thirdAngle = (0, _array).third(angles), xAngle = firstAngle, yAngle = secondAngle, zAngle = thirdAngle, xAxis = [
        1,
        0,
        0
    ], yAxis = [
        0,
        1,
        0
    ], zAxis = [
        0,
        0,
        1
    ];
    if (reverseOrder) {
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, zAngle, zAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, yAngle, yAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, xAngle, xAxis);
    } else {
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, xAngle, xAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, yAngle, yAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, zAngle, zAxis);
    }
    return rotationsMatrix;
}
function rotationsMatrixFromRotations(rotations) {
    var scalar = _constants.DEGREES_TO_RADIANS_MULTIPLIER, angles = (0, _vector).scale3(rotations, scalar), rotationsMatrix = rotationsMatrixFromAngles(angles);
    return rotationsMatrix;
}
function normalsMatrixFromRotationsMatrix(rotationsMatrix) {
    var normalsMatrix = (0, _matrix).invert4(rotationsMatrix); ///
    normalsMatrix = (0, _matrix).transpose4(normalsMatrix);
    return normalsMatrix;
}
function projectionMatrixFromCameraAndCanvas(camera, canvas) {
    var zFar = camera.getZFar(), zNear = camera.getZNear(), width = canvas.getWidth(), height = canvas.getHeight(), fieldOfView = camera.getFieldOfView(), aspectRatio = width / height, projectionMatrix = (0, _matrix).perspective4(fieldOfView, aspectRatio, zNear, zFar);
    return projectionMatrix;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,