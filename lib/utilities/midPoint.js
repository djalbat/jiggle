"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.calculateMidPointPosition = calculateMidPointPosition;
exports.projectMidPointPositionOntoXYPlane = projectMidPointPositionOntoXYPlane;
exports.isMidPointPositionToOneSideOfMaskingEdges = isMidPointPositionToOneSideOfMaskingEdges;
var _vector = require("../maths/vector");
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
        for(var i = 0, arr2 = new Array(arr.length); i < arr.length; i++){
            arr2[i] = arr[i];
        }
        return arr2;
    }
}
function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}
function calculateMidPointPosition(vertices) {
    var midPointPosition1 = vertices.reduce(function(midPointPosition, vertex) {
        var vertexPosition = vertex.getPosition(), scaledVertexPosition = (0, _vector).scale3(vertexPosition, 1 / 3);
        midPointPosition = (0, _vector).add3(midPointPosition, scaledVertexPosition);
        return midPointPosition;
    }, [
        0,
        0,
        0
    ]);
    return midPointPosition1;
}
function projectMidPointPositionOntoXYPlane(midPointPosition) {
    midPointPosition = _toConsumableArray(midPointPosition.slice(0, 2)).concat([
        0
    ]); ///
    return midPointPosition;
}
function isMidPointPositionToOneSideOfMaskingEdges(midPointPosition, maskingEdges) {
    var midPointPositionToTheLeftOfMaskingEdges = isMidPointPositionToTheLeftOfMaskingEdges(midPointPosition, maskingEdges), midPointPositionToTheRightOfMaskingEdges = isMidPointPositionToTheRightOfMaskingEdges(midPointPosition, maskingEdges), midPointPositionToOneSideOfMaskingEdges = midPointPositionToTheLeftOfMaskingEdges || midPointPositionToTheRightOfMaskingEdges; ///
    return midPointPositionToOneSideOfMaskingEdges;
}
function isMidPointPositionToTheLeftOfMaskingEdges(midPointPosition, maskingEdges) {
    var midPointPositionToTheLeftOfMaskingEdges1 = maskingEdges.reduce(function(midPointPositionToTheLeftOfMaskingEdges, maskingEdge) {
        if (midPointPositionToTheLeftOfMaskingEdges) {
            var midPointPositionToTheLeftOfMaskingEdge = maskingEdge.isMidPointPositionToTheLeft(midPointPosition);
            midPointPositionToTheLeftOfMaskingEdges = midPointPositionToTheLeftOfMaskingEdge;
        }
        return midPointPositionToTheLeftOfMaskingEdges;
    }, true);
    return midPointPositionToTheLeftOfMaskingEdges1;
}
function isMidPointPositionToTheRightOfMaskingEdges(midPointPosition, maskingEdges) {
    var midPointPositionToTheRightOfMaskingEdges1 = maskingEdges.reduce(function(midPointPositionToTheRightOfMaskingEdges, maskingEdge) {
        if (midPointPositionToTheRightOfMaskingEdges) {
            var midPointPositionToTheRightOfMaskingEdge = maskingEdge.isMidPointPositionToTheRight(midPointPosition);
            midPointPositionToTheRightOfMaskingEdges = midPointPositionToTheRightOfMaskingEdge;
        }
        return midPointPositionToTheRightOfMaskingEdges;
    }, true);
    return midPointPositionToTheRightOfMaskingEdges1;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWlkUG9pbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFkZDMsIHNjYWxlMyB9IGZyb20gXCIuLi9tYXRocy92ZWN0b3JcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZU1pZFBvaW50UG9zaXRpb24odmVydGljZXMpIHtcbiAgY29uc3QgbWlkUG9pbnRQb3NpdGlvbiA9IHZlcnRpY2VzLnJlZHVjZSgobWlkUG9pbnRQb3NpdGlvbiwgdmVydGV4KSA9PiB7XG4gICAgY29uc3QgdmVydGV4UG9zaXRpb24gPSB2ZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgICBzY2FsZWRWZXJ0ZXhQb3NpdGlvbiA9IHNjYWxlMyh2ZXJ0ZXhQb3NpdGlvbiwgMS8zKTtcblxuICAgIG1pZFBvaW50UG9zaXRpb24gPSBhZGQzKG1pZFBvaW50UG9zaXRpb24sIHNjYWxlZFZlcnRleFBvc2l0aW9uKTtcblxuICAgIHJldHVybiBtaWRQb2ludFBvc2l0aW9uO1xuICB9LCBbIDAsIDAsIDAgXSk7XG5cbiAgcmV0dXJuIG1pZFBvaW50UG9zaXRpb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9qZWN0TWlkUG9pbnRQb3NpdGlvbk9udG9YWVBsYW5lKG1pZFBvaW50UG9zaXRpb24pIHtcbiAgbWlkUG9pbnRQb3NpdGlvbiA9IFsgLi4ubWlkUG9pbnRQb3NpdGlvbi5zbGljZSgwLCAyKSwgMCBdOyAgLy8vXG5cbiAgcmV0dXJuIG1pZFBvaW50UG9zaXRpb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc01pZFBvaW50UG9zaXRpb25Ub09uZVNpZGVPZk1hc2tpbmdFZGdlcyhtaWRQb2ludFBvc2l0aW9uLCBtYXNraW5nRWRnZXMpIHtcbiAgY29uc3QgbWlkUG9pbnRQb3NpdGlvblRvVGhlTGVmdE9mTWFza2luZ0VkZ2VzID0gaXNNaWRQb2ludFBvc2l0aW9uVG9UaGVMZWZ0T2ZNYXNraW5nRWRnZXMobWlkUG9pbnRQb3NpdGlvbiwgbWFza2luZ0VkZ2VzKSxcbiAgICAgICAgbWlkUG9pbnRQb3NpdGlvblRvVGhlUmlnaHRPZk1hc2tpbmdFZGdlcyA9IGlzTWlkUG9pbnRQb3NpdGlvblRvVGhlUmlnaHRPZk1hc2tpbmdFZGdlcyhtaWRQb2ludFBvc2l0aW9uLCBtYXNraW5nRWRnZXMpLFxuICAgICAgICBtaWRQb2ludFBvc2l0aW9uVG9PbmVTaWRlT2ZNYXNraW5nRWRnZXMgPSBtaWRQb2ludFBvc2l0aW9uVG9UaGVMZWZ0T2ZNYXNraW5nRWRnZXMgfHwgbWlkUG9pbnRQb3NpdGlvblRvVGhlUmlnaHRPZk1hc2tpbmdFZGdlczsgLy8vXG5cbiAgcmV0dXJuIG1pZFBvaW50UG9zaXRpb25Ub09uZVNpZGVPZk1hc2tpbmdFZGdlcztcbn1cblxuZnVuY3Rpb24gaXNNaWRQb2ludFBvc2l0aW9uVG9UaGVMZWZ0T2ZNYXNraW5nRWRnZXMobWlkUG9pbnRQb3NpdGlvbiwgbWFza2luZ0VkZ2VzKSB7XG4gIGNvbnN0IG1pZFBvaW50UG9zaXRpb25Ub1RoZUxlZnRPZk1hc2tpbmdFZGdlcyA9IG1hc2tpbmdFZGdlcy5yZWR1Y2UoKG1pZFBvaW50UG9zaXRpb25Ub1RoZUxlZnRPZk1hc2tpbmdFZGdlcywgbWFza2luZ0VkZ2UpID0+IHtcbiAgICBpZiAobWlkUG9pbnRQb3NpdGlvblRvVGhlTGVmdE9mTWFza2luZ0VkZ2VzKSB7XG4gICAgICBjb25zdCBtaWRQb2ludFBvc2l0aW9uVG9UaGVMZWZ0T2ZNYXNraW5nRWRnZSA9IG1hc2tpbmdFZGdlLmlzTWlkUG9pbnRQb3NpdGlvblRvVGhlTGVmdChtaWRQb2ludFBvc2l0aW9uKTtcblxuICAgICAgbWlkUG9pbnRQb3NpdGlvblRvVGhlTGVmdE9mTWFza2luZ0VkZ2VzID0gbWlkUG9pbnRQb3NpdGlvblRvVGhlTGVmdE9mTWFza2luZ0VkZ2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1pZFBvaW50UG9zaXRpb25Ub1RoZUxlZnRPZk1hc2tpbmdFZGdlcztcbiAgfSwgdHJ1ZSk7XG5cbiAgcmV0dXJuIG1pZFBvaW50UG9zaXRpb25Ub1RoZUxlZnRPZk1hc2tpbmdFZGdlcztcbn1cblxuZnVuY3Rpb24gaXNNaWRQb2ludFBvc2l0aW9uVG9UaGVSaWdodE9mTWFza2luZ0VkZ2VzKG1pZFBvaW50UG9zaXRpb24sIG1hc2tpbmdFZGdlcykge1xuICBjb25zdCBtaWRQb2ludFBvc2l0aW9uVG9UaGVSaWdodE9mTWFza2luZ0VkZ2VzID0gbWFza2luZ0VkZ2VzLnJlZHVjZSgobWlkUG9pbnRQb3NpdGlvblRvVGhlUmlnaHRPZk1hc2tpbmdFZGdlcywgbWFza2luZ0VkZ2UpID0+IHtcbiAgICBpZiAobWlkUG9pbnRQb3NpdGlvblRvVGhlUmlnaHRPZk1hc2tpbmdFZGdlcykge1xuICAgICAgY29uc3QgbWlkUG9pbnRQb3NpdGlvblRvVGhlUmlnaHRPZk1hc2tpbmdFZGdlID0gbWFza2luZ0VkZ2UuaXNNaWRQb2ludFBvc2l0aW9uVG9UaGVSaWdodChtaWRQb2ludFBvc2l0aW9uKTtcblxuICAgICAgbWlkUG9pbnRQb3NpdGlvblRvVGhlUmlnaHRPZk1hc2tpbmdFZGdlcyA9IG1pZFBvaW50UG9zaXRpb25Ub1RoZVJpZ2h0T2ZNYXNraW5nRWRnZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWlkUG9pbnRQb3NpdGlvblRvVGhlUmlnaHRPZk1hc2tpbmdFZGdlcztcbiAgfSwgdHJ1ZSk7XG5cbiAgcmV0dXJuIG1pZFBvaW50UG9zaXRpb25Ub1RoZVJpZ2h0T2ZNYXNraW5nRWRnZXM7XG59XG4iXSwibmFtZXMiOlsiY2FsY3VsYXRlTWlkUG9pbnRQb3NpdGlvbiIsInByb2plY3RNaWRQb2ludFBvc2l0aW9uT250b1hZUGxhbmUiLCJpc01pZFBvaW50UG9zaXRpb25Ub09uZVNpZGVPZk1hc2tpbmdFZGdlcyIsInZlcnRpY2VzIiwibWlkUG9pbnRQb3NpdGlvbiIsInJlZHVjZSIsInZlcnRleCIsInZlcnRleFBvc2l0aW9uIiwiZ2V0UG9zaXRpb24iLCJzY2FsZWRWZXJ0ZXhQb3NpdGlvbiIsInNsaWNlIiwibWFza2luZ0VkZ2VzIiwibWlkUG9pbnRQb3NpdGlvblRvVGhlTGVmdE9mTWFza2luZ0VkZ2VzIiwiaXNNaWRQb2ludFBvc2l0aW9uVG9UaGVMZWZ0T2ZNYXNraW5nRWRnZXMiLCJtaWRQb2ludFBvc2l0aW9uVG9UaGVSaWdodE9mTWFza2luZ0VkZ2VzIiwiaXNNaWRQb2ludFBvc2l0aW9uVG9UaGVSaWdodE9mTWFza2luZ0VkZ2VzIiwibWlkUG9pbnRQb3NpdGlvblRvT25lU2lkZU9mTWFza2luZ0VkZ2VzIiwibWFza2luZ0VkZ2UiLCJtaWRQb2ludFBvc2l0aW9uVG9UaGVMZWZ0T2ZNYXNraW5nRWRnZSIsImlzTWlkUG9pbnRQb3NpdGlvblRvVGhlTGVmdCIsIm1pZFBvaW50UG9zaXRpb25Ub1RoZVJpZ2h0T2ZNYXNraW5nRWRnZSIsImlzTWlkUG9pbnRQb3NpdGlvblRvVGhlUmlnaHQiXSwibWFwcGluZ3MiOiJBQUFBLENBQVk7Ozs7UUFJSUEseUJBQXlCLEdBQXpCQSx5QkFBeUI7UUFhekJDLGtDQUFrQyxHQUFsQ0Esa0NBQWtDO1FBTWxDQyx5Q0FBeUMsR0FBekNBLHlDQUF5QztBQXJCNUIsR0FBaUIsQ0FBakIsT0FBaUI7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQUU5QkYseUJBQXlCLENBQUNHLFFBQVEsRUFBRSxDQUFDO0lBQ25ELEdBQUssQ0FBQ0MsaUJBQWdCLEdBQUdELFFBQVEsQ0FBQ0UsTUFBTSxDQUFDLFFBQVEsQ0FBUEQsZ0JBQWdCLEVBQUVFLE1BQU0sRUFBSyxDQUFDO1FBQ3RFLEdBQUssQ0FBQ0MsY0FBYyxHQUFHRCxNQUFNLENBQUNFLFdBQVcsSUFDbkNDLG9CQUFvQixPQUxELE9BQWlCLFNBS05GLGNBQWMsRUFBRSxDQUFDLEdBQUMsQ0FBQztRQUV2REgsZ0JBQWdCLE9BUFMsT0FBaUIsT0FPbEJBLGdCQUFnQixFQUFFSyxvQkFBb0I7UUFFOUQsTUFBTSxDQUFDTCxnQkFBZ0I7SUFDekIsQ0FBQyxFQUFFLENBQUM7UUFBQyxDQUFDO1FBQUUsQ0FBQztRQUFFLENBQUM7SUFBQyxDQUFDO0lBRWQsTUFBTSxDQUFDQSxpQkFBZ0I7QUFDekIsQ0FBQztTQUVlSCxrQ0FBa0MsQ0FBQ0csZ0JBQWdCLEVBQUUsQ0FBQztJQUNwRUEsZ0JBQWdCLHNCQUFRQSxnQkFBZ0IsQ0FBQ00sS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQWhDLENBQUM7UUFBa0MsQ0FBQztJQUFDLENBQUMsRUFBRyxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7SUFFL0QsTUFBTSxDQUFDTixnQkFBZ0I7QUFDekIsQ0FBQztTQUVlRix5Q0FBeUMsQ0FBQ0UsZ0JBQWdCLEVBQUVPLFlBQVksRUFBRSxDQUFDO0lBQ3pGLEdBQUssQ0FBQ0MsdUNBQXVDLEdBQUdDLHlDQUF5QyxDQUFDVCxnQkFBZ0IsRUFBRU8sWUFBWSxHQUNsSEcsd0NBQXdDLEdBQUdDLDBDQUEwQyxDQUFDWCxnQkFBZ0IsRUFBRU8sWUFBWSxHQUNwSEssdUNBQXVDLEdBQUdKLHVDQUF1QyxJQUFJRSx3Q0FBd0MsQ0FBRSxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7SUFFeEksTUFBTSxDQUFDRSx1Q0FBdUM7QUFDaEQsQ0FBQztTQUVRSCx5Q0FBeUMsQ0FBQ1QsZ0JBQWdCLEVBQUVPLFlBQVksRUFBRSxDQUFDO0lBQ2xGLEdBQUssQ0FBQ0Msd0NBQXVDLEdBQUdELFlBQVksQ0FBQ04sTUFBTSxDQUFDLFFBQVEsQ0FBUE8sdUNBQXVDLEVBQUVLLFdBQVcsRUFBSyxDQUFDO1FBQzdILEVBQUUsRUFBRUwsdUNBQXVDLEVBQUUsQ0FBQztZQUM1QyxHQUFLLENBQUNNLHNDQUFzQyxHQUFHRCxXQUFXLENBQUNFLDJCQUEyQixDQUFDZixnQkFBZ0I7WUFFdkdRLHVDQUF1QyxHQUFHTSxzQ0FBc0M7UUFDbEYsQ0FBQztRQUVELE1BQU0sQ0FBQ04sdUNBQXVDO0lBQ2hELENBQUMsRUFBRSxJQUFJO0lBRVAsTUFBTSxDQUFDQSx3Q0FBdUM7QUFDaEQsQ0FBQztTQUVRRywwQ0FBMEMsQ0FBQ1gsZ0JBQWdCLEVBQUVPLFlBQVksRUFBRSxDQUFDO0lBQ25GLEdBQUssQ0FBQ0cseUNBQXdDLEdBQUdILFlBQVksQ0FBQ04sTUFBTSxDQUFDLFFBQVEsQ0FBUFMsd0NBQXdDLEVBQUVHLFdBQVcsRUFBSyxDQUFDO1FBQy9ILEVBQUUsRUFBRUgsd0NBQXdDLEVBQUUsQ0FBQztZQUM3QyxHQUFLLENBQUNNLHVDQUF1QyxHQUFHSCxXQUFXLENBQUNJLDRCQUE0QixDQUFDakIsZ0JBQWdCO1lBRXpHVSx3Q0FBd0MsR0FBR00sdUNBQXVDO1FBQ3BGLENBQUM7UUFFRCxNQUFNLENBQUNOLHdDQUF3QztJQUNqRCxDQUFDLEVBQUUsSUFBSTtJQUVQLE1BQU0sQ0FBQ0EseUNBQXdDO0FBQ2pELENBQUMifQ==