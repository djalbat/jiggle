"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.cloneEdges = cloneEdges;
exports.cloneNormal = cloneNormal;
exports.cloneVertices = cloneVertices;
exports.calculateEdges = calculateEdges;
exports.calculateNormal = calculateNormal;
exports.calculateArea = calculateArea;
var _constants = require("../constants");
var _array = require("../utilities/array");
var _vector = require("../maths/vector");
function cloneEdges(edges) {
    edges = edges.map(function(edge) {
        return edge.clone();
    });
    return edges;
}
function cloneNormal(normal) {
    normal = normal.clone();
    return normal;
}
function cloneVertices(vertices) {
    vertices = vertices.map(function(vertex) {
        return vertex.clone();
    });
    return vertices;
}
function calculateEdges(vertices, Edge) {
    var edges = vertices.map(function(vertex, index) {
        var startIndex = index, endIndex = (startIndex + 1) % _constants.VERTICES_LENGTH, startVertex = vertices[startIndex], endVertex = vertices[endIndex], edge = Edge.fromStartVertexAndEndVertex(startVertex, endVertex);
        return edge;
    });
    return edges;
}
function calculateNormal(vertices, Normal) {
    var normal = Normal.fromVertices(vertices);
    return normal;
}
function calculateArea(vertices) {
    var firstVertex = (0, _array).first(vertices), secondVertex = (0, _array).second(vertices), thirdVertex = (0, _array).third(vertices), firstVertexPosition = firstVertex.getPosition(), secondVertexPosition = secondVertex.getPosition(), thirdVertexPosition = thirdVertex.getPosition(), firstExtent = (0, _vector).subtract3(secondVertexPosition, firstVertexPosition), secondExtent = (0, _vector).subtract3(thirdVertexPosition, firstVertexPosition), area = (0, _vector).length3((0, _vector).cross3(firstExtent, secondExtent)) / 2;
    return area;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZmFjZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IFZFUlRJQ0VTX0xFTkdUSCB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IGZpcnN0LCBzZWNvbmQsIHRoaXJkIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hcnJheVwiO1xuaW1wb3J0IHsgc3VidHJhY3QzLCBjcm9zczMsIGxlbmd0aDMgfSBmcm9tIFwiLi4vbWF0aHMvdmVjdG9yXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZUVkZ2VzKGVkZ2VzKSB7XG4gIGVkZ2VzID0gZWRnZXMubWFwKChlZGdlKSA9PiBlZGdlLmNsb25lKCkpO1xuXG4gIHJldHVybiBlZGdlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lTm9ybWFsKG5vcm1hbCkge1xuICBub3JtYWwgPSBub3JtYWwuY2xvbmUoKTtcbiAgXG4gIHJldHVybiBub3JtYWw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZVZlcnRpY2VzKHZlcnRpY2VzKSB7XG4gIHZlcnRpY2VzID0gdmVydGljZXMubWFwKCh2ZXJ0ZXgpID0+IHZlcnRleC5jbG9uZSgpKTtcblxuICByZXR1cm4gdmVydGljZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVFZGdlcyh2ZXJ0aWNlcywgRWRnZSkge1xuICBjb25zdCBlZGdlcyA9IHZlcnRpY2VzLm1hcCgodmVydGV4LCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBpbmRleCwgLy8vXG4gICAgICAgICAgZW5kSW5kZXggPSAoc3RhcnRJbmRleCArIDEpICUgVkVSVElDRVNfTEVOR1RILFxuICAgICAgICAgIHN0YXJ0VmVydGV4ID0gdmVydGljZXNbc3RhcnRJbmRleF0sXG4gICAgICAgICAgZW5kVmVydGV4ID0gdmVydGljZXNbZW5kSW5kZXhdLFxuICAgICAgICAgIGVkZ2UgPSBFZGdlLmZyb21TdGFydFZlcnRleEFuZEVuZFZlcnRleChzdGFydFZlcnRleCwgZW5kVmVydGV4KTtcblxuICAgIHJldHVybiBlZGdlO1xuICB9KTtcblxuICByZXR1cm4gZWRnZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVOb3JtYWwodmVydGljZXMsIE5vcm1hbCkge1xuICBjb25zdCBub3JtYWwgPSBOb3JtYWwuZnJvbVZlcnRpY2VzKHZlcnRpY2VzKTtcblxuICByZXR1cm4gbm9ybWFsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlQXJlYSh2ZXJ0aWNlcykge1xuICBjb25zdCBmaXJzdFZlcnRleCA9IGZpcnN0KHZlcnRpY2VzKSxcbiAgICAgICAgc2Vjb25kVmVydGV4ID0gc2Vjb25kKHZlcnRpY2VzKSxcbiAgICAgICAgdGhpcmRWZXJ0ZXggPSB0aGlyZCh2ZXJ0aWNlcyksXG4gICAgICAgIGZpcnN0VmVydGV4UG9zaXRpb24gPSBmaXJzdFZlcnRleC5nZXRQb3NpdGlvbigpLFxuICAgICAgICBzZWNvbmRWZXJ0ZXhQb3NpdGlvbiA9IHNlY29uZFZlcnRleC5nZXRQb3NpdGlvbigpLFxuICAgICAgICB0aGlyZFZlcnRleFBvc2l0aW9uID0gdGhpcmRWZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgZmlyc3RFeHRlbnQgPSBzdWJ0cmFjdDMoc2Vjb25kVmVydGV4UG9zaXRpb24sIGZpcnN0VmVydGV4UG9zaXRpb24pLFxuICAgICAgICBzZWNvbmRFeHRlbnQgPSBzdWJ0cmFjdDModGhpcmRWZXJ0ZXhQb3NpdGlvbiwgZmlyc3RWZXJ0ZXhQb3NpdGlvbiksXG4gICAgICAgIGFyZWEgPSBsZW5ndGgzKGNyb3NzMyhmaXJzdEV4dGVudCwgc2Vjb25kRXh0ZW50KSkgLyAyO1xuXG4gIHJldHVybiBhcmVhO1xufVxuIl0sIm5hbWVzIjpbImNsb25lRWRnZXMiLCJjbG9uZU5vcm1hbCIsImNsb25lVmVydGljZXMiLCJjYWxjdWxhdGVFZGdlcyIsImNhbGN1bGF0ZU5vcm1hbCIsImNhbGN1bGF0ZUFyZWEiLCJlZGdlcyIsIm1hcCIsImVkZ2UiLCJjbG9uZSIsIm5vcm1hbCIsInZlcnRpY2VzIiwidmVydGV4IiwiRWRnZSIsImluZGV4Iiwic3RhcnRJbmRleCIsImVuZEluZGV4IiwiVkVSVElDRVNfTEVOR1RIIiwic3RhcnRWZXJ0ZXgiLCJlbmRWZXJ0ZXgiLCJmcm9tU3RhcnRWZXJ0ZXhBbmRFbmRWZXJ0ZXgiLCJOb3JtYWwiLCJmcm9tVmVydGljZXMiLCJmaXJzdFZlcnRleCIsImZpcnN0Iiwic2Vjb25kVmVydGV4Iiwic2Vjb25kIiwidGhpcmRWZXJ0ZXgiLCJ0aGlyZCIsImZpcnN0VmVydGV4UG9zaXRpb24iLCJnZXRQb3NpdGlvbiIsInNlY29uZFZlcnRleFBvc2l0aW9uIiwidGhpcmRWZXJ0ZXhQb3NpdGlvbiIsImZpcnN0RXh0ZW50Iiwic3VidHJhY3QzIiwic2Vjb25kRXh0ZW50IiwiYXJlYSIsImxlbmd0aDMiLCJjcm9zczMiXSwibWFwcGluZ3MiOiJBQUFBLENBQVk7Ozs7UUFNSUEsVUFBVSxHQUFWQSxVQUFVO1FBTVZDLFdBQVcsR0FBWEEsV0FBVztRQU1YQyxhQUFhLEdBQWJBLGFBQWE7UUFNYkMsY0FBYyxHQUFkQSxjQUFjO1FBY2RDLGVBQWUsR0FBZkEsZUFBZTtRQU1mQyxhQUFhLEdBQWJBLGFBQWE7QUExQ0csR0FBYyxDQUFkLFVBQWM7QUFDVCxHQUFvQixDQUFwQixNQUFvQjtBQUNkLEdBQWlCLENBQWpCLE9BQWlCO1NBRTVDTCxVQUFVLENBQUNNLEtBQUssRUFBRSxDQUFDO0lBQ2pDQSxLQUFLLEdBQUdBLEtBQUssQ0FBQ0MsR0FBRyxDQUFDLFFBQVEsQ0FBUEMsSUFBSTtRQUFLQSxNQUFNLENBQU5BLElBQUksQ0FBQ0MsS0FBSzs7SUFFdEMsTUFBTSxDQUFDSCxLQUFLO0FBQ2QsQ0FBQztTQUVlTCxXQUFXLENBQUNTLE1BQU0sRUFBRSxDQUFDO0lBQ25DQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ0QsS0FBSztJQUVyQixNQUFNLENBQUNDLE1BQU07QUFDZixDQUFDO1NBRWVSLGFBQWEsQ0FBQ1MsUUFBUSxFQUFFLENBQUM7SUFDdkNBLFFBQVEsR0FBR0EsUUFBUSxDQUFDSixHQUFHLENBQUMsUUFBUSxDQUFQSyxNQUFNO1FBQUtBLE1BQU0sQ0FBTkEsTUFBTSxDQUFDSCxLQUFLOztJQUVoRCxNQUFNLENBQUNFLFFBQVE7QUFDakIsQ0FBQztTQUVlUixjQUFjLENBQUNRLFFBQVEsRUFBRUUsSUFBSSxFQUFFLENBQUM7SUFDOUMsR0FBSyxDQUFDUCxLQUFLLEdBQUdLLFFBQVEsQ0FBQ0osR0FBRyxDQUFDLFFBQVEsQ0FBUEssTUFBTSxFQUFFRSxLQUFLLEVBQUssQ0FBQztRQUM3QyxHQUFLLENBQUNDLFVBQVUsR0FBR0QsS0FBSyxFQUNsQkUsUUFBUSxJQUFJRCxVQUFVLEdBQUcsQ0FBQyxJQUFJRSxVQUFlLGtCQUM3Q0MsV0FBVyxHQUFHUCxRQUFRLENBQUNJLFVBQVUsR0FDakNJLFNBQVMsR0FBR1IsUUFBUSxDQUFDSyxRQUFRLEdBQzdCUixJQUFJLEdBQUdLLElBQUksQ0FBQ08sMkJBQTJCLENBQUNGLFdBQVcsRUFBRUMsU0FBUztRQUVwRSxNQUFNLENBQUNYLElBQUk7SUFDYixDQUFDO0lBRUQsTUFBTSxDQUFDRixLQUFLO0FBQ2QsQ0FBQztTQUVlRixlQUFlLENBQUNPLFFBQVEsRUFBRVUsTUFBTSxFQUFFLENBQUM7SUFDakQsR0FBSyxDQUFDWCxNQUFNLEdBQUdXLE1BQU0sQ0FBQ0MsWUFBWSxDQUFDWCxRQUFRO0lBRTNDLE1BQU0sQ0FBQ0QsTUFBTTtBQUNmLENBQUM7U0FFZUwsYUFBYSxDQUFDTSxRQUFRLEVBQUUsQ0FBQztJQUN2QyxHQUFLLENBQUNZLFdBQVcsT0FBR0MsTUFBSyxRQUFDYixRQUFRLEdBQzVCYyxZQUFZLE9BQUdDLE1BQU0sU0FBQ2YsUUFBUSxHQUM5QmdCLFdBQVcsT0FBR0MsTUFBSyxRQUFDakIsUUFBUSxHQUM1QmtCLG1CQUFtQixHQUFHTixXQUFXLENBQUNPLFdBQVcsSUFDN0NDLG9CQUFvQixHQUFHTixZQUFZLENBQUNLLFdBQVcsSUFDL0NFLG1CQUFtQixHQUFHTCxXQUFXLENBQUNHLFdBQVcsSUFDN0NHLFdBQVcsT0FBR0MsT0FBUyxZQUFDSCxvQkFBb0IsRUFBRUYsbUJBQW1CLEdBQ2pFTSxZQUFZLE9BQUdELE9BQVMsWUFBQ0YsbUJBQW1CLEVBQUVILG1CQUFtQixHQUNqRU8sSUFBSSxPQUFHQyxPQUFPLGNBQUNDLE9BQU0sU0FBQ0wsV0FBVyxFQUFFRSxZQUFZLEtBQUssQ0FBQztJQUUzRCxNQUFNLENBQUNDLElBQUk7QUFDYixDQUFDIn0=