"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createElementBuffer = createElementBuffer;
exports.bindElementBuffer = bindElementBuffer;
exports.createBuffer = createBuffer;
exports.bindBuffer = bindBuffer;
function createElementBuffer(data) {
    var _context = this.context, ELEMENT_ARRAY_BUFFER = _context.ELEMENT_ARRAY_BUFFER, STATIC_DRAW = _context.STATIC_DRAW, target = ELEMENT_ARRAY_BUFFER, usage = STATIC_DRAW, uint16Array = new Uint16Array(data), elementBuffer = this.context.createBuffer();
    this.context.bindBuffer(target, elementBuffer);
    this.context.bufferData(target, uint16Array, usage);
    return elementBuffer;
}
function bindElementBuffer(elementBuffer) {
    var _context = this.context, ELEMENT_ARRAY_BUFFER = _context.ELEMENT_ARRAY_BUFFER, target = ELEMENT_ARRAY_BUFFER;
    this.context.bindBuffer(target, elementBuffer);
}
function createBuffer(data) {
    var _context = this.context, ARRAY_BUFFER = _context.ARRAY_BUFFER, STATIC_DRAW = _context.STATIC_DRAW, target = ARRAY_BUFFER, usage = STATIC_DRAW, buffer = this.context.createBuffer(), float32Array = new Float32Array(data);
    this.context.bindBuffer(target, buffer);
    this.context.bufferData(target, float32Array, usage);
    return buffer;
}
function bindBuffer(buffer, attributeLocation, components) {
    var _context = this.context, ARRAY_BUFFER = _context.ARRAY_BUFFER, FLOAT = _context.FLOAT, target = ARRAY_BUFFER, type = FLOAT, normalize = false, stride = 0, offset = 0;
    this.context.bindBuffer(target, buffer);
    this.context.vertexAttribPointer(attributeLocation, components, type, normalize, stride, offset);
    this.context.enableVertexAttribArray(attributeLocation);
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbi9idWZmZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbGVtZW50QnVmZmVyKGRhdGEpIHtcbiAgY29uc3QgeyBFTEVNRU5UX0FSUkFZX0JVRkZFUiwgU1RBVElDX0RSQVcgfSA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgdGFyZ2V0ID0gRUxFTUVOVF9BUlJBWV9CVUZGRVIsXG4gICAgICAgIHVzYWdlID0gU1RBVElDX0RSQVcsXG4gICAgICAgIHVpbnQxNkFycmF5ID0gbmV3IFVpbnQxNkFycmF5KGRhdGEpLFxuICAgICAgICBlbGVtZW50QnVmZmVyID0gdGhpcy5jb250ZXh0LmNyZWF0ZUJ1ZmZlcigpO1xuXG4gIHRoaXMuY29udGV4dC5iaW5kQnVmZmVyKHRhcmdldCwgZWxlbWVudEJ1ZmZlcik7XG5cbiAgdGhpcy5jb250ZXh0LmJ1ZmZlckRhdGEodGFyZ2V0LCB1aW50MTZBcnJheSwgdXNhZ2UpO1xuXG4gIHJldHVybiBlbGVtZW50QnVmZmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmluZEVsZW1lbnRCdWZmZXIoZWxlbWVudEJ1ZmZlcikge1xuICBjb25zdCB7IEVMRU1FTlRfQVJSQVlfQlVGRkVSIH0gPSB0aGlzLmNvbnRleHQsXG4gICAgICAgIHRhcmdldCA9IEVMRU1FTlRfQVJSQVlfQlVGRkVSO1xuXG4gIHRoaXMuY29udGV4dC5iaW5kQnVmZmVyKHRhcmdldCwgZWxlbWVudEJ1ZmZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCdWZmZXIoZGF0YSkge1xuICBjb25zdCB7IEFSUkFZX0JVRkZFUiwgU1RBVElDX0RSQVcgfSA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgdGFyZ2V0ID0gQVJSQVlfQlVGRkVSLFxuICAgICAgICB1c2FnZSA9IFNUQVRJQ19EUkFXLFxuICAgICAgICBidWZmZXIgPSB0aGlzLmNvbnRleHQuY3JlYXRlQnVmZmVyKCksXG4gICAgICAgIGZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoZGF0YSk7XG5cbiAgdGhpcy5jb250ZXh0LmJpbmRCdWZmZXIodGFyZ2V0LCBidWZmZXIpO1xuXG4gIHRoaXMuY29udGV4dC5idWZmZXJEYXRhKHRhcmdldCwgZmxvYXQzMkFycmF5LCB1c2FnZSk7XG5cbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJpbmRCdWZmZXIoYnVmZmVyLCBhdHRyaWJ1dGVMb2NhdGlvbiwgY29tcG9uZW50cykge1xuICBjb25zdCB7IEFSUkFZX0JVRkZFUiwgRkxPQVQgfSA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgdGFyZ2V0ID0gQVJSQVlfQlVGRkVSLFxuICAgICAgICB0eXBlID0gRkxPQVQsXG4gICAgICAgIG5vcm1hbGl6ZSA9IGZhbHNlLFxuICAgICAgICBzdHJpZGUgPSAwLFxuICAgICAgICBvZmZzZXQgPSAwO1xuXG4gIHRoaXMuY29udGV4dC5iaW5kQnVmZmVyKHRhcmdldCwgYnVmZmVyKTtcblxuICB0aGlzLmNvbnRleHQudmVydGV4QXR0cmliUG9pbnRlcihhdHRyaWJ1dGVMb2NhdGlvbiwgY29tcG9uZW50cywgdHlwZSwgbm9ybWFsaXplLCBzdHJpZGUsIG9mZnNldCk7XG5cbiAgdGhpcy5jb250ZXh0LmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGF0dHJpYnV0ZUxvY2F0aW9uKTtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQ0FBQSxVQUFZOzs7O1FBRUksbUJBQW1CLEdBQW5CLG1CQUFtQjtRQWNuQixpQkFBaUIsR0FBakIsaUJBQWlCO1FBT2pCLFlBQVksR0FBWixZQUFZO1FBY1osVUFBVSxHQUFWLFVBQVU7U0FuQ1YsbUJBQW1CLENBQUMsSUFBSTtRQUNRLFFBQVksUUFBUCxPQUFPLEVBQWxELG9CQUFvQixHQUFrQixRQUFZLENBQWxELG9CQUFvQixFQUFFLFdBQVcsR0FBSyxRQUFZLENBQTVCLFdBQVcsRUFDbkMsTUFBTSxHQUFHLG9CQUFvQixFQUM3QixLQUFLLEdBQUcsV0FBVyxFQUNuQixXQUFXLE9BQU8sV0FBVyxDQUFDLElBQUksR0FDbEMsYUFBYSxRQUFRLE9BQU8sQ0FBQyxZQUFZO1NBRTFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLGFBQWE7U0FFeEMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsV0FBVyxFQUFFLEtBQUs7V0FFM0MsYUFBYTs7U0FHTixpQkFBaUIsQ0FBQyxhQUFhO1FBQ1osUUFBWSxRQUFQLE9BQU8sRUFBckMsb0JBQW9CLEdBQUssUUFBWSxDQUFyQyxvQkFBb0IsRUFDdEIsTUFBTSxHQUFHLG9CQUFvQjtTQUU5QixPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxhQUFhOztTQUcvQixZQUFZLENBQUMsSUFBSTtRQUNPLFFBQVksUUFBUCxPQUFPLEVBQTFDLFlBQVksR0FBa0IsUUFBWSxDQUExQyxZQUFZLEVBQUUsV0FBVyxHQUFLLFFBQVksQ0FBNUIsV0FBVyxFQUMzQixNQUFNLEdBQUcsWUFBWSxFQUNyQixLQUFLLEdBQUcsV0FBVyxFQUNuQixNQUFNLFFBQVEsT0FBTyxDQUFDLFlBQVksSUFDbEMsWUFBWSxPQUFPLFlBQVksQ0FBQyxJQUFJO1NBRXJDLE9BQU8sQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLE1BQU07U0FFakMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUs7V0FFNUMsTUFBTTs7U0FHQyxVQUFVLENBQUMsTUFBTSxFQUFFLGlCQUFpQixFQUFFLFVBQVU7UUFDOUIsUUFBWSxRQUFQLE9BQU8sRUFBcEMsWUFBWSxHQUFZLFFBQVksQ0FBcEMsWUFBWSxFQUFFLEtBQUssR0FBSyxRQUFZLENBQXRCLEtBQUssRUFDckIsTUFBTSxHQUFHLFlBQVksRUFDckIsSUFBSSxHQUFHLEtBQUssRUFDWixTQUFTLEdBQUcsS0FBSyxFQUNqQixNQUFNLEdBQUcsQ0FBQyxFQUNWLE1BQU0sR0FBRyxDQUFDO1NBRVgsT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsTUFBTTtTQUVqQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU07U0FFMUYsT0FBTyxDQUFDLHVCQUF1QixDQUFDLGlCQUFpQiJ9