"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    cloneEdges: function() {
        return cloneEdges;
    },
    cloneNormal: function() {
        return cloneNormal;
    },
    cloneVertices: function() {
        return cloneVertices;
    },
    calculateEdges: function() {
        return calculateEdges;
    },
    calculateNormal: function() {
        return calculateNormal;
    },
    calculateArea: function() {
        return calculateArea;
    }
});
var _constants = require("../constants");
var _array = require("../utilities/array");
var _vector = require("../maths/vector");
function cloneEdges(edges) {
    edges = edges.map(function(edge) {
        return edge.clone();
    });
    return edges;
}
function cloneNormal(normal) {
    normal = normal.clone();
    return normal;
}
function cloneVertices(vertices) {
    vertices = vertices.map(function(vertex) {
        return vertex.clone();
    });
    return vertices;
}
function calculateEdges(vertices, Edge) {
    var edges = vertices.map(function(vertex, index) {
        var startIndex = index, endIndex = (startIndex + 1) % _constants.VERTICES_LENGTH, startVertex = vertices[startIndex], endVertex = vertices[endIndex], edge = Edge.fromStartVertexAndEndVertex(startVertex, endVertex);
        return edge;
    });
    return edges;
}
function calculateNormal(vertices, Normal) {
    var normal = Normal.fromVertices(vertices);
    return normal;
}
function calculateArea(vertices) {
    var firstVertex = (0, _array.first)(vertices), secondVertex = (0, _array.second)(vertices), thirdVertex = (0, _array.third)(vertices), firstVertexPosition = firstVertex.getPosition(), secondVertexPosition = secondVertex.getPosition(), thirdVertexPosition = thirdVertex.getPosition(), firstExtent = (0, _vector.subtract3)(secondVertexPosition, firstVertexPosition), secondExtent = (0, _vector.subtract3)(thirdVertexPosition, firstVertexPosition), area = (0, _vector.length3)((0, _vector.cross3)(firstExtent, secondExtent)) / 2;
    return area;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZmFjZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IFZFUlRJQ0VTX0xFTkdUSCB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IGZpcnN0LCBzZWNvbmQsIHRoaXJkIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hcnJheVwiO1xuaW1wb3J0IHsgc3VidHJhY3QzLCBjcm9zczMsIGxlbmd0aDMgfSBmcm9tIFwiLi4vbWF0aHMvdmVjdG9yXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZUVkZ2VzKGVkZ2VzKSB7XG4gIGVkZ2VzID0gZWRnZXMubWFwKChlZGdlKSA9PiBlZGdlLmNsb25lKCkpO1xuXG4gIHJldHVybiBlZGdlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lTm9ybWFsKG5vcm1hbCkge1xuICBub3JtYWwgPSBub3JtYWwuY2xvbmUoKTtcbiAgXG4gIHJldHVybiBub3JtYWw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZVZlcnRpY2VzKHZlcnRpY2VzKSB7XG4gIHZlcnRpY2VzID0gdmVydGljZXMubWFwKCh2ZXJ0ZXgpID0+IHZlcnRleC5jbG9uZSgpKTtcblxuICByZXR1cm4gdmVydGljZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVFZGdlcyh2ZXJ0aWNlcywgRWRnZSkge1xuICBjb25zdCBlZGdlcyA9IHZlcnRpY2VzLm1hcCgodmVydGV4LCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBpbmRleCwgLy8vXG4gICAgICAgICAgZW5kSW5kZXggPSAoc3RhcnRJbmRleCArIDEpICUgVkVSVElDRVNfTEVOR1RILFxuICAgICAgICAgIHN0YXJ0VmVydGV4ID0gdmVydGljZXNbc3RhcnRJbmRleF0sXG4gICAgICAgICAgZW5kVmVydGV4ID0gdmVydGljZXNbZW5kSW5kZXhdLFxuICAgICAgICAgIGVkZ2UgPSBFZGdlLmZyb21TdGFydFZlcnRleEFuZEVuZFZlcnRleChzdGFydFZlcnRleCwgZW5kVmVydGV4KTtcblxuICAgIHJldHVybiBlZGdlO1xuICB9KTtcblxuICByZXR1cm4gZWRnZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVOb3JtYWwodmVydGljZXMsIE5vcm1hbCkge1xuICBjb25zdCBub3JtYWwgPSBOb3JtYWwuZnJvbVZlcnRpY2VzKHZlcnRpY2VzKTtcblxuICByZXR1cm4gbm9ybWFsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlQXJlYSh2ZXJ0aWNlcykge1xuICBjb25zdCBmaXJzdFZlcnRleCA9IGZpcnN0KHZlcnRpY2VzKSxcbiAgICAgICAgc2Vjb25kVmVydGV4ID0gc2Vjb25kKHZlcnRpY2VzKSxcbiAgICAgICAgdGhpcmRWZXJ0ZXggPSB0aGlyZCh2ZXJ0aWNlcyksXG4gICAgICAgIGZpcnN0VmVydGV4UG9zaXRpb24gPSBmaXJzdFZlcnRleC5nZXRQb3NpdGlvbigpLFxuICAgICAgICBzZWNvbmRWZXJ0ZXhQb3NpdGlvbiA9IHNlY29uZFZlcnRleC5nZXRQb3NpdGlvbigpLFxuICAgICAgICB0aGlyZFZlcnRleFBvc2l0aW9uID0gdGhpcmRWZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgZmlyc3RFeHRlbnQgPSBzdWJ0cmFjdDMoc2Vjb25kVmVydGV4UG9zaXRpb24sIGZpcnN0VmVydGV4UG9zaXRpb24pLFxuICAgICAgICBzZWNvbmRFeHRlbnQgPSBzdWJ0cmFjdDModGhpcmRWZXJ0ZXhQb3NpdGlvbiwgZmlyc3RWZXJ0ZXhQb3NpdGlvbiksXG4gICAgICAgIGFyZWEgPSBsZW5ndGgzKGNyb3NzMyhmaXJzdEV4dGVudCwgc2Vjb25kRXh0ZW50KSkgLyAyO1xuXG4gIHJldHVybiBhcmVhO1xufVxuIl0sIm5hbWVzIjpbImNsb25lRWRnZXMiLCJjbG9uZU5vcm1hbCIsImNsb25lVmVydGljZXMiLCJjYWxjdWxhdGVFZGdlcyIsImNhbGN1bGF0ZU5vcm1hbCIsImNhbGN1bGF0ZUFyZWEiLCJlZGdlcyIsIm1hcCIsImVkZ2UiLCJjbG9uZSIsIm5vcm1hbCIsInZlcnRpY2VzIiwidmVydGV4IiwiRWRnZSIsImluZGV4Iiwic3RhcnRJbmRleCIsImVuZEluZGV4IiwiVkVSVElDRVNfTEVOR1RIIiwic3RhcnRWZXJ0ZXgiLCJlbmRWZXJ0ZXgiLCJmcm9tU3RhcnRWZXJ0ZXhBbmRFbmRWZXJ0ZXgiLCJOb3JtYWwiLCJmcm9tVmVydGljZXMiLCJmaXJzdFZlcnRleCIsImZpcnN0Iiwic2Vjb25kVmVydGV4Iiwic2Vjb25kIiwidGhpcmRWZXJ0ZXgiLCJ0aGlyZCIsImZpcnN0VmVydGV4UG9zaXRpb24iLCJnZXRQb3NpdGlvbiIsInNlY29uZFZlcnRleFBvc2l0aW9uIiwidGhpcmRWZXJ0ZXhQb3NpdGlvbiIsImZpcnN0RXh0ZW50Iiwic3VidHJhY3QzIiwic2Vjb25kRXh0ZW50IiwiYXJlYSIsImxlbmd0aDMiLCJjcm9zczMiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7Ozs7Ozs7Ozs7SUFNR0EsVUFBVTtlQUFWQSxVQUFVOztJQU1WQyxXQUFXO2VBQVhBLFdBQVc7O0lBTVhDLGFBQWE7ZUFBYkEsYUFBYTs7SUFNYkMsY0FBYztlQUFkQSxjQUFjOztJQWNkQyxlQUFlO2VBQWZBLGVBQWU7O0lBTWZDLGFBQWE7ZUFBYkEsYUFBYTs7O3lCQTFDRyxjQUFjO3FCQUNULG9CQUFvQjtzQkFDZCxpQkFBaUI7QUFFckQsU0FBU0wsVUFBVSxDQUFDTSxLQUFLLEVBQUU7SUFDaENBLEtBQUssR0FBR0EsS0FBSyxDQUFDQyxHQUFHLENBQUMsU0FBQ0MsSUFBSTtlQUFLQSxJQUFJLENBQUNDLEtBQUssRUFBRTtLQUFBLENBQUMsQ0FBQztJQUUxQyxPQUFPSCxLQUFLLENBQUM7Q0FDZDtBQUVNLFNBQVNMLFdBQVcsQ0FBQ1MsTUFBTSxFQUFFO0lBQ2xDQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ0QsS0FBSyxFQUFFLENBQUM7SUFFeEIsT0FBT0MsTUFBTSxDQUFDO0NBQ2Y7QUFFTSxTQUFTUixhQUFhLENBQUNTLFFBQVEsRUFBRTtJQUN0Q0EsUUFBUSxHQUFHQSxRQUFRLENBQUNKLEdBQUcsQ0FBQyxTQUFDSyxNQUFNO2VBQUtBLE1BQU0sQ0FBQ0gsS0FBSyxFQUFFO0tBQUEsQ0FBQyxDQUFDO0lBRXBELE9BQU9FLFFBQVEsQ0FBQztDQUNqQjtBQUVNLFNBQVNSLGNBQWMsQ0FBQ1EsUUFBUSxFQUFFRSxJQUFJLEVBQUU7SUFDN0MsSUFBTVAsS0FBSyxHQUFHSyxRQUFRLENBQUNKLEdBQUcsQ0FBQyxTQUFDSyxNQUFNLEVBQUVFLEtBQUssRUFBSztRQUM1QyxJQUFNQyxVQUFVLEdBQUdELEtBQUssRUFDbEJFLFFBQVEsR0FBRyxDQUFDRCxVQUFVLEdBQUcsQ0FBQyxDQUFDLEdBQUdFLFVBQWUsZ0JBQUEsRUFDN0NDLFdBQVcsR0FBR1AsUUFBUSxDQUFDSSxVQUFVLENBQUMsRUFDbENJLFNBQVMsR0FBR1IsUUFBUSxDQUFDSyxRQUFRLENBQUMsRUFDOUJSLElBQUksR0FBR0ssSUFBSSxDQUFDTywyQkFBMkIsQ0FBQ0YsV0FBVyxFQUFFQyxTQUFTLENBQUMsQUFBQztRQUV0RSxPQUFPWCxJQUFJLENBQUM7S0FDYixDQUFDLEFBQUM7SUFFSCxPQUFPRixLQUFLLENBQUM7Q0FDZDtBQUVNLFNBQVNGLGVBQWUsQ0FBQ08sUUFBUSxFQUFFVSxNQUFNLEVBQUU7SUFDaEQsSUFBTVgsTUFBTSxHQUFHVyxNQUFNLENBQUNDLFlBQVksQ0FBQ1gsUUFBUSxDQUFDLEFBQUM7SUFFN0MsT0FBT0QsTUFBTSxDQUFDO0NBQ2Y7QUFFTSxTQUFTTCxhQUFhLENBQUNNLFFBQVEsRUFBRTtJQUN0QyxJQUFNWSxXQUFXLEdBQUdDLElBQUFBLE1BQUssTUFBQSxFQUFDYixRQUFRLENBQUMsRUFDN0JjLFlBQVksR0FBR0MsSUFBQUEsTUFBTSxPQUFBLEVBQUNmLFFBQVEsQ0FBQyxFQUMvQmdCLFdBQVcsR0FBR0MsSUFBQUEsTUFBSyxNQUFBLEVBQUNqQixRQUFRLENBQUMsRUFDN0JrQixtQkFBbUIsR0FBR04sV0FBVyxDQUFDTyxXQUFXLEVBQUUsRUFDL0NDLG9CQUFvQixHQUFHTixZQUFZLENBQUNLLFdBQVcsRUFBRSxFQUNqREUsbUJBQW1CLEdBQUdMLFdBQVcsQ0FBQ0csV0FBVyxFQUFFLEVBQy9DRyxXQUFXLEdBQUdDLElBQUFBLE9BQVMsVUFBQSxFQUFDSCxvQkFBb0IsRUFBRUYsbUJBQW1CLENBQUMsRUFDbEVNLFlBQVksR0FBR0QsSUFBQUEsT0FBUyxVQUFBLEVBQUNGLG1CQUFtQixFQUFFSCxtQkFBbUIsQ0FBQyxFQUNsRU8sSUFBSSxHQUFHQyxJQUFBQSxPQUFPLFFBQUEsRUFBQ0MsSUFBQUEsT0FBTSxPQUFBLEVBQUNMLFdBQVcsRUFBRUUsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLEFBQUM7SUFFNUQsT0FBT0MsSUFBSSxDQUFDO0NBQ2IifQ==