"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rotateImaginaryQuaternion = rotateImaginaryQuaternion;
exports.calculateInverseRotationQuaternion = calculateInverseRotationQuaternion;
exports.calculateForwardsRotationQuaternion = calculateForwardsRotationQuaternion;
exports.calculateBackwardsRotationQuaternion = calculateBackwardsRotationQuaternion;
exports.calculateArbitraryRotationQuaternion = calculateArbitraryRotationQuaternion;
exports.calculateRotationAboutZAxisQuaternion = calculateRotationAboutZAxisQuaternion;
var _vector = require("../maths/vector");
var _approximate = require("../utilities/approximate");
var _array = require("../utilities/array");
var _angle = require("../utilities/angle");
function rotateImaginaryQuaternion(imaginaryQuaternion, rotationQuaternion, inverseRotationQuaternion) {
    return hamiltonProduct(hamiltonProduct(rotationQuaternion, imaginaryQuaternion), inverseRotationQuaternion);
}
function calculateInverseRotationQuaternion(rotationQuaternion) {
    var rotationQuaternionComponents = rotationQuaternion, firstRotationQuaternionComponent = (0, _array).first(rotationQuaternionComponents), secondRotationQuaternionComponent = (0, _array).second(rotationQuaternionComponents), thirdRotationQuaternionComponent = (0, _array).third(rotationQuaternionComponents), fourthRotationQuaternionComponent = (0, _array).fourth(rotationQuaternionComponents), inverseRotationQuaternion = [
        firstRotationQuaternionComponent,
        -secondRotationQuaternionComponent,
        -thirdRotationQuaternionComponent,
        -fourthRotationQuaternionComponent
    ];
    return inverseRotationQuaternion;
}
function calculateForwardsRotationQuaternion(rotationQuaternion) {
    var forwardsRotationQuaternion = rotationQuaternion; ///
    return forwardsRotationQuaternion;
}
function calculateBackwardsRotationQuaternion(rotationQuaternion) {
    var inverseRotationQuaternion = calculateInverseRotationQuaternion(rotationQuaternion), backwardsRotationQuaternion = inverseRotationQuaternion; ///
    return backwardsRotationQuaternion;
}
function calculateArbitraryRotationQuaternion(normal) {
    var extent = normal.getExtent(), unitNormal = extent, zAxis = [
        0,
        0,
        1
    ], dotProductOfUnitNormalAndZAxis = (0, _vector).dot3(unitNormal, zAxis), crossProductOfUnitNormalAndZAxis = (0, _vector).cross3(unitNormal, zAxis), angleOfRotationCosine = dotProductOfUnitNormalAndZAxis, angleOfRotationCosineAbsoluteValue = Math.abs(angleOfRotationCosine), angleOfRotationCosineAbsoluteValueApproximatelyEqualToOne = (0, _approximate).isApproximatelyEqualToOne(angleOfRotationCosineAbsoluteValue), axisOfRotation = angleOfRotationCosineAbsoluteValueApproximatelyEqualToOne ? [
        1,
        0,
        0
    ] : crossProductOfUnitNormalAndZAxis, unitAxisOfRotation = (0, _vector).normalise3(axisOfRotation), halfAngleOfRotationCosine = (0, _angle).calculateHalfAngleCosine(angleOfRotationCosine), halfAngleOfRotationSine = (0, _angle).calculateHalfAngleSine(angleOfRotationCosine), unitAxisOfRotationComponents = unitAxisOfRotation, firstAxisOfRotationComponent = (0, _array).first(unitAxisOfRotationComponents), secondAxisOfRotationComponent = (0, _array).second(unitAxisOfRotationComponents), thirdAxisOfRotationComponent = (0, _array).third(unitAxisOfRotationComponents), arbitraryRotationQuaternion = [
        halfAngleOfRotationCosine,
        firstAxisOfRotationComponent * halfAngleOfRotationSine,
        secondAxisOfRotationComponent * halfAngleOfRotationSine,
        thirdAxisOfRotationComponent * halfAngleOfRotationSine
    ];
    return arbitraryRotationQuaternion;
}
function calculateRotationAboutZAxisQuaternion(maskingEdge) {
    var maskingEdgeExtent = maskingEdge.getExtent(), unitMaskingEdgeExtent = (0, _vector).normalise3(maskingEdgeExtent), unitMaskingEdgeExtentComponents = unitMaskingEdgeExtent, firstUnitMaskingEdgeExtentComponent = (0, _array).first(unitMaskingEdgeExtentComponents), secondUnitMaskingEdgeExtentComponent = (0, _array).second(unitMaskingEdgeExtentComponents), angleOfRotationSine = firstUnitMaskingEdgeExtentComponent, angleOfRotationCosine = secondUnitMaskingEdgeExtentComponent, halfAngleOfRotationCosine = (0, _angle).calculateHalfAngleCosine(angleOfRotationCosine), halfAngleOfRotationSine = angleOfRotationSine > 0 ? +(0, _angle).calculateHalfAngleSine(angleOfRotationCosine) : -(0, _angle).calculateHalfAngleSine(angleOfRotationCosine), rotationAboutZAxisQuaternion = [
        halfAngleOfRotationCosine,
        0,
        0,
        halfAngleOfRotationSine
    ];
    return rotationAboutZAxisQuaternion;
}
function hamiltonProduct(quaternionA, quaternionB) {
    var a1 = quaternionA[0], b1 = quaternionA[1], c1 = quaternionA[2], d1 = quaternionA[3], a2 = quaternionB[0], b2 = quaternionB[1], c2 = quaternionB[2], d2 = quaternionB[3], a = a1 * a2 - b1 * b2 - c1 * c2 - d1 * d2, b = a1 * b2 + b1 * a2 + c1 * d2 - d1 * c2, c = a1 * c2 - b1 * d2 + c1 * a2 + d1 * b2, d = a1 * d2 + b1 * c2 - c1 * b2 + d1 * a2, quaternion = [
        a,
        b,
        c,
        d
    ];
    return quaternion;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,