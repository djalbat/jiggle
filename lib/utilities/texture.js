"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    calculateAdjustedTextureCoordinateTuples: function() {
        return calculateAdjustedTextureCoordinateTuples;
    },
    calculateMappedTextureCoordinateTuples: function() {
        return calculateMappedTextureCoordinateTuples;
    },
    cloneTextureCoordinateTuples: function() {
        return cloneTextureCoordinateTuples;
    }
});
var _vertices = require("../utilities/vertices");
var _matrix = require("../maths/matrix");
var _array = require("../utilities/array");
var _quaternion = require("../utilities/quaternion");
var _vector = require("../maths/vector");
function cloneTextureCoordinateTuples(textureCoordinateTuples) {
    textureCoordinateTuples = textureCoordinateTuples.map(function(textureCoordinateTuple) {
        textureCoordinateTuple = textureCoordinateTuple.slice(); ///
        return textureCoordinateTuple;
    });
    return textureCoordinateTuples;
}
function calculateMappedTextureCoordinateTuples(textureCoordinateTuples, extent) {
    var left = extent.left, bottom = extent.bottom, width = extent.width, height = extent.height, mappedTextureCoordinateTuples = textureCoordinateTuples.map(function(textureCoordinateTuple) {
        var mappedTextureCoordinateTuple = (0, _vector.add2)((0, _vector.multiply2)(textureCoordinateTuple, [
            width,
            height
        ]), [
            left,
            bottom
        ]);
        return mappedTextureCoordinateTuple;
    });
    return mappedTextureCoordinateTuples;
}
function calculateAdjustedTextureCoordinateTuples(vertices, normal, parentVertices, textureCoordinateTuples) {
    var arbitraryRotationQuaternion = (0, _quaternion.calculateArbitraryRotationQuaternion)(normal), rotationQuaternion = arbitraryRotationQuaternion; ///
    var rotatedVertices = (0, _vertices.rotateVertices)(vertices, rotationQuaternion);
    parentVertices = (0, _vertices.rotateVertices)(parentVertices, rotationQuaternion);
    vertices = rotatedVertices; ///
    var firstVertex = (0, _array.first)(vertices), secondVertex = (0, _array.second)(vertices), thirdVertex = (0, _array.third)(vertices), firstParentVertex = (0, _array.first)(parentVertices), secondParentVertex = (0, _array.second)(parentVertices), thirdParentVertex = (0, _array.third)(parentVertices), firstTextureCoordinateTuple = (0, _array.first)(textureCoordinateTuples), secondTextureCoordinateTuple = (0, _array.second)(textureCoordinateTuples), thirdTextureCoordinateTuple = (0, _array.third)(textureCoordinateTuples), firstVertexPosition = firstVertex.getPosition(), secondVertexPosition = secondVertex.getPosition(), thirdVertexPosition = thirdVertex.getPosition(), firstParentVertexPosition = firstParentVertex.getPosition(), secondParentVertexPosition = secondParentVertex.getPosition(), thirdParentVertexPosition = thirdParentVertex.getPosition(), R1x = firstVertexPosition[0], R1y = firstVertexPosition[1], R2x = secondVertexPosition[0], R2y = secondVertexPosition[1], R3x = thirdVertexPosition[0], R3y = thirdVertexPosition[1], P1x = firstParentVertexPosition[0], P2x = secondParentVertexPosition[0], P3x = thirdParentVertexPosition[0], P1y = firstParentVertexPosition[1], P2y = secondParentVertexPosition[1], P3y = thirdParentVertexPosition[1], P1u = firstTextureCoordinateTuple[0], P1v = firstTextureCoordinateTuple[1], P2u = secondTextureCoordinateTuple[0], P2v = secondTextureCoordinateTuple[1], P3u = thirdTextureCoordinateTuple[0], P3v = thirdTextureCoordinateTuple[1], textureCoordinatesMatrix = (0, _matrix.invert3)([
        1,
        1,
        1,
        P1u,
        P2u,
        P3u,
        P1v,
        P2v,
        P3v
    ]), firstTransformedParentVerticesComponent = (0, _vector.transform3)([
        P1x,
        P2x,
        P3x
    ], textureCoordinatesMatrix), secondTransformedParentVerticesComponent = (0, _vector.transform3)([
        P1y,
        P2y,
        P3y
    ], textureCoordinatesMatrix), Ox = firstTransformedParentVerticesComponent[0], Ux = firstTransformedParentVerticesComponent[1], Vx = firstTransformedParentVerticesComponent[2], Oy = secondTransformedParentVerticesComponent[0], Uy = secondTransformedParentVerticesComponent[1], Vy = secondTransformedParentVerticesComponent[2], transformedParentVerticesMatrix = (0, _matrix.invert2)([
        Ux,
        Uy,
        Vx,
        Vy
    ]), firstAdjustedTextureCoordinate = (0, _vector.transform2)([
        R1x - Ox,
        R1y - Oy
    ], transformedParentVerticesMatrix), secondAdjustedTextureCoordinate = (0, _vector.transform2)([
        R2x - Ox,
        R2y - Oy
    ], transformedParentVerticesMatrix), thirdAdjustedTextureCoordinate = (0, _vector.transform2)([
        R3x - Ox,
        R3y - Oy
    ], transformedParentVerticesMatrix), adjustedTextureCoordinateTuple = [
        firstAdjustedTextureCoordinate,
        secondAdjustedTextureCoordinate,
        thirdAdjustedTextureCoordinate
    ];
    return adjustedTextureCoordinateTuple;
}

//# sourceMappingURL=data:application/json;base64,