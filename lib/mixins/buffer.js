"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
function createElementBuffer(data) {
    var _context = this.context, ELEMENT_ARRAY_BUFFER = _context.ELEMENT_ARRAY_BUFFER, STATIC_DRAW = _context.STATIC_DRAW, target = ELEMENT_ARRAY_BUFFER, usage = STATIC_DRAW, uint16Array = new Uint16Array(data), elementBuffer = this.context.createBuffer();
    this.context.bindBuffer(target, elementBuffer);
    this.context.bufferData(target, uint16Array, usage);
    return elementBuffer;
}
function bindElementBuffer(elementBuffer) {
    var _context = this.context, ELEMENT_ARRAY_BUFFER = _context.ELEMENT_ARRAY_BUFFER, target = ELEMENT_ARRAY_BUFFER;
    this.context.bindBuffer(target, elementBuffer);
}
function createBuffer(data) {
    var _context = this.context, ARRAY_BUFFER = _context.ARRAY_BUFFER, STATIC_DRAW = _context.STATIC_DRAW, target = ARRAY_BUFFER, usage = STATIC_DRAW, buffer = this.context.createBuffer(), float32Array = new Float32Array(data);
    this.context.bindBuffer(target, buffer);
    this.context.bufferData(target, float32Array, usage);
    return buffer;
}
function bindBuffer(buffer, attributeLocation, components) {
    var _context = this.context, ARRAY_BUFFER = _context.ARRAY_BUFFER, FLOAT = _context.FLOAT, target = ARRAY_BUFFER, type = FLOAT, normalize = false, stride = 0, offset = 0;
    this.context.bindBuffer(target, buffer);
    this.context.vertexAttribPointer(attributeLocation, components, type, normalize, stride, offset);
    this.context.enableVertexAttribArray(attributeLocation);
}
var bufferMixins = {
    createElementBuffer: createElementBuffer,
    bindElementBuffer: bindElementBuffer,
    createBuffer: createBuffer,
    bindBuffer: bindBuffer
};
var _default = bufferMixins;
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvYnVmZmVyLmpzIl0sIm5hbWVzIjpbImNyZWF0ZUVsZW1lbnRCdWZmZXIiLCJkYXRhIiwiRUxFTUVOVF9BUlJBWV9CVUZGRVIiLCJTVEFUSUNfRFJBVyIsImNvbnRleHQiLCJ0YXJnZXQiLCJ1c2FnZSIsInVpbnQxNkFycmF5IiwiVWludDE2QXJyYXkiLCJlbGVtZW50QnVmZmVyIiwiY3JlYXRlQnVmZmVyIiwiYmluZEJ1ZmZlciIsImJ1ZmZlckRhdGEiLCJiaW5kRWxlbWVudEJ1ZmZlciIsIkFSUkFZX0JVRkZFUiIsImJ1ZmZlciIsImZsb2F0MzJBcnJheSIsIkZsb2F0MzJBcnJheSIsImF0dHJpYnV0ZUxvY2F0aW9uIiwiY29tcG9uZW50cyIsIkZMT0FUIiwidHlwZSIsIm5vcm1hbGl6ZSIsInN0cmlkZSIsIm9mZnNldCIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsImJ1ZmZlck1peGlucyJdLCJtYXBwaW5ncyI6IkNBQUEsVUFBWTs7Ozs7U0FFSCxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNsQyxHQUFLLENBQXlDLFFBQVksR0FBWixJQUFJLENBQUMsT0FBTyxFQUFsRCxvQkFBb0IsR0FBa0IsUUFBWSxDQUFsRCxvQkFBb0IsRUFBRSxXQUFXLEdBQUssUUFBWSxDQUE1QixXQUFXLEVBQ25DLE1BQU0sR0FBRyxvQkFBb0IsRUFDN0IsS0FBSyxHQUFHLFdBQVcsRUFDbkIsV0FBVyxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxHQUNsQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZO0lBRS9DLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxhQUFhO0lBRTdDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUUsS0FBSztJQUVsRCxNQUFNLENBQUMsYUFBYTtBQUN0QixDQUFDO1NBRVEsaUJBQWlCLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDekMsR0FBSyxDQUE0QixRQUFZLEdBQVosSUFBSSxDQUFDLE9BQU8sRUFBckMsb0JBQW9CLEdBQUssUUFBWSxDQUFyQyxvQkFBb0IsRUFDdEIsTUFBTSxHQUFHLG9CQUFvQjtJQUVuQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsYUFBYTtBQUMvQyxDQUFDO1NBRVEsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzNCLEdBQUssQ0FBaUMsUUFBWSxHQUFaLElBQUksQ0FBQyxPQUFPLEVBQTFDLFlBQVksR0FBa0IsUUFBWSxDQUExQyxZQUFZLEVBQUUsV0FBVyxHQUFLLFFBQVksQ0FBNUIsV0FBVyxFQUMzQixNQUFNLEdBQUcsWUFBWSxFQUNyQixLQUFLLEdBQUcsV0FBVyxFQUNuQixNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLElBQ2xDLFlBQVksR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUk7SUFFMUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLE1BQU07SUFFdEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLFlBQVksRUFBRSxLQUFLO0lBRW5ELE1BQU0sQ0FBQyxNQUFNO0FBQ2YsQ0FBQztTQUVRLFVBQVUsQ0FBQyxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLENBQUM7SUFDMUQsR0FBSyxDQUEyQixRQUFZLEdBQVosSUFBSSxDQUFDLE9BQU8sRUFBcEMsWUFBWSxHQUFZLFFBQVksQ0FBcEMsWUFBWSxFQUFFLEtBQUssR0FBSyxRQUFZLENBQXRCLEtBQUssRUFDckIsTUFBTSxHQUFHLFlBQVksRUFDckIsSUFBSSxHQUFHLEtBQUssRUFDWixTQUFTLEdBQUcsS0FBSyxFQUNqQixNQUFNLEdBQUcsQ0FBQyxFQUNWLE1BQU0sR0FBRyxDQUFDO0lBRWhCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxNQUFNO0lBRXRDLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU07SUFFL0YsSUFBSSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxpQkFBaUI7QUFDeEQsQ0FBQztBQUVELEdBQUssQ0FBQyxZQUFZLEdBQUcsQ0FBQztJQUNwQixtQkFBbUIsRUFBbkIsbUJBQW1CO0lBQ25CLGlCQUFpQixFQUFqQixpQkFBaUI7SUFDakIsWUFBWSxFQUFaLFlBQVk7SUFDWixVQUFVLEVBQVYsVUFBVTtBQUNaLENBQUM7ZUFFYyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRCdWZmZXIoZGF0YSkge1xuICBjb25zdCB7IEVMRU1FTlRfQVJSQVlfQlVGRkVSLCBTVEFUSUNfRFJBVyB9ID0gdGhpcy5jb250ZXh0LFxuICAgICAgICB0YXJnZXQgPSBFTEVNRU5UX0FSUkFZX0JVRkZFUixcbiAgICAgICAgdXNhZ2UgPSBTVEFUSUNfRFJBVyxcbiAgICAgICAgdWludDE2QXJyYXkgPSBuZXcgVWludDE2QXJyYXkoZGF0YSksXG4gICAgICAgIGVsZW1lbnRCdWZmZXIgPSB0aGlzLmNvbnRleHQuY3JlYXRlQnVmZmVyKCk7XG5cbiAgdGhpcy5jb250ZXh0LmJpbmRCdWZmZXIodGFyZ2V0LCBlbGVtZW50QnVmZmVyKTtcblxuICB0aGlzLmNvbnRleHQuYnVmZmVyRGF0YSh0YXJnZXQsIHVpbnQxNkFycmF5LCB1c2FnZSk7XG5cbiAgcmV0dXJuIGVsZW1lbnRCdWZmZXI7XG59XG5cbmZ1bmN0aW9uIGJpbmRFbGVtZW50QnVmZmVyKGVsZW1lbnRCdWZmZXIpIHtcbiAgY29uc3QgeyBFTEVNRU5UX0FSUkFZX0JVRkZFUiB9ID0gdGhpcy5jb250ZXh0LFxuICAgICAgICB0YXJnZXQgPSBFTEVNRU5UX0FSUkFZX0JVRkZFUjtcblxuICB0aGlzLmNvbnRleHQuYmluZEJ1ZmZlcih0YXJnZXQsIGVsZW1lbnRCdWZmZXIpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIoZGF0YSkge1xuICBjb25zdCB7IEFSUkFZX0JVRkZFUiwgU1RBVElDX0RSQVcgfSA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgdGFyZ2V0ID0gQVJSQVlfQlVGRkVSLFxuICAgICAgICB1c2FnZSA9IFNUQVRJQ19EUkFXLFxuICAgICAgICBidWZmZXIgPSB0aGlzLmNvbnRleHQuY3JlYXRlQnVmZmVyKCksXG4gICAgICAgIGZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoZGF0YSk7XG5cbiAgdGhpcy5jb250ZXh0LmJpbmRCdWZmZXIodGFyZ2V0LCBidWZmZXIpO1xuXG4gIHRoaXMuY29udGV4dC5idWZmZXJEYXRhKHRhcmdldCwgZmxvYXQzMkFycmF5LCB1c2FnZSk7XG5cbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cblxuZnVuY3Rpb24gYmluZEJ1ZmZlcihidWZmZXIsIGF0dHJpYnV0ZUxvY2F0aW9uLCBjb21wb25lbnRzKSB7XG4gIGNvbnN0IHsgQVJSQVlfQlVGRkVSLCBGTE9BVCB9ID0gdGhpcy5jb250ZXh0LFxuICAgICAgICB0YXJnZXQgPSBBUlJBWV9CVUZGRVIsXG4gICAgICAgIHR5cGUgPSBGTE9BVCxcbiAgICAgICAgbm9ybWFsaXplID0gZmFsc2UsXG4gICAgICAgIHN0cmlkZSA9IDAsXG4gICAgICAgIG9mZnNldCA9IDA7XG5cbiAgdGhpcy5jb250ZXh0LmJpbmRCdWZmZXIodGFyZ2V0LCBidWZmZXIpO1xuXG4gIHRoaXMuY29udGV4dC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGF0dHJpYnV0ZUxvY2F0aW9uLCBjb21wb25lbnRzLCB0eXBlLCBub3JtYWxpemUsIHN0cmlkZSwgb2Zmc2V0KTtcblxuICB0aGlzLmNvbnRleHQuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoYXR0cmlidXRlTG9jYXRpb24pO1xufVxuXG5jb25zdCBidWZmZXJNaXhpbnMgPSB7XG4gIGNyZWF0ZUVsZW1lbnRCdWZmZXIsXG4gIGJpbmRFbGVtZW50QnVmZmVyLFxuICBjcmVhdGVCdWZmZXIsXG4gIGJpbmRCdWZmZXJcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGJ1ZmZlck1peGlucztcbiJdfQ==