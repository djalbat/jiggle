"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.cloneEdges = cloneEdges;
exports.cloneNormal = cloneNormal;
exports.cloneVertices = cloneVertices;
exports.calculateEdges = calculateEdges;
exports.calculateNormal = calculateNormal;
exports.calculateArea = calculateArea;
var _constants = require("../constants");
var _array = require("../utilities/array");
var _vector = require("../maths/vector");
function cloneEdges(edges) {
    edges = edges.map(function(edge) {
        return edge.clone();
    });
    return edges;
}
function cloneNormal(normal) {
    normal = normal.clone();
    return normal;
}
function cloneVertices(vertices) {
    vertices = vertices.map(function(vertex) {
        return vertex.clone();
    });
    return vertices;
}
function calculateEdges(vertices, Edge) {
    var edges = vertices.map(function(vertex, index) {
        var startIndex = index, endIndex = (startIndex + 1) % _constants.VERTICES_LENGTH, startVertex = vertices[startIndex], endVertex = vertices[endIndex], edge = Edge.fromStartVertexAndEndVertex(startVertex, endVertex);
        return edge;
    });
    return edges;
}
function calculateNormal(vertices, Normal) {
    var normal = Normal.fromVertices(vertices);
    return normal;
}
function calculateArea(vertices) {
    var firstVertex = (0, _array).first(vertices), secondVertex = (0, _array).second(vertices), thirdVertex = (0, _array).third(vertices), firstVertexPosition = firstVertex.getPosition(), secondVertexPosition = secondVertex.getPosition(), thirdVertexPosition = thirdVertex.getPosition(), firstExtent = (0, _vector).subtract3(secondVertexPosition, firstVertexPosition), secondExtent = (0, _vector).subtract3(thirdVertexPosition, firstVertexPosition), area = (0, _vector).length3((0, _vector).cross3(firstExtent, secondExtent)) / 2;
    return area;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZmFjZXQuanMiXSwibmFtZXMiOlsiVkVSVElDRVNfTEVOR1RIIiwiZmlyc3QiLCJzZWNvbmQiLCJ0aGlyZCIsInN1YnRyYWN0MyIsImNyb3NzMyIsImxlbmd0aDMiLCJjbG9uZUVkZ2VzIiwiZWRnZXMiLCJtYXAiLCJlZGdlIiwiY2xvbmUiLCJjbG9uZU5vcm1hbCIsIm5vcm1hbCIsImNsb25lVmVydGljZXMiLCJ2ZXJ0aWNlcyIsInZlcnRleCIsImNhbGN1bGF0ZUVkZ2VzIiwiRWRnZSIsImluZGV4Iiwic3RhcnRJbmRleCIsImVuZEluZGV4Iiwic3RhcnRWZXJ0ZXgiLCJlbmRWZXJ0ZXgiLCJmcm9tU3RhcnRWZXJ0ZXhBbmRFbmRWZXJ0ZXgiLCJjYWxjdWxhdGVOb3JtYWwiLCJOb3JtYWwiLCJmcm9tVmVydGljZXMiLCJjYWxjdWxhdGVBcmVhIiwiZmlyc3RWZXJ0ZXgiLCJzZWNvbmRWZXJ0ZXgiLCJ0aGlyZFZlcnRleCIsImZpcnN0VmVydGV4UG9zaXRpb24iLCJnZXRQb3NpdGlvbiIsInNlY29uZFZlcnRleFBvc2l0aW9uIiwidGhpcmRWZXJ0ZXhQb3NpdGlvbiIsImZpcnN0RXh0ZW50Iiwic2Vjb25kRXh0ZW50IiwiYXJlYSJdLCJtYXBwaW5ncyI6IkFBQUEsQ0FBWTs7OztRQU1JLFVBQVUsR0FBVixVQUFVO1FBTVYsV0FBVyxHQUFYLFdBQVc7UUFNWCxhQUFhLEdBQWIsYUFBYTtRQU1iLGNBQWMsR0FBZCxjQUFjO1FBY2QsZUFBZSxHQUFmLGVBQWU7UUFNZixhQUFhLEdBQWIsYUFBYTtBQTFDRyxHQUFjLENBQWQsVUFBYztBQUNULEdBQW9CLENBQXBCLE1BQW9CO0FBQ2QsR0FBaUIsQ0FBakIsT0FBaUI7U0FFNUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2pDLEtBQUssR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBUCxJQUFJO1FBQUssTUFBTSxDQUFOLElBQUksQ0FBQyxLQUFLOztJQUV0QyxNQUFNLENBQUMsS0FBSztBQUNkLENBQUM7U0FFZSxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDbkMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLO0lBRXJCLE1BQU0sQ0FBQyxNQUFNO0FBQ2YsQ0FBQztTQUVlLGFBQWEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxRQUFRLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQVAsTUFBTTtRQUFLLE1BQU0sQ0FBTixNQUFNLENBQUMsS0FBSzs7SUFFaEQsTUFBTSxDQUFDLFFBQVE7QUFDakIsQ0FBQztTQUVlLGNBQWMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDOUMsR0FBSyxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBUCxNQUFNLEVBQUUsS0FBSyxFQUFLLENBQUM7UUFDN0MsR0FBSyxDQUFDLFVBQVUsR0FBRyxLQUFLLEVBQ2xCLFFBQVEsSUFBSSxVQUFVLEdBQUcsQ0FBQyxJQXpCSixVQUFjLGtCQTBCcEMsV0FBVyxHQUFHLFFBQVEsQ0FBQyxVQUFVLEdBQ2pDLFNBQVMsR0FBRyxRQUFRLENBQUMsUUFBUSxHQUM3QixJQUFJLEdBQUcsSUFBSSxDQUFDLDJCQUEyQixDQUFDLFdBQVcsRUFBRSxTQUFTO1FBRXBFLE1BQU0sQ0FBQyxJQUFJO0lBQ2IsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLO0FBQ2QsQ0FBQztTQUVlLGVBQWUsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUM7SUFDakQsR0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLFFBQVE7SUFFM0MsTUFBTSxDQUFDLE1BQU07QUFDZixDQUFDO1NBRWUsYUFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLEdBQUssQ0FBQyxXQUFXLE9BMUNrQixNQUFvQixRQTBDN0IsUUFBUSxHQUM1QixZQUFZLE9BM0NpQixNQUFvQixTQTJDM0IsUUFBUSxHQUM5QixXQUFXLE9BNUNrQixNQUFvQixRQTRDN0IsUUFBUSxHQUM1QixtQkFBbUIsR0FBRyxXQUFXLENBQUMsV0FBVyxJQUM3QyxvQkFBb0IsR0FBRyxZQUFZLENBQUMsV0FBVyxJQUMvQyxtQkFBbUIsR0FBRyxXQUFXLENBQUMsV0FBVyxJQUM3QyxXQUFXLE9BL0N3QixPQUFpQixZQStDNUIsb0JBQW9CLEVBQUUsbUJBQW1CLEdBQ2pFLFlBQVksT0FoRHVCLE9BQWlCLFlBZ0QzQixtQkFBbUIsRUFBRSxtQkFBbUIsR0FDakUsSUFBSSxPQWpEK0IsT0FBaUIsY0FBakIsT0FBaUIsU0FpRDlCLFdBQVcsRUFBRSxZQUFZLEtBQUssQ0FBQztJQUUzRCxNQUFNLENBQUMsSUFBSTtBQUNiLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgVkVSVElDRVNfTEVOR1RIIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgZmlyc3QsIHNlY29uZCwgdGhpcmQgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FycmF5XCI7XG5pbXBvcnQgeyBzdWJ0cmFjdDMsIGNyb3NzMywgbGVuZ3RoMyB9IGZyb20gXCIuLi9tYXRocy92ZWN0b3JcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lRWRnZXMoZWRnZXMpIHtcbiAgZWRnZXMgPSBlZGdlcy5tYXAoKGVkZ2UpID0+IGVkZ2UuY2xvbmUoKSk7XG5cbiAgcmV0dXJuIGVkZ2VzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVOb3JtYWwobm9ybWFsKSB7XG4gIG5vcm1hbCA9IG5vcm1hbC5jbG9uZSgpO1xuICBcbiAgcmV0dXJuIG5vcm1hbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lVmVydGljZXModmVydGljZXMpIHtcbiAgdmVydGljZXMgPSB2ZXJ0aWNlcy5tYXAoKHZlcnRleCkgPT4gdmVydGV4LmNsb25lKCkpO1xuXG4gIHJldHVybiB2ZXJ0aWNlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZUVkZ2VzKHZlcnRpY2VzLCBFZGdlKSB7XG4gIGNvbnN0IGVkZ2VzID0gdmVydGljZXMubWFwKCh2ZXJ0ZXgsIGluZGV4KSA9PiB7XG4gICAgY29uc3Qgc3RhcnRJbmRleCA9IGluZGV4LCAvLy9cbiAgICAgICAgICBlbmRJbmRleCA9IChzdGFydEluZGV4ICsgMSkgJSBWRVJUSUNFU19MRU5HVEgsXG4gICAgICAgICAgc3RhcnRWZXJ0ZXggPSB2ZXJ0aWNlc1tzdGFydEluZGV4XSxcbiAgICAgICAgICBlbmRWZXJ0ZXggPSB2ZXJ0aWNlc1tlbmRJbmRleF0sXG4gICAgICAgICAgZWRnZSA9IEVkZ2UuZnJvbVN0YXJ0VmVydGV4QW5kRW5kVmVydGV4KHN0YXJ0VmVydGV4LCBlbmRWZXJ0ZXgpO1xuXG4gICAgcmV0dXJuIGVkZ2U7XG4gIH0pO1xuXG4gIHJldHVybiBlZGdlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZU5vcm1hbCh2ZXJ0aWNlcywgTm9ybWFsKSB7XG4gIGNvbnN0IG5vcm1hbCA9IE5vcm1hbC5mcm9tVmVydGljZXModmVydGljZXMpO1xuXG4gIHJldHVybiBub3JtYWw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVBcmVhKHZlcnRpY2VzKSB7XG4gIGNvbnN0IGZpcnN0VmVydGV4ID0gZmlyc3QodmVydGljZXMpLFxuICAgICAgICBzZWNvbmRWZXJ0ZXggPSBzZWNvbmQodmVydGljZXMpLFxuICAgICAgICB0aGlyZFZlcnRleCA9IHRoaXJkKHZlcnRpY2VzKSxcbiAgICAgICAgZmlyc3RWZXJ0ZXhQb3NpdGlvbiA9IGZpcnN0VmVydGV4LmdldFBvc2l0aW9uKCksXG4gICAgICAgIHNlY29uZFZlcnRleFBvc2l0aW9uID0gc2Vjb25kVmVydGV4LmdldFBvc2l0aW9uKCksXG4gICAgICAgIHRoaXJkVmVydGV4UG9zaXRpb24gPSB0aGlyZFZlcnRleC5nZXRQb3NpdGlvbigpLFxuICAgICAgICBmaXJzdEV4dGVudCA9IHN1YnRyYWN0MyhzZWNvbmRWZXJ0ZXhQb3NpdGlvbiwgZmlyc3RWZXJ0ZXhQb3NpdGlvbiksXG4gICAgICAgIHNlY29uZEV4dGVudCA9IHN1YnRyYWN0Myh0aGlyZFZlcnRleFBvc2l0aW9uLCBmaXJzdFZlcnRleFBvc2l0aW9uKSxcbiAgICAgICAgYXJlYSA9IGxlbmd0aDMoY3Jvc3MzKGZpcnN0RXh0ZW50LCBzZWNvbmRFeHRlbnQpKSAvIDI7XG5cbiAgcmV0dXJuIGFyZWE7XG59XG4iXX0=