"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.scaleMatrixFromScale = scaleMatrixFromScale;
exports.offsetsMatrixFromOffsets = offsetsMatrixFromOffsets;
exports.positionMatrixFromNothing = positionMatrixFromNothing;
exports.positionMatrixFromDistance = positionMatrixFromDistance;
exports.positionMatrixFromPosition = positionMatrixFromPosition;
exports.rotationsMatrixFromAngles = rotationsMatrixFromAngles;
exports.rotationsMatrixFromRotations = rotationsMatrixFromRotations;
exports.normalsMatrixFromRotationsMatrix = normalsMatrixFromRotationsMatrix;
exports.projectionMatrixFromCameraAndCanvas = projectionMatrixFromCameraAndCanvas;
var _vector = require("../maths/vector");
var _array = require("../utilities/array");
var _constants = require("../constants");
var _matrix = require("../maths/matrix");
function scaleMatrixFromScale(scale) {
    var scaleMatrix = (0, _matrix).identity4();
    scaleMatrix = (0, _matrix).scale4(scaleMatrix, scale);
    return scaleMatrix;
}
function offsetsMatrixFromOffsets(offsets) {
    var offsetsMatrix = (0, _matrix).identity4(); ///
    offsetsMatrix = (0, _matrix).translate4(offsetsMatrix, offsets);
    return offsetsMatrix;
}
function positionMatrixFromNothing() {
    var positionMatrix = (0, _matrix).identity4(); ///
    return positionMatrix;
}
function positionMatrixFromDistance(distance) {
    var positionMatrix = (0, _matrix).identity4(); ///
    var x = 0, y = 0, z = -distance;
    positionMatrix = (0, _matrix).translate4(positionMatrix, [
        x,
        y,
        z
    ]);
    return positionMatrix;
}
function positionMatrixFromPosition(position) {
    var positionMatrix = (0, _matrix).identity4(); ///
    positionMatrix = (0, _matrix).translate4(positionMatrix, position);
    return positionMatrix;
}
function rotationsMatrixFromAngles(angles, param) {
    var reverseOrder = param === void 0 ? false : param;
    var rotationsMatrix = (0, _matrix).identity4(); ///
    var firstAngle = (0, _array).first(angles), secondAngle = (0, _array).second(angles), thirdAngle = 0, xAngle = firstAngle, yAngle = secondAngle, zAngle = thirdAngle, xAxis = [
        1,
        0,
        0
    ], yAxis = [
        0,
        1,
        0
    ], zAxis = [
        0,
        0,
        1
    ];
    if (reverseOrder) {
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, zAngle, zAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, yAngle, yAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, xAngle, xAxis);
    } else {
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, xAngle, xAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, yAngle, yAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, zAngle, zAxis);
    }
    return rotationsMatrix;
}
function rotationsMatrixFromRotations(rotations) {
    var scalar = _constants.DEGREES_TO_RADIANS_MULTIPLIER, angles = (0, _vector).scale3(rotations, scalar), rotationsMatrix = rotationsMatrixFromAngles(angles);
    return rotationsMatrix;
}
function normalsMatrixFromRotationsMatrix(rotationsMatrix) {
    var normalsMatrix = (0, _matrix).invert4(rotationsMatrix); ///
    normalsMatrix = (0, _matrix).transpose4(normalsMatrix);
    return normalsMatrix;
}
function projectionMatrixFromCameraAndCanvas(camera, canvas) {
    var zFar = camera.getZFar(), zNear = camera.getZNear(), width = canvas.getWidth(), height = canvas.getHeight(), fieldOfView = camera.getFieldOfView(), aspectRatio = width / height, projectionMatrix = (0, _matrix).perspective4(fieldOfView, aspectRatio, zNear, zFar);
    return projectionMatrix;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWF0cml4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBzY2FsZTMgfSBmcm9tIFwiLi4vbWF0aHMvdmVjdG9yXCI7XG5pbXBvcnQgeyBmaXJzdCwgc2Vjb25kIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hcnJheVwiO1xuaW1wb3J0IHsgREVHUkVFU19UT19SQURJQU5TX01VTFRJUExJRVIgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBpZGVudGl0eTQsIHNjYWxlNCwgaW52ZXJ0NCwgcm90YXRlNCwgdHJhbnNsYXRlNCwgdHJhbnNwb3NlNCwgcGVyc3BlY3RpdmU0IH0gZnJvbSBcIi4uL21hdGhzL21hdHJpeFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gc2NhbGVNYXRyaXhGcm9tU2NhbGUoc2NhbGUpIHtcbiAgbGV0IHNjYWxlTWF0cml4ID0gaWRlbnRpdHk0KCk7XG5cbiAgc2NhbGVNYXRyaXggPSBzY2FsZTQoc2NhbGVNYXRyaXgsIHNjYWxlKTtcblxuICByZXR1cm4gc2NhbGVNYXRyaXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvZmZzZXRzTWF0cml4RnJvbU9mZnNldHMob2Zmc2V0cykge1xuICBsZXQgb2Zmc2V0c01hdHJpeCA9IGlkZW50aXR5NCgpOyAvLy9cblxuICBvZmZzZXRzTWF0cml4ID0gdHJhbnNsYXRlNChvZmZzZXRzTWF0cml4LCBvZmZzZXRzKTtcblxuICByZXR1cm4gb2Zmc2V0c01hdHJpeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvc2l0aW9uTWF0cml4RnJvbU5vdGhpbmcoKSB7XG4gIGxldCBwb3NpdGlvbk1hdHJpeCA9IGlkZW50aXR5NCgpOyAvLy9cblxuICByZXR1cm4gcG9zaXRpb25NYXRyaXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3NpdGlvbk1hdHJpeEZyb21EaXN0YW5jZShkaXN0YW5jZSkge1xuICBsZXQgcG9zaXRpb25NYXRyaXggPSBpZGVudGl0eTQoKTsgLy8vXG5cbiAgY29uc3QgeCA9IDAsXG4gICAgICAgIHkgPSAwLFxuICAgICAgICB6ID0gLWRpc3RhbmNlO1xuXG4gIHBvc2l0aW9uTWF0cml4ID0gdHJhbnNsYXRlNChwb3NpdGlvbk1hdHJpeCwgWyB4LCB5LCB6IF0pO1xuXG4gIHJldHVybiBwb3NpdGlvbk1hdHJpeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvc2l0aW9uTWF0cml4RnJvbVBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gIGxldCBwb3NpdGlvbk1hdHJpeCA9IGlkZW50aXR5NCgpOyAvLy9cblxuICBwb3NpdGlvbk1hdHJpeCA9IHRyYW5zbGF0ZTQocG9zaXRpb25NYXRyaXgsIHBvc2l0aW9uKTtcblxuICByZXR1cm4gcG9zaXRpb25NYXRyaXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGlvbnNNYXRyaXhGcm9tQW5nbGVzKGFuZ2xlcywgcmV2ZXJzZU9yZGVyID0gZmFsc2UpIHtcbiAgbGV0IHJvdGF0aW9uc01hdHJpeCA9IGlkZW50aXR5NCgpOyAvLy9cblxuICBjb25zdCBmaXJzdEFuZ2xlID0gZmlyc3QoYW5nbGVzKSxcbiAgICAgICAgc2Vjb25kQW5nbGUgPSBzZWNvbmQoYW5nbGVzKSxcbiAgICAgICAgdGhpcmRBbmdsZSA9IDAsIC8vL1xuICAgICAgICB4QW5nbGUgPSBmaXJzdEFuZ2xlLCAgLy8vL1xuICAgICAgICB5QW5nbGUgPSBzZWNvbmRBbmdsZSwgLy8vXG4gICAgICAgIHpBbmdsZSA9IHRoaXJkQW5nbGUsICAvLy9cbiAgICAgICAgeEF4aXMgPSBbIDEsIDAsIDAgXSxcbiAgICAgICAgeUF4aXMgPSBbIDAsIDEsIDAgXSxcbiAgICAgICAgekF4aXMgPSBbIDAsIDAsIDEgXTtcblxuICBpZiAocmV2ZXJzZU9yZGVyKSB7XG4gICAgcm90YXRpb25zTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbnNNYXRyaXgsIHpBbmdsZSwgekF4aXMpO1xuICAgIHJvdGF0aW9uc01hdHJpeCA9IHJvdGF0ZTQocm90YXRpb25zTWF0cml4LCB5QW5nbGUsIHlBeGlzKTtcbiAgICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGU0KHJvdGF0aW9uc01hdHJpeCwgeEFuZ2xlLCB4QXhpcyk7XG4gIH0gZWxzZSB7XG4gICAgcm90YXRpb25zTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbnNNYXRyaXgsIHhBbmdsZSwgeEF4aXMpO1xuICAgIHJvdGF0aW9uc01hdHJpeCA9IHJvdGF0ZTQocm90YXRpb25zTWF0cml4LCB5QW5nbGUsIHlBeGlzKTtcbiAgICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGU0KHJvdGF0aW9uc01hdHJpeCwgekFuZ2xlLCB6QXhpcyk7XG4gIH1cblxuICByZXR1cm4gcm90YXRpb25zTWF0cml4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRpb25zTWF0cml4RnJvbVJvdGF0aW9ucyhyb3RhdGlvbnMpIHtcbiAgY29uc3Qgc2NhbGFyID0gREVHUkVFU19UT19SQURJQU5TX01VTFRJUExJRVIsIC8vL1xuICAgICAgICBhbmdsZXMgPSBzY2FsZTMocm90YXRpb25zLCBzY2FsYXIpLFxuICAgICAgICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGlvbnNNYXRyaXhGcm9tQW5nbGVzKGFuZ2xlcyk7XG5cbiAgcmV0dXJuIHJvdGF0aW9uc01hdHJpeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbHNNYXRyaXhGcm9tUm90YXRpb25zTWF0cml4KHJvdGF0aW9uc01hdHJpeCkge1xuICBsZXQgbm9ybWFsc01hdHJpeCA9IGludmVydDQocm90YXRpb25zTWF0cml4KTsgLy8vXG5cbiAgbm9ybWFsc01hdHJpeCA9IHRyYW5zcG9zZTQobm9ybWFsc01hdHJpeCk7XG5cbiAgcmV0dXJuIG5vcm1hbHNNYXRyaXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9qZWN0aW9uTWF0cml4RnJvbUNhbWVyYUFuZENhbnZhcyhjYW1lcmEsIGNhbnZhcykge1xuICBjb25zdCB6RmFyID0gY2FtZXJhLmdldFpGYXIoKSxcbiAgICAgICAgek5lYXIgPSBjYW1lcmEuZ2V0Wk5lYXIoKSxcbiAgICAgICAgd2lkdGggPSBjYW52YXMuZ2V0V2lkdGgoKSxcbiAgICAgICAgaGVpZ2h0ID0gY2FudmFzLmdldEhlaWdodCgpLFxuICAgICAgICBmaWVsZE9mVmlldyA9IGNhbWVyYS5nZXRGaWVsZE9mVmlldygpLFxuICAgICAgICBhc3BlY3RSYXRpbyA9ICggd2lkdGggLyBoZWlnaHQgKSxcbiAgICAgICAgcHJvamVjdGlvbk1hdHJpeCA9IHBlcnNwZWN0aXZlNChmaWVsZE9mVmlldywgYXNwZWN0UmF0aW8sIHpOZWFyLCB6RmFyKTtcblxuICByZXR1cm4gcHJvamVjdGlvbk1hdHJpeDtcbn1cbiJdLCJuYW1lcyI6WyJzY2FsZU1hdHJpeEZyb21TY2FsZSIsIm9mZnNldHNNYXRyaXhGcm9tT2Zmc2V0cyIsInBvc2l0aW9uTWF0cml4RnJvbU5vdGhpbmciLCJwb3NpdGlvbk1hdHJpeEZyb21EaXN0YW5jZSIsInBvc2l0aW9uTWF0cml4RnJvbVBvc2l0aW9uIiwicm90YXRpb25zTWF0cml4RnJvbUFuZ2xlcyIsInJvdGF0aW9uc01hdHJpeEZyb21Sb3RhdGlvbnMiLCJub3JtYWxzTWF0cml4RnJvbVJvdGF0aW9uc01hdHJpeCIsInByb2plY3Rpb25NYXRyaXhGcm9tQ2FtZXJhQW5kQ2FudmFzIiwic2NhbGUiLCJzY2FsZU1hdHJpeCIsIm9mZnNldHMiLCJvZmZzZXRzTWF0cml4IiwicG9zaXRpb25NYXRyaXgiLCJkaXN0YW5jZSIsIngiLCJ5IiwieiIsInBvc2l0aW9uIiwiYW5nbGVzIiwicmV2ZXJzZU9yZGVyIiwicm90YXRpb25zTWF0cml4IiwiZmlyc3RBbmdsZSIsInNlY29uZEFuZ2xlIiwidGhpcmRBbmdsZSIsInhBbmdsZSIsInlBbmdsZSIsInpBbmdsZSIsInhBeGlzIiwieUF4aXMiLCJ6QXhpcyIsInJvdGF0aW9ucyIsInNjYWxhciIsIm5vcm1hbHNNYXRyaXgiLCJjYW1lcmEiLCJjYW52YXMiLCJ6RmFyIiwiZ2V0WkZhciIsInpOZWFyIiwiZ2V0Wk5lYXIiLCJ3aWR0aCIsImdldFdpZHRoIiwiaGVpZ2h0IiwiZ2V0SGVpZ2h0IiwiZmllbGRPZlZpZXciLCJnZXRGaWVsZE9mVmlldyIsImFzcGVjdFJhdGlvIiwicHJvamVjdGlvbk1hdHJpeCJdLCJtYXBwaW5ncyI6IkFBQUEsQ0FBWTs7OztRQU9JQSxvQkFBb0IsR0FBcEJBLG9CQUFvQjtRQVFwQkMsd0JBQXdCLEdBQXhCQSx3QkFBd0I7UUFReEJDLHlCQUF5QixHQUF6QkEseUJBQXlCO1FBTXpCQywwQkFBMEIsR0FBMUJBLDBCQUEwQjtRQVkxQkMsMEJBQTBCLEdBQTFCQSwwQkFBMEI7UUFRMUJDLHlCQUF5QixHQUF6QkEseUJBQXlCO1FBMEJ6QkMsNEJBQTRCLEdBQTVCQSw0QkFBNEI7UUFRNUJDLGdDQUFnQyxHQUFoQ0EsZ0NBQWdDO1FBUWhDQyxtQ0FBbUMsR0FBbkNBLG1DQUFtQztBQXpGNUIsR0FBaUIsQ0FBakIsT0FBaUI7QUFDVixHQUFvQixDQUFwQixNQUFvQjtBQUNKLEdBQWMsQ0FBZCxVQUFjO0FBQzhCLEdBQWlCLENBQWpCLE9BQWlCO1NBRTNGUixvQkFBb0IsQ0FBQ1MsS0FBSyxFQUFFLENBQUM7SUFDM0MsR0FBRyxDQUFDQyxXQUFXLE9BSHlFLE9BQWlCO0lBS3pHQSxXQUFXLE9BTDZFLE9BQWlCLFNBS3BGQSxXQUFXLEVBQUVELEtBQUs7SUFFdkMsTUFBTSxDQUFDQyxXQUFXO0FBQ3BCLENBQUM7U0FFZVQsd0JBQXdCLENBQUNVLE9BQU8sRUFBRSxDQUFDO0lBQ2pELEdBQUcsQ0FBQ0MsYUFBYSxPQVh1RSxPQUFpQixjQVd4RSxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7SUFFcENBLGFBQWEsT0FiMkUsT0FBaUIsYUFhOUVBLGFBQWEsRUFBRUQsT0FBTztJQUVqRCxNQUFNLENBQUNDLGFBQWE7QUFDdEIsQ0FBQztTQUVlVix5QkFBeUIsR0FBRyxDQUFDO0lBQzNDLEdBQUcsQ0FBQ1csY0FBYyxPQW5Cc0UsT0FBaUIsY0FtQnZF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