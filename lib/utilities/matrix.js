"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.scaleMatrixFromScale = scaleMatrixFromScale;
exports.offsetsMatrixFromOffsets = offsetsMatrixFromOffsets;
exports.positionMatrixFromNothing = positionMatrixFromNothing;
exports.positionMatrixFromDistance = positionMatrixFromDistance;
exports.positionMatrixFromPosition = positionMatrixFromPosition;
exports.rotationsMatrixFromAngles = rotationsMatrixFromAngles;
exports.rotationsMatrixFromRotations = rotationsMatrixFromRotations;
exports.normalsMatrixFromRotationsMatrix = normalsMatrixFromRotationsMatrix;
exports.projectionMatrixFromWidthAndHeight = projectionMatrixFromWidthAndHeight;
var _vector = require("../maths/vector");
var _array = require("../utilities/array");
var _constants = require("../constants");
var _matrix = require("../maths/matrix");
function scaleMatrixFromScale(scale) {
    var scaleMatrix = _matrix.identity4();
    scaleMatrix = _matrix.scale4(scaleMatrix, scale);
    return scaleMatrix;
}
function offsetsMatrixFromOffsets(offsets) {
    var offsetsMatrix = _matrix.identity4(); ///
    offsetsMatrix = _matrix.translate4(offsetsMatrix, offsets);
    return offsetsMatrix;
}
function positionMatrixFromNothing() {
    var positionMatrix = _matrix.identity4(); ///
    return positionMatrix;
}
function positionMatrixFromDistance(distance) {
    var positionMatrix = _matrix.identity4(); ///
    var x = 0, y = 0, z = -distance;
    positionMatrix = _matrix.translate4(positionMatrix, [
        x,
        y,
        z
    ]);
    return positionMatrix;
}
function positionMatrixFromPosition(position) {
    var positionMatrix = _matrix.identity4(); ///
    positionMatrix = _matrix.translate4(positionMatrix, position);
    return positionMatrix;
}
function rotationsMatrixFromAngles(angles, param) {
    var reverseOrder = param === void 0 ? false : param;
    var rotationsMatrix = _matrix.identity4(); ///
    var firstAngle = _array.first(angles), secondAngle = _array.second(angles), thirdAngle = _array.third(angles), xAngle = firstAngle, yAngle = secondAngle, zAngle = thirdAngle, xAxis = [
        1,
        0,
        0
    ], yAxis = [
        0,
        1,
        0
    ], zAxis = [
        0,
        0,
        1
    ];
    if (reverseOrder) {
        rotationsMatrix = _matrix.rotate4(rotationsMatrix, zAngle, zAxis);
        rotationsMatrix = _matrix.rotate4(rotationsMatrix, yAngle, yAxis);
        rotationsMatrix = _matrix.rotate4(rotationsMatrix, xAngle, xAxis);
    } else {
        rotationsMatrix = _matrix.rotate4(rotationsMatrix, xAngle, xAxis);
        rotationsMatrix = _matrix.rotate4(rotationsMatrix, yAngle, yAxis);
        rotationsMatrix = _matrix.rotate4(rotationsMatrix, zAngle, zAxis);
    }
    return rotationsMatrix;
}
function rotationsMatrixFromRotations(rotations) {
    var scalar = _constants.DEGREES_TO_RADIANS_SCALAR, angles = _vector.scale3(rotations, scalar), rotationsMatrix = rotationsMatrixFromAngles(angles);
    return rotationsMatrix;
}
function normalsMatrixFromRotationsMatrix(rotationsMatrix) {
    var normalsMatrix = _matrix.invert4(rotationsMatrix);
    normalsMatrix = _matrix.transpose4(normalsMatrix);
    return normalsMatrix;
}
function projectionMatrixFromWidthAndHeight(width, height) {
    var fieldOfView = _constants.FIELD_OF_VIEW, aspectRatio = width / height, zNear = _constants.Z_NEAR, zFar = _constants.Z_FAR, projectionMatrix = _matrix.perspective4(fieldOfView, aspectRatio, zNear, zFar);
    return projectionMatrix;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWF0cml4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBzY2FsZTMgfSBmcm9tIFwiLi4vbWF0aHMvdmVjdG9yXCI7XG5pbXBvcnQgeyBmaXJzdCwgc2Vjb25kLCB0aGlyZCB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXJyYXlcIjtcbmltcG9ydCB7IERFR1JFRVNfVE9fUkFESUFOU19TQ0FMQVIsIEZJRUxEX09GX1ZJRVcsIFpfTkVBUiwgWl9GQVIgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBpZGVudGl0eTQsIHNjYWxlNCwgaW52ZXJ0NCwgcm90YXRlNCwgdHJhbnNsYXRlNCwgdHJhbnNwb3NlNCwgcGVyc3BlY3RpdmU0IH0gZnJvbSBcIi4uL21hdGhzL21hdHJpeFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gc2NhbGVNYXRyaXhGcm9tU2NhbGUoc2NhbGUpIHtcbiAgbGV0IHNjYWxlTWF0cml4ID0gaWRlbnRpdHk0KCk7XG5cbiAgc2NhbGVNYXRyaXggPSBzY2FsZTQoc2NhbGVNYXRyaXgsIHNjYWxlKTtcblxuICByZXR1cm4gc2NhbGVNYXRyaXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvZmZzZXRzTWF0cml4RnJvbU9mZnNldHMob2Zmc2V0cykge1xuICBsZXQgb2Zmc2V0c01hdHJpeCA9IGlkZW50aXR5NCgpOyAvLy9cblxuICBvZmZzZXRzTWF0cml4ID0gdHJhbnNsYXRlNChvZmZzZXRzTWF0cml4LCBvZmZzZXRzKTtcblxuICByZXR1cm4gb2Zmc2V0c01hdHJpeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvc2l0aW9uTWF0cml4RnJvbU5vdGhpbmcoKSB7XG4gIGxldCBwb3NpdGlvbk1hdHJpeCA9IGlkZW50aXR5NCgpOyAvLy9cblxuICByZXR1cm4gcG9zaXRpb25NYXRyaXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3NpdGlvbk1hdHJpeEZyb21EaXN0YW5jZShkaXN0YW5jZSkge1xuICBsZXQgcG9zaXRpb25NYXRyaXggPSBpZGVudGl0eTQoKTsgLy8vXG5cbiAgY29uc3QgeCA9IDAsXG4gICAgICAgIHkgPSAwLFxuICAgICAgICB6ID0gLWRpc3RhbmNlO1xuXG4gIHBvc2l0aW9uTWF0cml4ID0gdHJhbnNsYXRlNChwb3NpdGlvbk1hdHJpeCwgWyB4LCB5LCB6IF0pO1xuXG4gIHJldHVybiBwb3NpdGlvbk1hdHJpeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvc2l0aW9uTWF0cml4RnJvbVBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gIGxldCBwb3NpdGlvbk1hdHJpeCA9IGlkZW50aXR5NCgpOyAvLy9cblxuICBwb3NpdGlvbk1hdHJpeCA9IHRyYW5zbGF0ZTQocG9zaXRpb25NYXRyaXgsIHBvc2l0aW9uKTtcblxuICByZXR1cm4gcG9zaXRpb25NYXRyaXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGlvbnNNYXRyaXhGcm9tQW5nbGVzKGFuZ2xlcywgcmV2ZXJzZU9yZGVyID0gZmFsc2UpIHtcbiAgbGV0IHJvdGF0aW9uc01hdHJpeCA9IGlkZW50aXR5NCgpOyAvLy9cblxuICBjb25zdCBmaXJzdEFuZ2xlID0gZmlyc3QoYW5nbGVzKSxcbiAgICAgICAgc2Vjb25kQW5nbGUgPSBzZWNvbmQoYW5nbGVzKSxcbiAgICAgICAgdGhpcmRBbmdsZSA9IHRoaXJkKGFuZ2xlcyksXG4gICAgICAgIHhBbmdsZSA9IGZpcnN0QW5nbGUsXG4gICAgICAgIHlBbmdsZSA9IHNlY29uZEFuZ2xlLFxuICAgICAgICB6QW5nbGUgPSB0aGlyZEFuZ2xlLFxuICAgICAgICB4QXhpcyA9IFsgMSwgMCwgMCBdLFxuICAgICAgICB5QXhpcyA9IFsgMCwgMSwgMCBdLFxuICAgICAgICB6QXhpcyA9IFsgMCwgMCwgMSBdO1xuXG4gIGlmIChyZXZlcnNlT3JkZXIpIHtcbiAgICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGU0KHJvdGF0aW9uc01hdHJpeCwgekFuZ2xlLCB6QXhpcyk7XG5cbiAgICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGU0KHJvdGF0aW9uc01hdHJpeCwgeUFuZ2xlLCB5QXhpcyk7XG5cbiAgICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGU0KHJvdGF0aW9uc01hdHJpeCwgeEFuZ2xlLCB4QXhpcyk7XG4gIH0gZWxzZSB7XG4gICAgcm90YXRpb25zTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbnNNYXRyaXgsIHhBbmdsZSwgeEF4aXMpO1xuXG4gICAgcm90YXRpb25zTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbnNNYXRyaXgsIHlBbmdsZSwgeUF4aXMpO1xuXG4gICAgcm90YXRpb25zTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbnNNYXRyaXgsIHpBbmdsZSwgekF4aXMpO1xuICB9XG5cbiAgcmV0dXJuIHJvdGF0aW9uc01hdHJpeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0aW9uc01hdHJpeEZyb21Sb3RhdGlvbnMocm90YXRpb25zKSB7XG4gIGNvbnN0IHNjYWxhciA9IERFR1JFRVNfVE9fUkFESUFOU19TQ0FMQVIsXG4gICAgICAgIGFuZ2xlcyA9IHNjYWxlMyhyb3RhdGlvbnMsIHNjYWxhciksXG4gICAgICAgIHJvdGF0aW9uc01hdHJpeCA9IHJvdGF0aW9uc01hdHJpeEZyb21BbmdsZXMoYW5nbGVzKTtcblxuICByZXR1cm4gcm90YXRpb25zTWF0cml4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsc01hdHJpeEZyb21Sb3RhdGlvbnNNYXRyaXgocm90YXRpb25zTWF0cml4KSB7XG4gIGxldCBub3JtYWxzTWF0cml4ID0gaW52ZXJ0NChyb3RhdGlvbnNNYXRyaXgpO1xuXG4gIG5vcm1hbHNNYXRyaXggPSB0cmFuc3Bvc2U0KG5vcm1hbHNNYXRyaXgpO1xuXG4gIHJldHVybiBub3JtYWxzTWF0cml4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvamVjdGlvbk1hdHJpeEZyb21XaWR0aEFuZEhlaWdodCh3aWR0aCwgaGVpZ2h0KSB7XG4gIGNvbnN0IGZpZWxkT2ZWaWV3ID0gRklFTERfT0ZfVklFVywgIC8vL1xuICAgICAgICBhc3BlY3RSYXRpbyA9IHdpZHRoIC8gaGVpZ2h0LFxuICAgICAgICB6TmVhciA9IFpfTkVBUiwgLy8vXG4gICAgICAgIHpGYXIgPSBaX0ZBUiwgLy8vXG4gICAgICAgIHByb2plY3Rpb25NYXRyaXggPSBwZXJzcGVjdGl2ZTQoZmllbGRPZlZpZXcsIGFzcGVjdFJhdGlvLCB6TmVhciwgekZhcik7XG5cbiAgcmV0dXJuIHByb2plY3Rpb25NYXRyaXg7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkNBQUEsVUFBWTs7OztRQU9JLG9CQUFvQixHQUFwQixvQkFBb0I7UUFRcEIsd0JBQXdCLEdBQXhCLHdCQUF3QjtRQVF4Qix5QkFBeUIsR0FBekIseUJBQXlCO1FBTXpCLDBCQUEwQixHQUExQiwwQkFBMEI7UUFZMUIsMEJBQTBCLEdBQTFCLDBCQUEwQjtRQVExQix5QkFBeUIsR0FBekIseUJBQXlCO1FBOEJ6Qiw0QkFBNEIsR0FBNUIsNEJBQTRCO1FBUTVCLGdDQUFnQyxHQUFoQyxnQ0FBZ0M7UUFRaEMsa0NBQWtDLEdBQWxDLGtDQUFrQztJQTdGM0IsT0FBaUI7SUFDSCxNQUFvQjtJQUNlLFVBQWM7SUFDSSxPQUFpQjtTQUUzRixvQkFBb0IsQ0FBQyxLQUFLO1FBQ3BDLFdBQVcsR0FIeUUsT0FBaUI7SUFLekcsV0FBVyxHQUw2RSxPQUFpQixRQUtwRixXQUFXLEVBQUUsS0FBSztXQUVoQyxXQUFXOztTQUdKLHdCQUF3QixDQUFDLE9BQU87UUFDMUMsYUFBYSxHQVh1RSxPQUFpQixhQVd4RSxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7SUFFcEMsYUFBYSxHQWIyRSxPQUFpQixZQWE5RSxhQUFhLEVBQUUsT0FBTztXQUUxQyxhQUFhOztTQUdOLHlCQUF5QjtRQUNuQyxjQUFjLEdBbkJzRSxPQUFpQixhQW1CdkUsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO1dBRTlCLGNBQWM7O1NBR1AsMEJBQTBCLENB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