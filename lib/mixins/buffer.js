"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
function createElementBuffer(data) {
    var _this_context = this.context, ELEMENT_ARRAY_BUFFER = _this_context.ELEMENT_ARRAY_BUFFER, STATIC_DRAW = _this_context.STATIC_DRAW, target = ELEMENT_ARRAY_BUFFER, usage = STATIC_DRAW, uint16Array = new Uint16Array(data), elementBuffer = this.context.createBuffer();
    this.context.bindBuffer(target, elementBuffer);
    this.context.bufferData(target, uint16Array, usage);
    return elementBuffer;
}
function bindElementBuffer(elementBuffer) {
    var ELEMENT_ARRAY_BUFFER = this.context.ELEMENT_ARRAY_BUFFER, target = ELEMENT_ARRAY_BUFFER;
    this.context.bindBuffer(target, elementBuffer);
}
function createBuffer(data) {
    var _this_context = this.context, ARRAY_BUFFER = _this_context.ARRAY_BUFFER, STATIC_DRAW = _this_context.STATIC_DRAW, target = ARRAY_BUFFER, usage = STATIC_DRAW, buffer = this.context.createBuffer(), float32Array = new Float32Array(data);
    this.context.bindBuffer(target, buffer);
    this.context.bufferData(target, float32Array, usage);
    return buffer;
}
function bindBuffer(buffer, attributeLocation, components) {
    var _this_context = this.context, ARRAY_BUFFER = _this_context.ARRAY_BUFFER, FLOAT = _this_context.FLOAT, target = ARRAY_BUFFER, type = FLOAT, normalize = false, stride = 0, offset = 0;
    this.context.bindBuffer(target, buffer);
    this.context.vertexAttribPointer(attributeLocation, components, type, normalize, stride, offset);
    this.context.enableVertexAttribArray(attributeLocation);
}
var bufferMixins = {
    createElementBuffer: createElementBuffer,
    bindElementBuffer: bindElementBuffer,
    createBuffer: createBuffer,
    bindBuffer: bindBuffer
};
var _default = bufferMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvYnVmZmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50QnVmZmVyKGRhdGEpIHtcbiAgY29uc3QgeyBFTEVNRU5UX0FSUkFZX0JVRkZFUiwgU1RBVElDX0RSQVcgfSA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgdGFyZ2V0ID0gRUxFTUVOVF9BUlJBWV9CVUZGRVIsXG4gICAgICAgIHVzYWdlID0gU1RBVElDX0RSQVcsXG4gICAgICAgIHVpbnQxNkFycmF5ID0gbmV3IFVpbnQxNkFycmF5KGRhdGEpLFxuICAgICAgICBlbGVtZW50QnVmZmVyID0gdGhpcy5jb250ZXh0LmNyZWF0ZUJ1ZmZlcigpO1xuXG4gIHRoaXMuY29udGV4dC5iaW5kQnVmZmVyKHRhcmdldCwgZWxlbWVudEJ1ZmZlcik7XG5cbiAgdGhpcy5jb250ZXh0LmJ1ZmZlckRhdGEodGFyZ2V0LCB1aW50MTZBcnJheSwgdXNhZ2UpO1xuXG4gIHJldHVybiBlbGVtZW50QnVmZmVyO1xufVxuXG5mdW5jdGlvbiBiaW5kRWxlbWVudEJ1ZmZlcihlbGVtZW50QnVmZmVyKSB7XG4gIGNvbnN0IHsgRUxFTUVOVF9BUlJBWV9CVUZGRVIgfSA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgdGFyZ2V0ID0gRUxFTUVOVF9BUlJBWV9CVUZGRVI7XG5cbiAgdGhpcy5jb250ZXh0LmJpbmRCdWZmZXIodGFyZ2V0LCBlbGVtZW50QnVmZmVyKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyKGRhdGEpIHtcbiAgY29uc3QgeyBBUlJBWV9CVUZGRVIsIFNUQVRJQ19EUkFXIH0gPSB0aGlzLmNvbnRleHQsXG4gICAgICAgIHRhcmdldCA9IEFSUkFZX0JVRkZFUixcbiAgICAgICAgdXNhZ2UgPSBTVEFUSUNfRFJBVyxcbiAgICAgICAgYnVmZmVyID0gdGhpcy5jb250ZXh0LmNyZWF0ZUJ1ZmZlcigpLFxuICAgICAgICBmbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KGRhdGEpO1xuXG4gIHRoaXMuY29udGV4dC5iaW5kQnVmZmVyKHRhcmdldCwgYnVmZmVyKTtcblxuICB0aGlzLmNvbnRleHQuYnVmZmVyRGF0YSh0YXJnZXQsIGZsb2F0MzJBcnJheSwgdXNhZ2UpO1xuXG4gIHJldHVybiBidWZmZXI7XG59XG5cbmZ1bmN0aW9uIGJpbmRCdWZmZXIoYnVmZmVyLCBhdHRyaWJ1dGVMb2NhdGlvbiwgY29tcG9uZW50cykge1xuICBjb25zdCB7IEFSUkFZX0JVRkZFUiwgRkxPQVQgfSA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgdGFyZ2V0ID0gQVJSQVlfQlVGRkVSLFxuICAgICAgICB0eXBlID0gRkxPQVQsXG4gICAgICAgIG5vcm1hbGl6ZSA9IGZhbHNlLFxuICAgICAgICBzdHJpZGUgPSAwLFxuICAgICAgICBvZmZzZXQgPSAwO1xuXG4gIHRoaXMuY29udGV4dC5iaW5kQnVmZmVyKHRhcmdldCwgYnVmZmVyKTtcblxuICB0aGlzLmNvbnRleHQudmVydGV4QXR0cmliUG9pbnRlcihhdHRyaWJ1dGVMb2NhdGlvbiwgY29tcG9uZW50cywgdHlwZSwgbm9ybWFsaXplLCBzdHJpZGUsIG9mZnNldCk7XG5cbiAgdGhpcy5jb250ZXh0LmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGF0dHJpYnV0ZUxvY2F0aW9uKTtcbn1cblxuY29uc3QgYnVmZmVyTWl4aW5zID0ge1xuICBjcmVhdGVFbGVtZW50QnVmZmVyLFxuICBiaW5kRWxlbWVudEJ1ZmZlcixcbiAgY3JlYXRlQnVmZmVyLFxuICBiaW5kQnVmZmVyXG59O1xuXG5leHBvcnQgZGVmYXVsdCBidWZmZXJNaXhpbnM7XG4iXSwibmFtZXMiOlsiY3JlYXRlRWxlbWVudEJ1ZmZlciIsImRhdGEiLCJjb250ZXh0IiwiRUxFTUVOVF9BUlJBWV9CVUZGRVIiLCJTVEFUSUNfRFJBVyIsInRhcmdldCIsInVzYWdlIiwidWludDE2QXJyYXkiLCJVaW50MTZBcnJheSIsImVsZW1lbnRCdWZmZXIiLCJjcmVhdGVCdWZmZXIiLCJiaW5kQnVmZmVyIiwiYnVmZmVyRGF0YSIsImJpbmRFbGVtZW50QnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiYnVmZmVyIiwiZmxvYXQzMkFycmF5IiwiRmxvYXQzMkFycmF5IiwiYXR0cmlidXRlTG9jYXRpb24iLCJjb21wb25lbnRzIiwiRkxPQVQiLCJ0eXBlIiwibm9ybWFsaXplIiwic3RyaWRlIiwib2Zmc2V0IiwidmVydGV4QXR0cmliUG9pbnRlciIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwiYnVmZmVyTWl4aW5zIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkEyREE7OztlQUFBOzs7QUF6REEsU0FBU0Esb0JBQW9CQyxJQUFJO0lBQy9CLElBQThDLGdCQUFBLElBQUksQ0FBQ0MsT0FBTyxFQUFsREMsdUJBQXNDLGNBQXRDQSxzQkFBc0JDLGNBQWdCLGNBQWhCQSxhQUN4QkMsU0FBU0Ysc0JBQ1RHLFFBQVFGLGFBQ1JHLGNBQWMsSUFBSUMsWUFBWVAsT0FDOUJRLGdCQUFnQixJQUFJLENBQUNQLE9BQU8sQ0FBQ1EsWUFBWTtJQUUvQyxJQUFJLENBQUNSLE9BQU8sQ0FBQ1MsVUFBVSxDQUFDTixRQUFRSTtJQUVoQyxJQUFJLENBQUNQLE9BQU8sQ0FBQ1UsVUFBVSxDQUFDUCxRQUFRRSxhQUFhRDtJQUU3QyxPQUFPRztBQUNUO0FBRUEsU0FBU0ksa0JBQWtCSixhQUFhO0lBQ3RDLElBQU0sQUFBRU4sdUJBQXlCLElBQUksQ0FBQ0QsT0FBTyxDQUFyQ0Msc0JBQ0ZFLFNBQVNGO0lBRWYsSUFBSSxDQUFDRCxPQUFPLENBQUNTLFVBQVUsQ0FBQ04sUUFBUUk7QUFDbEM7QUFFQSxTQUFTQyxhQUFhVCxJQUFJO0lBQ3hCLElBQXNDLGdCQUFBLElBQUksQ0FBQ0MsT0FBTyxFQUExQ1ksZUFBOEIsY0FBOUJBLGNBQWNWLGNBQWdCLGNBQWhCQSxhQUNoQkMsU0FBU1MsY0FDVFIsUUFBUUYsYUFDUlcsU0FBUyxJQUFJLENBQUNiLE9BQU8sQ0FBQ1EsWUFBWSxJQUNsQ00sZUFBZSxJQUFJQyxhQUFhaEI7SUFFdEMsSUFBSSxDQUFDQyxPQUFPLENBQUNTLFVBQVUsQ0FBQ04sUUFBUVU7SUFFaEMsSUFBSSxDQUFDYixPQUFPLENBQUNVLFVBQVUsQ0FBQ1AsUUFBUVcsY0FBY1Y7SUFFOUMsT0FBT1M7QUFDVDtBQUVBLFNBQVNKLFdBQVdJLE1BQU0sRUFBRUcsaUJBQWlCLEVBQUVDLFVBQVU7SUFDdkQsSUFBZ0MsZ0JBQUEsSUFBSSxDQUFDakIsT0FBTyxFQUFwQ1ksZUFBd0IsY0FBeEJBLGNBQWNNLFFBQVUsY0FBVkEsT0FDaEJmLFNBQVNTLGNBQ1RPLE9BQU9ELE9BQ1BFLFlBQVksT0FDWkMsU0FBUyxHQUNUQyxTQUFTO0lBRWYsSUFBSSxDQUFDdEIsT0FBTyxDQUFDUyxVQUFVLENBQUNOLFFBQVFVO0lBRWhDLElBQUksQ0FBQ2IsT0FBTyxDQUFDdUIsbUJBQW1CLENBQUNQLG1CQUFtQkMsWUFBWUUsTUFBTUMsV0FBV0MsUUFBUUM7SUFFekYsSUFBSSxDQUFDdEIsT0FBTyxDQUFDd0IsdUJBQXVCLENBQUNSO0FBQ3ZDO0FBRUEsSUFBTVMsZUFBZTtJQUNuQjNCLHFCQUFBQTtJQUNBYSxtQkFBQUE7SUFDQUgsY0FBQUE7SUFDQUMsWUFBQUE7QUFDRjtJQUVBLFdBQWVnQiJ9