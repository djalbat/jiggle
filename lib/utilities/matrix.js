"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.scaleMatrixFromScale = scaleMatrixFromScale;
exports.offsetsMatrixFromOffsets = offsetsMatrixFromOffsets;
exports.positionMatrixFromNothing = positionMatrixFromNothing;
exports.positionMatrixFromDistance = positionMatrixFromDistance;
exports.positionMatrixFromPosition = positionMatrixFromPosition;
exports.rotationsMatrixFromAngles = rotationsMatrixFromAngles;
exports.rotationsMatrixFromRotations = rotationsMatrixFromRotations;
exports.normalsMatrixFromRotationsMatrix = normalsMatrixFromRotationsMatrix;
exports.projectionMatrixFromCameraAndCanvas = projectionMatrixFromCameraAndCanvas;
var _vector = require("../maths/vector");
var _array = require("../utilities/array");
var _constants = require("../constants");
var _matrix = require("../maths/matrix");
function scaleMatrixFromScale(scale) {
    var scaleMatrix = (0, _matrix).identity4();
    scaleMatrix = (0, _matrix).scale4(scaleMatrix, scale);
    return scaleMatrix;
}
function offsetsMatrixFromOffsets(offsets) {
    var offsetsMatrix = (0, _matrix).identity4(); ///
    offsetsMatrix = (0, _matrix).translate4(offsetsMatrix, offsets);
    return offsetsMatrix;
}
function positionMatrixFromNothing() {
    var positionMatrix = (0, _matrix).identity4(); ///
    return positionMatrix;
}
function positionMatrixFromDistance(distance) {
    var positionMatrix = (0, _matrix).identity4(); ///
    var x = 0, y = 0, z = -distance;
    positionMatrix = (0, _matrix).translate4(positionMatrix, [
        x,
        y,
        z
    ]);
    return positionMatrix;
}
function positionMatrixFromPosition(position) {
    var positionMatrix = (0, _matrix).identity4(); ///
    positionMatrix = (0, _matrix).translate4(positionMatrix, position);
    return positionMatrix;
}
function rotationsMatrixFromAngles(angles, param) {
    var reverseOrder = param === void 0 ? false : param;
    var rotationsMatrix = (0, _matrix).identity4(); ///
    var firstAngle = (0, _array).first(angles), secondAngle = (0, _array).second(angles), thirdAngle = (0, _array).third(angles), xAngle = firstAngle, yAngle = secondAngle, zAngle = thirdAngle, xAxis = [
        1,
        0,
        0
    ], yAxis = [
        0,
        1,
        0
    ], zAxis = [
        0,
        0,
        1
    ];
    if (reverseOrder) {
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, zAngle, zAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, yAngle, yAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, xAngle, xAxis);
    } else {
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, xAngle, xAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, yAngle, yAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, zAngle, zAxis);
    }
    return rotationsMatrix;
}
function rotationsMatrixFromRotations(rotations) {
    var scalar = _constants.DEGREES_TO_RADIANS_MULTIPLIER, angles = (0, _vector).scale3(rotations, scalar), rotationsMatrix = rotationsMatrixFromAngles(angles);
    return rotationsMatrix;
}
function normalsMatrixFromRotationsMatrix(rotationsMatrix) {
    var normalsMatrix = (0, _matrix).invert4(rotationsMatrix); ///
    normalsMatrix = (0, _matrix).transpose4(normalsMatrix);
    return normalsMatrix;
}
function projectionMatrixFromCameraAndCanvas(camera, canvas) {
    var zFar = camera.getZFar(), zNear = camera.getZNear(), width = canvas.getWidth(), height = canvas.getHeight(), fieldOfView = camera.getFieldOfView(), aspectRatio = width / height, projectionMatrix = (0, _matrix).perspective4(fieldOfView, aspectRatio, zNear, zFar);
    return projectionMatrix;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWF0cml4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBzY2FsZTMgfSBmcm9tIFwiLi4vbWF0aHMvdmVjdG9yXCI7XG5pbXBvcnQgeyBmaXJzdCwgc2Vjb25kLCB0aGlyZCB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXJyYXlcIjtcbmltcG9ydCB7IERFR1JFRVNfVE9fUkFESUFOU19NVUxUSVBMSUVSIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgaWRlbnRpdHk0LCBzY2FsZTQsIGludmVydDQsIHJvdGF0ZTQsIHRyYW5zbGF0ZTQsIHRyYW5zcG9zZTQsIHBlcnNwZWN0aXZlNCB9IGZyb20gXCIuLi9tYXRocy9tYXRyaXhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlTWF0cml4RnJvbVNjYWxlKHNjYWxlKSB7XG4gIGxldCBzY2FsZU1hdHJpeCA9IGlkZW50aXR5NCgpO1xuXG4gIHNjYWxlTWF0cml4ID0gc2NhbGU0KHNjYWxlTWF0cml4LCBzY2FsZSk7XG5cbiAgcmV0dXJuIHNjYWxlTWF0cml4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb2Zmc2V0c01hdHJpeEZyb21PZmZzZXRzKG9mZnNldHMpIHtcbiAgbGV0IG9mZnNldHNNYXRyaXggPSBpZGVudGl0eTQoKTsgLy8vXG5cbiAgb2Zmc2V0c01hdHJpeCA9IHRyYW5zbGF0ZTQob2Zmc2V0c01hdHJpeCwgb2Zmc2V0cyk7XG5cbiAgcmV0dXJuIG9mZnNldHNNYXRyaXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3NpdGlvbk1hdHJpeEZyb21Ob3RoaW5nKCkge1xuICBsZXQgcG9zaXRpb25NYXRyaXggPSBpZGVudGl0eTQoKTsgLy8vXG5cbiAgcmV0dXJuIHBvc2l0aW9uTWF0cml4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9zaXRpb25NYXRyaXhGcm9tRGlzdGFuY2UoZGlzdGFuY2UpIHtcbiAgbGV0IHBvc2l0aW9uTWF0cml4ID0gaWRlbnRpdHk0KCk7IC8vL1xuXG4gIGNvbnN0IHggPSAwLFxuICAgICAgICB5ID0gMCxcbiAgICAgICAgeiA9IC1kaXN0YW5jZTtcblxuICBwb3NpdGlvbk1hdHJpeCA9IHRyYW5zbGF0ZTQocG9zaXRpb25NYXRyaXgsIFsgeCwgeSwgeiBdKTtcblxuICByZXR1cm4gcG9zaXRpb25NYXRyaXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3NpdGlvbk1hdHJpeEZyb21Qb3NpdGlvbihwb3NpdGlvbikge1xuICBsZXQgcG9zaXRpb25NYXRyaXggPSBpZGVudGl0eTQoKTsgLy8vXG5cbiAgcG9zaXRpb25NYXRyaXggPSB0cmFuc2xhdGU0KHBvc2l0aW9uTWF0cml4LCBwb3NpdGlvbik7XG5cbiAgcmV0dXJuIHBvc2l0aW9uTWF0cml4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRpb25zTWF0cml4RnJvbUFuZ2xlcyhhbmdsZXMsIHJldmVyc2VPcmRlciA9IGZhbHNlKSB7XG4gIGxldCByb3RhdGlvbnNNYXRyaXggPSBpZGVudGl0eTQoKTsgLy8vXG5cbiAgY29uc3QgZmlyc3RBbmdsZSA9IGZpcnN0KGFuZ2xlcyksXG4gICAgICAgIHNlY29uZEFuZ2xlID0gc2Vjb25kKGFuZ2xlcyksXG4gICAgICAgIHRoaXJkQW5nbGUgPSB0aGlyZChhbmdsZXMpLFxuICAgICAgICB4QW5nbGUgPSBmaXJzdEFuZ2xlLCAgLy8vL1xuICAgICAgICB5QW5nbGUgPSBzZWNvbmRBbmdsZSwgLy8vXG4gICAgICAgIHpBbmdsZSA9IHRoaXJkQW5nbGUsICAvLy9cbiAgICAgICAgeEF4aXMgPSBbIDEsIDAsIDAgXSxcbiAgICAgICAgeUF4aXMgPSBbIDAsIDEsIDAgXSxcbiAgICAgICAgekF4aXMgPSBbIDAsIDAsIDEgXTtcblxuICBpZiAocmV2ZXJzZU9yZGVyKSB7XG4gICAgcm90YXRpb25zTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbnNNYXRyaXgsIHpBbmdsZSwgekF4aXMpO1xuICAgIHJvdGF0aW9uc01hdHJpeCA9IHJvdGF0ZTQocm90YXRpb25zTWF0cml4LCB5QW5nbGUsIHlBeGlzKTtcbiAgICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGU0KHJvdGF0aW9uc01hdHJpeCwgeEFuZ2xlLCB4QXhpcyk7XG4gIH0gZWxzZSB7XG4gICAgcm90YXRpb25zTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbnNNYXRyaXgsIHhBbmdsZSwgeEF4aXMpO1xuICAgIHJvdGF0aW9uc01hdHJpeCA9IHJvdGF0ZTQocm90YXRpb25zTWF0cml4LCB5QW5nbGUsIHlBeGlzKTtcbiAgICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGU0KHJvdGF0aW9uc01hdHJpeCwgekFuZ2xlLCB6QXhpcyk7XG4gIH1cblxuICByZXR1cm4gcm90YXRpb25zTWF0cml4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRpb25zTWF0cml4RnJvbVJvdGF0aW9ucyhyb3RhdGlvbnMpIHtcbiAgY29uc3Qgc2NhbGFyID0gREVHUkVFU19UT19SQURJQU5TX01VTFRJUExJRVIsIC8vL1xuICAgICAgICBhbmdsZXMgPSBzY2FsZTMocm90YXRpb25zLCBzY2FsYXIpLFxuICAgICAgICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGlvbnNNYXRyaXhGcm9tQW5nbGVzKGFuZ2xlcyk7XG5cbiAgcmV0dXJuIHJvdGF0aW9uc01hdHJpeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbHNNYXRyaXhGcm9tUm90YXRpb25zTWF0cml4KHJvdGF0aW9uc01hdHJpeCkge1xuICBsZXQgbm9ybWFsc01hdHJpeCA9IGludmVydDQocm90YXRpb25zTWF0cml4KTsgLy8vXG5cbiAgbm9ybWFsc01hdHJpeCA9IHRyYW5zcG9zZTQobm9ybWFsc01hdHJpeCk7XG5cbiAgcmV0dXJuIG5vcm1hbHNNYXRyaXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9qZWN0aW9uTWF0cml4RnJvbUNhbWVyYUFuZENhbnZhcyhjYW1lcmEsIGNhbnZhcykge1xuICBjb25zdCB6RmFyID0gY2FtZXJhLmdldFpGYXIoKSxcbiAgICAgICAgek5lYXIgPSBjYW1lcmEuZ2V0Wk5lYXIoKSxcbiAgICAgICAgd2lkdGggPSBjYW52YXMuZ2V0V2lkdGgoKSxcbiAgICAgICAgaGVpZ2h0ID0gY2FudmFzLmdldEhlaWdodCgpLFxuICAgICAgICBmaWVsZE9mVmlldyA9IGNhbWVyYS5nZXRGaWVsZE9mVmlldygpLFxuICAgICAgICBhc3BlY3RSYXRpbyA9IHdpZHRoIC8gaGVpZ2h0LFxuICAgICAgICBwcm9qZWN0aW9uTWF0cml4ID0gcGVyc3BlY3RpdmU0KGZpZWxkT2ZWaWV3LCBhc3BlY3RSYXRpbywgek5lYXIsIHpGYXIpO1xuXG4gIHJldHVybiBwcm9qZWN0aW9uTWF0cml4O1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJDQUFBLFVBQVk7Ozs7UUFPSSxvQkFBb0IsR0FBcEIsb0JBQW9CO1FBUXBCLHdCQUF3QixHQUF4Qix3QkFBd0I7UUFReEIseUJBQXlCLEdBQXpCLHlCQUF5QjtRQU16QiwwQkFBMEIsR0FBMUIsMEJBQTBCO1FBWTFCLDBCQUEwQixHQUExQiwwQkFBMEI7UUFRMUIseUJBQXlCLEdBQXpCLHlCQUF5QjtRQTBCekIsNEJBQTRCLEdBQTVCLDRCQUE0QjtRQVE1QixnQ0FBZ0MsR0FBaEMsZ0NBQWdDO1FBUWhDLG1DQUFtQyxHQUFuQyxtQ0FBbUM7QUF6RjVCLEdBQWlCLENBQWpCLE9BQWlCO0FBQ0gsR0FBb0IsQ0FBcEIsTUFBb0I7QUFDWCxHQUFjLENBQWQsVUFBYztBQUM4QixHQUFpQixDQUFqQixPQUFpQjtTQUUzRixvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUMzQyxHQUFHLENBQUMsV0FBVyxPQUh5RSxPQUFpQjtJQUt6RyxXQUFXLE9BTDZFLE9BQWlCLFNBS3BGLFdBQVcsRUFBRSxLQUFLO1dBRWhDLFdBQVc7QUFDcEIsQ0FBQztTQUVlLHdCQUF3QixDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pELEdBQUcsQ0FBQyxhQUFhLE9BWHVFLE9BQWlCLGNBV3hFLENBQUcsQUFBSCxFQUFHLEFBQUgsQ0FBRztJQUVwQyxhQUFhLE9BYjJFLE9BQWlCLGFBYTlFLGFBQWEsRUFBRSxPQUFPO1dBRTFDLGFBQWE7QUFDdEIsQ0FBQztTQUVlLHlCQUF5QixHQUFHLENBQUM7SUFDM0MsR0FBRyxDQUFDLGNBQWMsT0FuQnNFLE9BQWlCLGNBbUJ2RSxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7V0FFOUIsY0FBYztBQUN2QixDQUFDO1NBRWUsMEJBQTBCLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDcEQsR0FBRyxDQUFDLGNBQWMsT0F6QnNFLE9BQWlCLGNBeUJ2RSxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7SUFFckMsR0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQ0wsQ0FBQyxHQUFHLENBQUMsRUFDTCxDQUFDLElBQUksUUFBUTtJQUVuQixjQUFjLE9BL0IwRSxPQUFpQixhQStCN0UsY0FBYztRQUFJLENBQUM7UUFBRSxDQUFDO1FBQUUsQ0FBQzs7V0FFOUMsY0FBYztBQUN2QixDQUFDO1NBRWUsMEJBQTBCLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDcEQsR0FBRyxDQUFDLGNBQWMsT0FyQ3NFLE9BQWlCLGNBcUN2RSxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7SUFFckMsY0FBYyxPQXZDMEUsT0FBaUIsYUF1QzdFLGNBQWMsRUFBRSxRQUFRO1dBRTdDLGNBQWM7QUFDdkIsQ0FBQztTQUVlLHlCQUF5QixDQUFDLE1BQU0sRUFBRSxLQUFvQixFQUFFLENBQUM7UUFBdkIsWUFBWSxHQUFaLEtBQW9CLGNBQUwsS0FBSyxHQUFwQixLQUFvQjtJQUNwRSxHQUFHLENBQUMsZUFBZSxPQTdDcUUsT0FBaUIsY0E2Q3RFLENBQUcsQUFBSCxFQUFHLEFBQUgsQ0FBRztJQUV0QyxHQUFLLENBQUMsVUFBVSxPQWpEbUIsTUFBb0IsUUFpRDlCLE1BQU0sR0FDekIsV0FBVyxPQWxEa0IsTUFBb0IsU0FrRDVCLE1BQU0sR0FDM0IsVUFBVSxPQW5EbUIsTUFBb0IsUUFtRDlCLE1BQU0sR0FDekIsTUFBTSxHQUFHLFVBQVUsRUFDbkIsTUFBTSxHQUFHLFdBQVcsRUFDcEIsTUFBTSxHQUFHLFVBQVUsRUFDbkIsS0FBSztRQUFLLENBQUM7UUFBRSxDQUFDO1FBQUUsQ0FBQztPQUNqQixLQUFLO1FBQUssQ0FBQztRQUFFLENBQUM7UUFBRSxDQUFDO09BQ2pCLEtBQUs7UUFBSyxDQUFDO1FBQUUsQ0FBQztRQUFFLENBQUM7O0lBRXZCLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBQztRQUNqQixlQUFlLE9BMUR1RSxPQUFpQixVQTBEN0UsZUFBZSxFQUFFLE1BQU0sRUFBRSxLQUFLO1FBQ3hELGVBQWUsT0EzRHVFLE9BQWlCLFVBMkQ3RSxlQUFlLEVBQUUsTUFBTSxFQUFFLEtBQUs7UUFDeEQsZUFBZSxPQTVEdUUsT0FBaUIsVUE0RDdFLGVBQWUsRUFBRSxNQUFNLEVBQUUsS0FBSztJQUMxRCxDQUFDLE1BQU0sQ0FBQztRQUNOLGVBQWUsT0E5RHVFLE9BQWlCLFVBOEQ3RSxlQUFlLEVBQUUsTUFBTSxFQUFFLEtBQUs7UUFDeEQsZUFBZSxPQS9EdUUsT0FBaUIsVUErRDdFLGVBQWUsRUFBRSxNQUFNLEVBQUUsS0FBSztRQUN4RCxlQUFlLE9BaEV1RSxPQUFpQixVQWdFN0UsZUFBZSxFQUFFLE1BQU0sRUFBRSxLQUFLO0lBQzFELENBQUM7V0FFTSxlQUFlO0FBQ3hCLENBQUM7U0FFZSw0QkFBNEIsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUN2RCxHQUFLLENBQUMsTUFBTSxHQXhFZ0MsVUFBYyxnQ0F5RXBELE1BQU0sT0EzRVMsT0FBaUIsU0EyRWhCLFNBQVMsRUFBRSxNQUFNLEdBQ2pDLGVBQWUsR0FBRyx5QkFBeUIsQ0FBQyxNQUFNO1dBRWpELGVBQWU7QUFDeEIsQ0FBQztTQUVlLGdDQUFnQyxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ2pFLEdBQUcsQ0FBQyxhQUFhLE9BL0V1RSxPQUFpQixVQStFN0UsZUFBZSxFQUFHLENBQUcsQUFBSCxFQUFHLEFBQUgsQ0FBRztJQUVqRCxhQUFhLE9BakYyRSxPQUFpQixhQWlGOUUsYUFBYTtXQUVqQyxhQUFhO0FBQ3RCLENBQUM7U0FFZSxtQ0FBbUMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUM7SUFDbkUsR0FBSyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsT0FBTyxJQUNyQixLQUFLLEdBQUcsTUFBTSxDQUFDLFFBQVEsSUFDdkIsS0FBSyxHQUFHLE1BQU0sQ0FBQyxRQUFRLElBQ3ZCLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxJQUN6QixXQUFXLEdBQUcsTUFBTSxDQUFDLGNBQWMsSUFDbkMsV0FBVyxHQUFHLEtBQUssR0FBRyxNQUFNLEVBQzVCLGdCQUFnQixPQTdGa0UsT0FBaUIsZUE2Rm5FLFdBQVcsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLElBQUk7V0FFcEUsZ0JBQWdCO0FBQ3pCLENBQUMifQ==