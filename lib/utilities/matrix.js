"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.scaleMatrixFromScale = scaleMatrixFromScale;
exports.offsetsMatrixFromOffsets = offsetsMatrixFromOffsets;
exports.positionMatrixFromNothing = positionMatrixFromNothing;
exports.positionMatrixFromDistance = positionMatrixFromDistance;
exports.positionMatrixFromPosition = positionMatrixFromPosition;
exports.rotationsMatrixFromAngles = rotationsMatrixFromAngles;
exports.rotationsMatrixFromRotations = rotationsMatrixFromRotations;
exports.normalsMatrixFromRotationsMatrix = normalsMatrixFromRotationsMatrix;
exports.projectionMatrixFromWidthAndHeight = projectionMatrixFromWidthAndHeight;
var _vector = require("../maths/vector");
var _array = require("../utilities/array");
var _matrix = require("../maths/matrix");
var _constants = require("../constants");
function scaleMatrixFromScale(scale) {
    var scaleMatrix = (0, _matrix).identity4();
    scaleMatrix = (0, _matrix).scale4(scaleMatrix, scale);
    return scaleMatrix;
}
function offsetsMatrixFromOffsets(offsets) {
    var offsetsMatrix = (0, _matrix).identity4(); ///
    offsetsMatrix = (0, _matrix).translate4(offsetsMatrix, offsets);
    return offsetsMatrix;
}
function positionMatrixFromNothing() {
    var positionMatrix = (0, _matrix).identity4(); ///
    return positionMatrix;
}
function positionMatrixFromDistance(distance) {
    var positionMatrix = (0, _matrix).identity4(); ///
    var x = 0, y = 0, z = -distance;
    positionMatrix = (0, _matrix).translate4(positionMatrix, [
        x,
        y,
        z
    ]);
    return positionMatrix;
}
function positionMatrixFromPosition(position) {
    var positionMatrix = (0, _matrix).identity4(); ///
    positionMatrix = (0, _matrix).translate4(positionMatrix, position);
    return positionMatrix;
}
function rotationsMatrixFromAngles(angles, param) {
    var reverseOrder = param === void 0 ? false : param;
    var rotationsMatrix = (0, _matrix).identity4(); ///
    var firstAngle = (0, _array).first(angles), secondAngle = (0, _array).second(angles), thirdAngle = (0, _array).third(angles), xAngle = firstAngle, yAngle = secondAngle, zAngle = thirdAngle, xAxis = [
        1,
        0,
        0
    ], yAxis = [
        0,
        1,
        0
    ], zAxis = [
        0,
        0,
        1
    ];
    if (reverseOrder) {
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, zAngle, zAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, yAngle, yAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, xAngle, xAxis);
    } else {
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, xAngle, xAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, yAngle, yAxis);
        rotationsMatrix = (0, _matrix).rotate4(rotationsMatrix, zAngle, zAxis);
    }
    return rotationsMatrix;
}
function rotationsMatrixFromRotations(rotations) {
    var scalar = _constants.DEGREES_TO_RADIANS_MULTIPLIER, angles = (0, _vector).scale3(rotations, scalar), rotationsMatrix = rotationsMatrixFromAngles(angles);
    return rotationsMatrix;
}
function normalsMatrixFromRotationsMatrix(rotationsMatrix) {
    var normalsMatrix = (0, _matrix).invert4(rotationsMatrix); ///
    normalsMatrix = (0, _matrix).transpose4(normalsMatrix);
    return normalsMatrix;
}
function projectionMatrixFromWidthAndHeight(width, height) {
    var zFar = _constants.Z_FAR, zNear = _constants.Z_NEAR, aspectRatio = width / height, fieldOfView = _constants.FORTY_FIVE_DEGREES_FIELD_OF_VIEW, projectionMatrix = (0, _matrix).perspective4(fieldOfView, aspectRatio, zNear, zFar);
    return projectionMatrix;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWF0cml4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBzY2FsZTMgfSBmcm9tIFwiLi4vbWF0aHMvdmVjdG9yXCI7XG5pbXBvcnQgeyBmaXJzdCwgc2Vjb25kLCB0aGlyZCB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXJyYXlcIjtcbmltcG9ydCB7IGlkZW50aXR5NCwgc2NhbGU0LCBpbnZlcnQ0LCByb3RhdGU0LCB0cmFuc2xhdGU0LCB0cmFuc3Bvc2U0LCBwZXJzcGVjdGl2ZTQgfSBmcm9tIFwiLi4vbWF0aHMvbWF0cml4XCI7XG5pbXBvcnQgeyBaX0ZBUiwgWl9ORUFSLCBERUdSRUVTX1RPX1JBRElBTlNfTVVMVElQTElFUiwgRk9SVFlfRklWRV9ERUdSRUVTX0ZJRUxEX09GX1ZJRVcgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZU1hdHJpeEZyb21TY2FsZShzY2FsZSkge1xuICBsZXQgc2NhbGVNYXRyaXggPSBpZGVudGl0eTQoKTtcblxuICBzY2FsZU1hdHJpeCA9IHNjYWxlNChzY2FsZU1hdHJpeCwgc2NhbGUpO1xuXG4gIHJldHVybiBzY2FsZU1hdHJpeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9mZnNldHNNYXRyaXhGcm9tT2Zmc2V0cyhvZmZzZXRzKSB7XG4gIGxldCBvZmZzZXRzTWF0cml4ID0gaWRlbnRpdHk0KCk7IC8vL1xuXG4gIG9mZnNldHNNYXRyaXggPSB0cmFuc2xhdGU0KG9mZnNldHNNYXRyaXgsIG9mZnNldHMpO1xuXG4gIHJldHVybiBvZmZzZXRzTWF0cml4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9zaXRpb25NYXRyaXhGcm9tTm90aGluZygpIHtcbiAgbGV0IHBvc2l0aW9uTWF0cml4ID0gaWRlbnRpdHk0KCk7IC8vL1xuXG4gIHJldHVybiBwb3NpdGlvbk1hdHJpeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvc2l0aW9uTWF0cml4RnJvbURpc3RhbmNlKGRpc3RhbmNlKSB7XG4gIGxldCBwb3NpdGlvbk1hdHJpeCA9IGlkZW50aXR5NCgpOyAvLy9cblxuICBjb25zdCB4ID0gMCxcbiAgICAgICAgeSA9IDAsXG4gICAgICAgIHogPSAtZGlzdGFuY2U7XG5cbiAgcG9zaXRpb25NYXRyaXggPSB0cmFuc2xhdGU0KHBvc2l0aW9uTWF0cml4LCBbIHgsIHksIHogXSk7XG5cbiAgcmV0dXJuIHBvc2l0aW9uTWF0cml4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9zaXRpb25NYXRyaXhGcm9tUG9zaXRpb24ocG9zaXRpb24pIHtcbiAgbGV0IHBvc2l0aW9uTWF0cml4ID0gaWRlbnRpdHk0KCk7IC8vL1xuXG4gIHBvc2l0aW9uTWF0cml4ID0gdHJhbnNsYXRlNChwb3NpdGlvbk1hdHJpeCwgcG9zaXRpb24pO1xuXG4gIHJldHVybiBwb3NpdGlvbk1hdHJpeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0aW9uc01hdHJpeEZyb21BbmdsZXMoYW5nbGVzLCByZXZlcnNlT3JkZXIgPSBmYWxzZSkge1xuICBsZXQgcm90YXRpb25zTWF0cml4ID0gaWRlbnRpdHk0KCk7IC8vL1xuXG4gIGNvbnN0IGZpcnN0QW5nbGUgPSBmaXJzdChhbmdsZXMpLFxuICAgICAgICBzZWNvbmRBbmdsZSA9IHNlY29uZChhbmdsZXMpLFxuICAgICAgICB0aGlyZEFuZ2xlID0gdGhpcmQoYW5nbGVzKSxcbiAgICAgICAgeEFuZ2xlID0gZmlyc3RBbmdsZSwgIC8vLy9cbiAgICAgICAgeUFuZ2xlID0gc2Vjb25kQW5nbGUsIC8vL1xuICAgICAgICB6QW5nbGUgPSB0aGlyZEFuZ2xlLCAgLy8vXG4gICAgICAgIHhBeGlzID0gWyAxLCAwLCAwIF0sXG4gICAgICAgIHlBeGlzID0gWyAwLCAxLCAwIF0sXG4gICAgICAgIHpBeGlzID0gWyAwLCAwLCAxIF07XG5cbiAgaWYgKHJldmVyc2VPcmRlcikge1xuICAgIHJvdGF0aW9uc01hdHJpeCA9IHJvdGF0ZTQocm90YXRpb25zTWF0cml4LCB6QW5nbGUsIHpBeGlzKTtcbiAgICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGU0KHJvdGF0aW9uc01hdHJpeCwgeUFuZ2xlLCB5QXhpcyk7XG4gICAgcm90YXRpb25zTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbnNNYXRyaXgsIHhBbmdsZSwgeEF4aXMpO1xuICB9IGVsc2Uge1xuICAgIHJvdGF0aW9uc01hdHJpeCA9IHJvdGF0ZTQocm90YXRpb25zTWF0cml4LCB4QW5nbGUsIHhBeGlzKTtcbiAgICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGU0KHJvdGF0aW9uc01hdHJpeCwgeUFuZ2xlLCB5QXhpcyk7XG4gICAgcm90YXRpb25zTWF0cml4ID0gcm90YXRlNChyb3RhdGlvbnNNYXRyaXgsIHpBbmdsZSwgekF4aXMpO1xuICB9XG5cbiAgcmV0dXJuIHJvdGF0aW9uc01hdHJpeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0aW9uc01hdHJpeEZyb21Sb3RhdGlvbnMocm90YXRpb25zKSB7XG4gIGNvbnN0IHNjYWxhciA9IERFR1JFRVNfVE9fUkFESUFOU19NVUxUSVBMSUVSLFxuICAgICAgICBhbmdsZXMgPSBzY2FsZTMocm90YXRpb25zLCBzY2FsYXIpLFxuICAgICAgICByb3RhdGlvbnNNYXRyaXggPSByb3RhdGlvbnNNYXRyaXhGcm9tQW5nbGVzKGFuZ2xlcyk7XG5cbiAgcmV0dXJuIHJvdGF0aW9uc01hdHJpeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbHNNYXRyaXhGcm9tUm90YXRpb25zTWF0cml4KHJvdGF0aW9uc01hdHJpeCkge1xuICBsZXQgbm9ybWFsc01hdHJpeCA9IGludmVydDQocm90YXRpb25zTWF0cml4KTsgLy8vXG5cbiAgbm9ybWFsc01hdHJpeCA9IHRyYW5zcG9zZTQobm9ybWFsc01hdHJpeCk7XG5cbiAgcmV0dXJuIG5vcm1hbHNNYXRyaXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9qZWN0aW9uTWF0cml4RnJvbVdpZHRoQW5kSGVpZ2h0KHdpZHRoLCBoZWlnaHQpIHtcbiAgY29uc3QgekZhciA9IFpfRkFSLCAvLy9cbiAgICAgICAgek5lYXIgPSBaX05FQVIsIC8vL1xuICAgICAgICBhc3BlY3RSYXRpbyA9IHdpZHRoIC8gaGVpZ2h0LFxuICAgICAgICBmaWVsZE9mVmlldyA9IEZPUlRZX0ZJVkVfREVHUkVFU19GSUVMRF9PRl9WSUVXLCAgLy8vXG4gICAgICAgIHByb2plY3Rpb25NYXRyaXggPSBwZXJzcGVjdGl2ZTQoZmllbGRPZlZpZXcsIGFzcGVjdFJhdGlvLCB6TmVhciwgekZhcik7XG5cbiAgcmV0dXJuIHByb2plY3Rpb25NYXRyaXg7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkNBQUEsVUFBWTs7OztRQU9JLG9CQUFvQixHQUFwQixvQkFBb0I7UUFRcEIsd0JBQXdCLEdBQXhCLHdCQUF3QjtRQVF4Qix5QkFBeUIsR0FBekIseUJBQXlCO1FBTXpCLDBCQUEwQixHQUExQiwwQkFBMEI7UUFZMUIsMEJBQTBCLEdBQTFCLDBCQUEwQjtRQVExQix5QkFBeUIsR0FBekIseUJBQXlCO1FBMEJ6Qiw0QkFBNEIsR0FBNUIsNEJBQTRCO1FBUTVCLGdDQUFnQyxHQUFoQyxnQ0FBZ0M7UUFRaEMsa0NBQWtDLEdBQWxDLGtDQUFrQztBQXpGM0IsR0FBaUIsQ0FBakIsT0FBaUI7QUFDSCxHQUFvQixDQUFwQixNQUFvQjtBQUNpQyxHQUFpQixDQUFqQixPQUFpQjtBQUNaLEdBQWMsQ0FBZCxVQUFjO1NBRTdGLG9CQUFvQixDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzNDLEdBQUcsQ0FBQyxXQUFXLE9BSnlFLE9BQWlCO0lBTXpHLFdBQVcsT0FONkUsT0FBaUIsU0FNcEYsV0FBVyxFQUFFLEtBQUs7V0FFaEMsV0FBVztBQUNwQixDQUFDO1NBRWUsd0JBQXdCLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDakQsR0FBRyxDQUFDLGFBQWEsT0FadUUsT0FBaUIsY0FZeEUsQ0FBRyxBQUFILEVBQUcsQUFBSCxD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