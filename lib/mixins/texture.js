"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _constants = require("../constants");
function createTexture(image, index, repeat) {
    var _context = this.context, RGBA = _context.RGBA, LINEAR = _context.LINEAR, UNSIGNED_BYTE = _context.UNSIGNED_BYTE, TEXTURE0 = _context.TEXTURE0, TEXTURE_2D = _context.TEXTURE_2D, TEXTURE_WRAP_S = _context.TEXTURE_WRAP_S, TEXTURE_WRAP_T = _context.TEXTURE_WRAP_T, UNPACK_FLIP_Y_WEBGL = _context.UNPACK_FLIP_Y_WEBGL, CLAMP_TO_EDGE = _context.CLAMP_TO_EDGE, NEAREST = _context.NEAREST, REPEAT = _context.REPEAT, TEXTURE_MIN_FILTER = _context.TEXTURE_MIN_FILTER, target = TEXTURE0 + index, level = 0, internalFormat = RGBA, format = RGBA, type = UNSIGNED_BYTE, texture = this.context.createTexture();
    this.context.activeTexture(target);
    this.context.bindTexture(TEXTURE_2D, texture);
    this.context.pixelStorei(UNPACK_FLIP_Y_WEBGL, true);
    this.context.texImage2D(TEXTURE_2D, level, internalFormat, format, type, image);
    if (repeat) {
        this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, REPEAT);
        this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, REPEAT);
    } else {
        this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, CLAMP_TO_EDGE);
        this.context.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, CLAMP_TO_EDGE);
    }
    this.context.texParameteri(TEXTURE_2D, TEXTURE_MIN_FILTER, LINEAR);
    return texture;
}
function enableAnisotropicFiltering() {
    var extension = this.context.getExtension(_constants.EXT_TEXTURE_FILTER_ANISOTROPIC) || this.context.getExtension(_constants.MOZ_EXT_TEXTURE_FILTER_ANISOTROPIC) || this.context.getExtension(_constants.WEBKIT_EXT_TEXTURE_FILTER_ANISOTROPIC);
    if (extension) {
        var _context = this.context, TEXTURE_2D = _context.TEXTURE_2D, MAX_TEXTURE_MAX_ANISOTROPY_EXT = extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT, TEXTURE_MAX_ANISOTROPY_EXT = extension.TEXTURE_MAX_ANISOTROPY_EXT, maximum = this.context.getParameter(MAX_TEXTURE_MAX_ANISOTROPY_EXT);
        this.context.texParameterf(TEXTURE_2D, TEXTURE_MAX_ANISOTROPY_EXT, maximum);
    }
}
var textureMixins = {
    createTexture: createTexture,
    enableAnisotropicFiltering: enableAnisotropicFiltering
};
var _default = textureMixins;
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvdGV4dHVyZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgRVhUX1RFWFRVUkVfRklMVEVSX0FOSVNPVFJPUElDLFxuICAgICAgICAgTU9aX0VYVF9URVhUVVJFX0ZJTFRFUl9BTklTT1RST1BJQyxcbiAgICAgICAgIFdFQktJVF9FWFRfVEVYVFVSRV9GSUxURVJfQU5JU09UUk9QSUMgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHR1cmUoaW1hZ2UsIGluZGV4LCByZXBlYXQpIHtcblx0Y29uc3QgeyBSR0JBLCBMSU5FQVIsIFVOU0lHTkVEX0JZVEUsIFRFWFRVUkUwLCBURVhUVVJFXzJELCBURVhUVVJFX1dSQVBfUywgVEVYVFVSRV9XUkFQX1QsIFVOUEFDS19GTElQX1lfV0VCR0wsIENMQU1QX1RPX0VER0UsIE5FQVJFU1QsIFJFUEVBVCwgVEVYVFVSRV9NSU5fRklMVEVSIH0gPSB0aGlzLmNvbnRleHQsXG5cdFx0XHRcdHRhcmdldCA9IFRFWFRVUkUwICsgaW5kZXgsXG5cdFx0XHRcdGxldmVsID0gMCxcblx0XHRcdFx0aW50ZXJuYWxGb3JtYXQgPSBSR0JBLFxuXHRcdFx0XHRmb3JtYXQgPSBSR0JBLFxuXHRcdFx0XHR0eXBlID0gVU5TSUdORURfQllURSxcblx0XHRcdFx0dGV4dHVyZSA9IHRoaXMuY29udGV4dC5jcmVhdGVUZXh0dXJlKCk7XG5cbiAgdGhpcy5jb250ZXh0LmFjdGl2ZVRleHR1cmUodGFyZ2V0KTtcblxuICB0aGlzLmNvbnRleHQuYmluZFRleHR1cmUoVEVYVFVSRV8yRCwgdGV4dHVyZSk7XG5cbiAgdGhpcy5jb250ZXh0LnBpeGVsU3RvcmVpKFVOUEFDS19GTElQX1lfV0VCR0wsIHRydWUpO1xuXG4gIHRoaXMuY29udGV4dC50ZXhJbWFnZTJEKFRFWFRVUkVfMkQsIGxldmVsLCBpbnRlcm5hbEZvcm1hdCwgZm9ybWF0LCB0eXBlLCBpbWFnZSk7XG5cbiAgaWYgKHJlcGVhdCkge1xuICAgIHRoaXMuY29udGV4dC50ZXhQYXJhbWV0ZXJpKFRFWFRVUkVfMkQsIFRFWFRVUkVfV1JBUF9TLCBSRVBFQVQpO1xuICAgIHRoaXMuY29udGV4dC50ZXhQYXJhbWV0ZXJpKFRFWFRVUkVfMkQsIFRFWFRVUkVfV1JBUF9ULCBSRVBFQVQpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuY29udGV4dC50ZXhQYXJhbWV0ZXJpKFRFWFRVUkVfMkQsIFRFWFRVUkVfV1JBUF9TLCBDTEFNUF9UT19FREdFKTtcbiAgICB0aGlzLmNvbnRleHQudGV4UGFyYW1ldGVyaShURVhUVVJFXzJELCBURVhUVVJFX1dSQVBfVCwgQ0xBTVBfVE9fRURHRSk7XG4gIH1cblxuXHR0aGlzLmNvbnRleHQudGV4UGFyYW1ldGVyaShURVhUVVJFXzJELCBURVhUVVJFX01JTl9GSUxURVIsIExJTkVBUik7XG5cblx0cmV0dXJuIHRleHR1cmU7XG59XG5cbmZ1bmN0aW9uIGVuYWJsZUFuaXNvdHJvcGljRmlsdGVyaW5nKCkge1xuICBjb25zdCBleHRlbnNpb24gPSAoXG4gICAgdGhpcy5jb250ZXh0LmdldEV4dGVuc2lvbihFWFRfVEVYVFVSRV9GSUxURVJfQU5JU09UUk9QSUMpIHx8XG4gICAgdGhpcy5jb250ZXh0LmdldEV4dGVuc2lvbihNT1pfRVhUX1RFWFRVUkVfRklMVEVSX0FOSVNPVFJPUElDKSB8fFxuICAgIHRoaXMuY29udGV4dC5nZXRFeHRlbnNpb24oV0VCS0lUX0VYVF9URVhUVVJFX0ZJTFRFUl9BTklTT1RST1BJQylcbiAgKTtcblxuICBpZiAoZXh0ZW5zaW9uKSB7XG4gICAgY29uc3QgeyBURVhUVVJFXzJEIH0gPSB0aGlzLmNvbnRleHQsXG4gICAgICAgICAgeyBNQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQsIFRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIH0gPSBleHRlbnNpb24sXG4gICAgICAgICAgbWF4aW11bSA9IHRoaXMuY29udGV4dC5nZXRQYXJhbWV0ZXIoTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUKTtcblxuICAgIHRoaXMuY29udGV4dC50ZXhQYXJhbWV0ZXJmKFRFWFRVUkVfMkQsIFRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhULCBtYXhpbXVtKTtcbiAgfVxufVxuXG5jb25zdCB0ZXh0dXJlTWl4aW5zID0ge1xuICBjcmVhdGVUZXh0dXJlLFxuICBlbmFibGVBbmlzb3Ryb3BpY0ZpbHRlcmluZ1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdGV4dHVyZU1peGlucztcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQ0FBQSxVQUFZOzs7OztBQUkwQyxHQUFjLENBQWQsVUFBYztTQUUzRCxhQUFhLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQztJQUM3QyxHQUFLLENBQWtLLFFBQVksUUFBUCxPQUFPLEVBQTNLLElBQUksR0FBMkosUUFBWSxDQUEzSyxJQUFJLEVBQUUsTUFBTSxHQUFtSixRQUFZLENBQXJLLE1BQU0sRUFBRSxhQUFhLEdBQW9JLFFBQVksQ0FBN0osYUFBYSxFQUFFLFFBQVEsR0FBMEgsUUFBWSxDQUE5SSxRQUFRLEVBQUUsVUFBVSxHQUE4RyxRQUFZLENBQXBJLFVBQVUsRUFBRSxjQUFjLEdBQThGLFFBQVksQ0FBeEgsY0FBYyxFQUFFLGNBQWMsR0FBOEUsUUFBWSxDQUF4RyxjQUFjLEVBQUUsbUJBQW1CLEdBQXlELFFBQVksQ0FBeEYsbUJBQW1CLEVBQUUsYUFBYSxHQUEwQyxRQUFZLENBQW5FLGFBQWEsRUFBRSxPQUFPLEdBQWlDLFFBQVksQ0FBcEQsT0FBTyxFQUFFLE1BQU0sR0FBeUIsUUFBWSxDQUEzQyxNQUFNLEVBQUUsa0JBQWtCLEdBQUssUUFBWSxDQUFuQyxrQkFBa0IsRUFDL0osTUFBTSxHQUFHLFFBQVEsR0FBRyxLQUFLLEVBQ3pCLEtBQUssR0FBRyxDQUFDLEVBQ1QsY0FBYyxHQUFHLElBQUksRUFDckIsTUFBTSxHQUFHLElBQUksRUFDYixJQUFJLEdBQUcsYUFBYSxFQUNwQixPQUFPLFFBQVEsT0FBTyxDQUFDLGFBQWE7U0FFakMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxNQUFNO1NBRTVCLE9BQU8sQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLE9BQU87U0FFdkMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJO1NBRTdDLE9BQU8sQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLO0lBRTlFLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQzthQUNOLE9BQU8sQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLGNBQWMsRUFBRSxNQUFNO2FBQ3hELE9BQU8sQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLGNBQWMsRUFBRSxNQUFNO0lBQy9ELENBQUMsTUFBTSxDQUFDO2FBQ0QsT0FBTyxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsY0FBYyxFQUFFLGFBQWE7YUFDL0QsT0FBTyxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsY0FBYyxFQUFFLGFBQWE7SUFDdEUsQ0FBQztTQUVHLE9BQU8sQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLGtCQUFrQixFQUFFLE1BQU07V0FFMUQsT0FBTztBQUNmLENBQUM7U0FFUSwwQkFBMEIsR0FBRyxDQUFDO0lBQ3JDLEdBQUssQ0FBQyxTQUFTLFFBQ1IsT0FBTyxDQUFDLFlBQVksQ0FsQ3lCLFVBQWMseUNBbUMzRCxPQUFPLENBQUMsWUFBWSxDQW5DeUIsVUFBYyw2Q0FvQzNELE9BQU8sQ0FBQyxZQUFZLENBcEN5QixVQUFjO0lBdUNsRSxFQUFFLEVBQUUsU0FBUyxFQUFFLENBQUM7UUFDZCxHQUFLLENBQWtCLFFBQVksUUFBUCxPQUFPLEVBQTNCLFVBQVUsR0FBSyxRQUFZLENBQTNCLFVBQVUsRUFDViw4QkFBOEIsR0FBaUMsU0FBUyxDQUF4RSw4QkFBOEIsRUFBRSwwQkFBMEIsR0FBSyxTQUFTLENBQXhDLDBCQUEwQixFQUM1RCxPQUFPLFFBQVEsT0FBTyxDQUFDLFlBQVksQ0FBQyw4QkFBOEI7YUFFbkUsT0FBTyxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsMEJBQTBCLEVBQUUsT0FBTztJQUM1RSxDQUFDO0FBQ0gsQ0FBQztBQUVELEdBQUssQ0FBQyxhQUFhO0lBQ2pCLGFBQWEsRUFBYixhQUFhO0lBQ2IsMEJBQTBCLEVBQTFCLDBCQUEwQjs7ZUFHYixhQUFhIn0=