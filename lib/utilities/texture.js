"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.cloneTextureCoordinateTuples = cloneTextureCoordinateTuples;
exports.calculateMappedTextureCoordinateTuples = calculateMappedTextureCoordinateTuples;
exports.calculateAdjustedTextureCoordinateTuples = calculateAdjustedTextureCoordinateTuples;
var _vertices = require("../utilities/vertices");
var _matrix = require("../maths/matrix");
var _array = require("../utilities/array");
var _quaternion = require("../utilities/quaternion");
var _vector = require("../maths/vector");
function cloneTextureCoordinateTuples(textureCoordinateTuples) {
    textureCoordinateTuples = textureCoordinateTuples.map(function(textureCoordinateTuple) {
        return textureCoordinateTuple.slice();
    }); ///
    return textureCoordinateTuples;
}
function calculateMappedTextureCoordinateTuples(textureCoordinateTuples, extent) {
    var left = extent.left, bottom = extent.bottom, width = extent.width, height = extent.height, mappedTextureCoordinateTuples = textureCoordinateTuples.map(function(textureCoordinateTuple) {
        return (0, _vector).add2((0, _vector).multiply2(textureCoordinateTuple, [
            width,
            height
        ]), [
            left,
            bottom
        ]);
    }); ///
    return mappedTextureCoordinateTuples;
}
function calculateAdjustedTextureCoordinateTuples(vertices, normal, parentVertices, textureCoordinateTuples) {
    var arbitraryRotationQuaternion = (0, _quaternion).calculateArbitraryRotationQuaternion(normal), rotationQuaternion = arbitraryRotationQuaternion; ///
    var rotatedVertices = (0, _vertices).rotateVertices(vertices, rotationQuaternion);
    parentVertices = (0, _vertices).rotateVertices(parentVertices, rotationQuaternion);
    vertices = rotatedVertices; ///
    var firstVertex = (0, _array).first(vertices), secondVertex = (0, _array).second(vertices), thirdVertex = (0, _array).third(vertices), firstParentVertex = (0, _array).first(parentVertices), secondParentVertex = (0, _array).second(parentVertices), thirdParentVertex = (0, _array).third(parentVertices), firstTextureCoordinateTuple = (0, _array).first(textureCoordinateTuples), secondTextureCoordinateTuple = (0, _array).second(textureCoordinateTuples), thirdTextureCoordinateTuple = (0, _array).third(textureCoordinateTuples), firstVertexPosition = firstVertex.getPosition(), secondVertexPosition = secondVertex.getPosition(), thirdVertexPosition = thirdVertex.getPosition(), firstParentVertexPosition = firstParentVertex.getPosition(), secondParentVertexPosition = secondParentVertex.getPosition(), thirdParentVertexPosition = thirdParentVertex.getPosition(), R1x = firstVertexPosition[0], R1y = firstVertexPosition[1], R2x = secondVertexPosition[0], R2y = secondVertexPosition[1], R3x = thirdVertexPosition[0], R3y = thirdVertexPosition[1], P1x = firstParentVertexPosition[0], P2x = secondParentVertexPosition[0], P3x = thirdParentVertexPosition[0], P1y = firstParentVertexPosition[1], P2y = secondParentVertexPosition[1], P3y = thirdParentVertexPosition[1], P1u = firstTextureCoordinateTuple[0], P1v = firstTextureCoordinateTuple[1], P2u = secondTextureCoordinateTuple[0], P2v = secondTextureCoordinateTuple[1], P3u = thirdTextureCoordinateTuple[0], P3v = thirdTextureCoordinateTuple[1], textureCoordinatesMatrix = (0, _matrix).invert3([
        1,
        1,
        1,
        P1u,
        P2u,
        P3u,
        P1v,
        P2v,
        P3v
    ]), firstTransformedParentVerticesComponent = (0, _vector).transform3([
        P1x,
        P2x,
        P3x
    ], textureCoordinatesMatrix), secondTransformedParentVerticesComponent = (0, _vector).transform3([
        P1y,
        P2y,
        P3y
    ], textureCoordinatesMatrix), Ox = firstTransformedParentVerticesComponent[0], Ux = firstTransformedParentVerticesComponent[1], Vx = firstTransformedParentVerticesComponent[2], Oy = secondTransformedParentVerticesComponent[0], Uy = secondTransformedParentVerticesComponent[1], Vy = secondTransformedParentVerticesComponent[2], transformedParentVerticesMatrix = (0, _matrix).invert2([
        Ux,
        Uy,
        Vx,
        Vy
    ]), firstAdjustedTextureCoordinate = (0, _vector).transform2([
        R1x - Ox,
        R1y - Oy
    ], transformedParentVerticesMatrix), secondAdjustedTextureCoordinate = (0, _vector).transform2([
        R2x - Ox,
        R2y - Oy
    ], transformedParentVerticesMatrix), thirdAdjustedTextureCoordinate = (0, _vector).transform2([
        R3x - Ox,
        R3y - Oy
    ], transformedParentVerticesMatrix), adjustedTextureCoordinateTuple = [
        firstAdjustedTextureCoordinate,
        secondAdjustedTextureCoordinate,
        thirdAdjustedTextureCoordinate, 
    ];
    return adjustedTextureCoordinateTuple;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvdGV4dHVyZS5qcyJdLCJuYW1lcyI6WyJyb3RhdGVWZXJ0aWNlcyIsImludmVydDIiLCJpbnZlcnQzIiwiZmlyc3QiLCJzZWNvbmQiLCJ0aGlyZCIsImNhbGN1bGF0ZUFyYml0cmFyeVJvdGF0aW9uUXVhdGVybmlvbiIsImFkZDIiLCJtdWx0aXBseTIiLCJ0cmFuc2Zvcm0yIiwidHJhbnNmb3JtMyIsImNsb25lVGV4dHVyZUNvb3JkaW5hdGVUdXBsZXMiLCJ0ZXh0dXJlQ29vcmRpbmF0ZVR1cGxlcyIsIm1hcCIsInRleHR1cmVDb29yZGluYXRlVHVwbGUiLCJzbGljZSIsImNhbGN1bGF0ZU1hcHBlZFRleHR1cmVDb29yZGluYXRlVHVwbGVzIiwiZXh0ZW50IiwibGVmdCIsImJvdHRvbSIsIndpZHRoIiwiaGVpZ2h0IiwibWFwcGVkVGV4dHVyZUNvb3JkaW5hdGVUdXBsZXMiLCJjYWxjdWxhdGVBZGp1c3RlZFRleHR1cmVDb29yZGluYXRlVHVwbGVzIiwidmVydGljZXMiLCJub3JtYWwiLCJwYXJlbnRWZXJ0aWNlcyIsImFyYml0cmFyeVJvdGF0aW9uUXVhdGVybmlvbiIsInJvdGF0aW9uUXVhdGVybmlvbiIsInJvdGF0ZWRWZXJ0aWNlcyIsImZpcnN0VmVydGV4Iiwic2Vjb25kVmVydGV4IiwidGhpcmRWZXJ0ZXgiLCJmaXJzdFBhcmVudFZlcnRleCIsInNlY29uZFBhcmVudFZlcnRleCIsInRoaXJkUGFyZW50VmVydGV4IiwiZmlyc3RUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlIiwic2Vjb25kVGV4dHVyZUNvb3JkaW5hdGVUdXBsZSIsInRoaXJkVGV4dHVyZUNvb3JkaW5hdGVUdXBsZSIsImZpcnN0VmVydGV4UG9zaXRpb24iLCJnZXRQb3NpdGlvbiIsInNlY29uZFZlcnRleFBvc2l0aW9uIiwidGhpcmRWZXJ0ZXhQb3NpdGlvbiIsImZpcnN0UGFyZW50VmVydGV4UG9zaXRpb24iLCJzZWNvbmRQYXJlbnRWZXJ0ZXhQb3NpdGlvbiIsInRoaXJkUGFyZW50VmVydGV4UG9zaXRpb24iLCJSMXgiLCJSMXkiLCJSMngiLCJSMnkiLCJSM3giLCJSM3kiLCJQMXgiLCJQMngiLCJQM3giLCJQMXkiLCJQMnkiLCJQM3kiLCJQMXUiLCJQMXYiLCJQMnUiLCJQMnYiLCJQM3UiLCJQM3YiLCJ0ZXh0dXJlQ29vcmRpbmF0ZXNNYXRyaXgiLCJmaXJzdFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnQiLCJzZWNvbmRUcmFuc2Zvcm1lZFBhcmVudFZlcnRpY2VzQ29tcG9uZW50IiwiT3giLCJVeCIsIlZ4IiwiT3kiLCJVeSIsIlZ5IiwidHJhbnNmb3JtZWRQYXJlbnRWZXJ0aWNlc01hdHJpeCIsImZpcnN0QWRqdXN0ZWRUZXh0dXJlQ29vcmRpbmF0ZSIsInNlY29uZEFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGUiLCJ0aGlyZEFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGUiLCJhZGp1c3RlZFRleHR1cmVDb29yZGluYXRlVHVwbGUiXSwibWFwcGluZ3MiOiJBQUFBLENBQVk7Ozs7UUFRSSw0QkFBNEIsR0FBNUIsNEJBQTRCO1FBTTVCLHNDQUFzQyxHQUF0QyxzQ0FBc0M7UUFPdEMsd0NBQXdDLEdBQXhDLHdDQUF3QztBQW5CekIsR0FBdUIsQ0FBdkIsU0FBdUI7QUFDckIsR0FBaUIsQ0FBakIsT0FBaUI7QUFDYixHQUFvQixDQUFwQixNQUFvQjtBQUNKLEdBQXlCLENBQXpCLFdBQXlCO0FBQ3RCLEdBQWlCLENBQWpCLE9BQWlCO1NBRXpELDRCQUE0QixDQUFDLHVCQUF1QixFQUFFLENBQUM7SUFDckUsdUJBQXVCLEdBQUcsdUJBQXVCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBUCxzQkFBc0I7UUFBSyxNQUFNLENBQU4sc0JBQXNCLENBQUMsS0FBSztPQUFNLENBQUcsQUFBSCxFQUFHLEFBQUgsQ0FBRztJQUV2SCxNQUFNLENBQUMsdUJBQXVCO0FBQ2hDLENBQUM7U0FFZSxzQ0FBc0MsQ0FBQyx1QkFBdUIsRUFBRSxNQUFNLEVBQUUs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QUcsRUFBRTtRQUFFLEdBQUcsR0FBRyxFQUFFO0lBQUMsQ0FBQyxFQUFFLCtCQUErQixHQUNuRyw4QkFBOEIsR0FBRyxDQUFDO1FBQ2hDLDhCQUE4QjtRQUM5QiwrQkFBK0I7UUFDL0IsOEJBQThCO0lBQ2hDLENBQUM7SUFFUCxNQUFNLENBQUMsOEJBQThCO0FBQ3ZDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcm90YXRlVmVydGljZXMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3ZlcnRpY2VzXCI7XG5pbXBvcnQgeyBpbnZlcnQyLCBpbnZlcnQzIH0gZnJvbSBcIi4uL21hdGhzL21hdHJpeFwiO1xuaW1wb3J0IHsgZmlyc3QsIHNlY29uZCwgdGhpcmQgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FycmF5XCI7XG5pbXBvcnQgeyBjYWxjdWxhdGVBcmJpdHJhcnlSb3RhdGlvblF1YXRlcm5pb24gfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1YXRlcm5pb25cIjtcbmltcG9ydCB7IGFkZDIsIG11bHRpcGx5MiwgdHJhbnNmb3JtMiwgdHJhbnNmb3JtMyB9IGZyb20gXCIuLi9tYXRocy92ZWN0b3JcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lVGV4dHVyZUNvb3JkaW5hdGVUdXBsZXModGV4dHVyZUNvb3JkaW5hdGVUdXBsZXMpIHtcbiAgdGV4dHVyZUNvb3JkaW5hdGVUdXBsZXMgPSB0ZXh0dXJlQ29vcmRpbmF0ZVR1cGxlcy5tYXAoKHRleHR1cmVDb29yZGluYXRlVHVwbGUpID0+IHRleHR1cmVDb29yZGluYXRlVHVwbGUuc2xpY2UoKSk7ICAvLy9cblxuICByZXR1cm4gdGV4dHVyZUNvb3JkaW5hdGVUdXBsZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVNYXBwZWRUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlcyh0ZXh0dXJlQ29vcmRpbmF0ZVR1cGxlcywgZXh0ZW50KSB7XG4gIGNvbnN0IHsgbGVmdCwgYm90dG9tLCB3aWR0aCwgaGVpZ2h0IH0gPSBleHRlbnQsXG4gICAgICAgIG1hcHBlZFRleHR1cmVDb29yZGluYXRlVHVwbGVzID0gdGV4dHVyZUNvb3JkaW5hdGVUdXBsZXMubWFwKCh0ZXh0dXJlQ29vcmRpbmF0ZVR1cGxlKSA9PiBhZGQyKG11bHRpcGx5Mih0ZXh0dXJlQ29vcmRpbmF0ZVR1cGxlLCBbIHdpZHRoLCBoZWlnaHQgXSApLCBbIGxlZnQsIGJvdHRvbSBdKSk7IC8vL1xuXG4gIHJldHVybiBtYXBwZWRUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZUFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGVUdXBsZXModmVydGljZXMsIG5vcm1hbCwgcGFyZW50VmVydGljZXMsIHRleHR1cmVDb29yZGluYXRlVHVwbGVzKSB7XG4gIGNvbnN0IGFyYml0cmFyeVJvdGF0aW9uUXVhdGVybmlvbiA9IGNhbGN1bGF0ZUFyYml0cmFyeVJvdGF0aW9uUXVhdGVybmlvbihub3JtYWwpLFxuICAgICAgICByb3RhdGlvblF1YXRlcm5pb24gPSBhcmJpdHJhcnlSb3RhdGlvblF1YXRlcm5pb247IC8vL1xuXG4gIGNvbnN0IHJvdGF0ZWRWZXJ0aWNlcyA9IHJvdGF0ZVZlcnRpY2VzKHZlcnRpY2VzLCByb3RhdGlvblF1YXRlcm5pb24pO1xuXG4gIHBhcmVudFZlcnRpY2VzID0gcm90YXRlVmVydGljZXMocGFyZW50VmVydGljZXMsIHJvdGF0aW9uUXVhdGVybmlvbik7XG5cbiAgdmVydGljZXMgPSByb3RhdGVkVmVydGljZXM7ICAvLy9cblxuICBjb25zdCBmaXJzdFZlcnRleCA9IGZpcnN0KHZlcnRpY2VzKSxcbiAgICAgICAgc2Vjb25kVmVydGV4ID0gc2Vjb25kKHZlcnRpY2VzKSxcbiAgICAgICAgdGhpcmRWZXJ0ZXggPSB0aGlyZCh2ZXJ0aWNlcyksXG4gICAgICAgIGZpcnN0UGFyZW50VmVydGV4ID0gZmlyc3QocGFyZW50VmVydGljZXMpLFxuICAgICAgICBzZWNvbmRQYXJlbnRWZXJ0ZXggPSBzZWNvbmQocGFyZW50VmVydGljZXMpLFxuICAgICAgICB0aGlyZFBhcmVudFZlcnRleCA9IHRoaXJkKHBhcmVudFZlcnRpY2VzKSxcbiAgICAgICAgZmlyc3RUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlID0gZmlyc3QodGV4dHVyZUNvb3JkaW5hdGVUdXBsZXMpLFxuICAgICAgICBzZWNvbmRUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlID0gc2Vjb25kKHRleHR1cmVDb29yZGluYXRlVHVwbGVzKSxcbiAgICAgICAgdGhpcmRUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlID0gdGhpcmQodGV4dHVyZUNvb3JkaW5hdGVUdXBsZXMpLFxuICAgICAgICBmaXJzdFZlcnRleFBvc2l0aW9uID0gZmlyc3RWZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgc2Vjb25kVmVydGV4UG9zaXRpb24gPSBzZWNvbmRWZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgdGhpcmRWZXJ0ZXhQb3NpdGlvbiA9IHRoaXJkVmVydGV4LmdldFBvc2l0aW9uKCksXG4gICAgICAgIGZpcnN0UGFyZW50VmVydGV4UG9zaXRpb24gPSBmaXJzdFBhcmVudFZlcnRleC5nZXRQb3NpdGlvbigpLFxuICAgICAgICBzZWNvbmRQYXJlbnRWZXJ0ZXhQb3NpdGlvbiA9IHNlY29uZFBhcmVudFZlcnRleC5nZXRQb3NpdGlvbigpLFxuICAgICAgICB0aGlyZFBhcmVudFZlcnRleFBvc2l0aW9uID0gdGhpcmRQYXJlbnRWZXJ0ZXguZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgUjF4ID0gZmlyc3RWZXJ0ZXhQb3NpdGlvblswXSwgIC8vL1xuICAgICAgICBSMXkgPSBmaXJzdFZlcnRleFBvc2l0aW9uWzFdLCAgLy8vXG4gICAgICAgIFIyeCA9IHNlY29uZFZlcnRleFBvc2l0aW9uWzBdLCAvLy9cbiAgICAgICAgUjJ5ID0gc2Vjb25kVmVydGV4UG9zaXRpb25bMV0sIC8vL1xuICAgICAgICBSM3ggPSB0aGlyZFZlcnRleFBvc2l0aW9uWzBdLCAgLy8vXG4gICAgICAgIFIzeSA9IHRoaXJkVmVydGV4UG9zaXRpb25bMV0sICAvLy9cbiAgICAgICAgUDF4ID0gZmlyc3RQYXJlbnRWZXJ0ZXhQb3NpdGlvblswXSwgLy8vXG4gICAgICAgIFAyeCA9IHNlY29uZFBhcmVudFZlcnRleFBvc2l0aW9uWzBdLCAvLy9cbiAgICAgICAgUDN4ID0gdGhpcmRQYXJlbnRWZXJ0ZXhQb3NpdGlvblswXSwgLy8vXG4gICAgICAgIFAxeSA9IGZpcnN0UGFyZW50VmVydGV4UG9zaXRpb25bMV0sIC8vL1xuICAgICAgICBQMnkgPSBzZWNvbmRQYXJlbnRWZXJ0ZXhQb3NpdGlvblsxXSwgLy8vXG4gICAgICAgIFAzeSA9IHRoaXJkUGFyZW50VmVydGV4UG9zaXRpb25bMV0sIC8vL1xuICAgICAgICBQMXUgPSBmaXJzdFRleHR1cmVDb29yZGluYXRlVHVwbGVbMF0sIC8vL1xuICAgICAgICBQMXYgPSBmaXJzdFRleHR1cmVDb29yZGluYXRlVHVwbGVbMV0sIC8vL1xuICAgICAgICBQMnUgPSBzZWNvbmRUZXh0dXJlQ29vcmRpbmF0ZVR1cGxlWzBdLCAvLy9cbiAgICAgICAgUDJ2ID0gc2Vjb25kVGV4dHVyZUNvb3JkaW5hdGVUdXBsZVsxXSwgLy8vXG4gICAgICAgIFAzdSA9IHRoaXJkVGV4dHVyZUNvb3JkaW5hdGVUdXBsZVswXSwgLy8vXG4gICAgICAgIFAzdiA9IHRoaXJkVGV4dHVyZUNvb3JkaW5hdGVUdXBsZVsxXSwgLy8vXG4gICAgICAgIHRleHR1cmVDb29yZGluYXRlc01hdHJpeCA9IGludmVydDMoWyAxLCAxLCAxLCBQMXUsIFAydSwgUDN1LCBQMXYsIFAydiwgUDN2IF0pLFxuICAgICAgICBmaXJzdFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnQgPSB0cmFuc2Zvcm0zKFsgUDF4LCBQMngsIFAzeCBdLCB0ZXh0dXJlQ29vcmRpbmF0ZXNNYXRyaXgpLFxuICAgICAgICBzZWNvbmRUcmFuc2Zvcm1lZFBhcmVudFZlcnRpY2VzQ29tcG9uZW50ID0gdHJhbnNmb3JtMyhbIFAxeSwgUDJ5LCBQM3kgXSwgdGV4dHVyZUNvb3JkaW5hdGVzTWF0cml4KSxcbiAgICAgICAgT3ggPSBmaXJzdFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnRbMF0sICAvLy9cbiAgICAgICAgVXggPSBmaXJzdFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnRbMV0sICAvLy9cbiAgICAgICAgVnggPSBmaXJzdFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnRbMl0sICAvLy9cbiAgICAgICAgT3kgPSBzZWNvbmRUcmFuc2Zvcm1lZFBhcmVudFZlcnRpY2VzQ29tcG9uZW50WzBdLCAgLy8vXG4gICAgICAgIFV5ID0gc2Vjb25kVHJhbnNmb3JtZWRQYXJlbnRWZXJ0aWNlc0NvbXBvbmVudFsxXSwgIC8vL1xuICAgICAgICBWeSA9IHNlY29uZFRyYW5zZm9ybWVkUGFyZW50VmVydGljZXNDb21wb25lbnRbMl0sICAvLy9cbiAgICAgICAgdHJhbnNmb3JtZWRQYXJlbnRWZXJ0aWNlc01hdHJpeCA9IGludmVydDIoWyBVeCwgVXksIFZ4LCBWeSBdKSxcbiAgICAgICAgZmlyc3RBZGp1c3RlZFRleHR1cmVDb29yZGluYXRlID0gdHJhbnNmb3JtMihbIFIxeCAtIE94LCBSMXkgLSBPeSBdLCB0cmFuc2Zvcm1lZFBhcmVudFZlcnRpY2VzTWF0cml4KSxcbiAgICAgICAgc2Vjb25kQWRqdXN0ZWRUZXh0dXJlQ29vcmRpbmF0ZSA9IHRyYW5zZm9ybTIoWyBSMnggLSBPeCwgUjJ5IC0gT3kgXSwgdHJhbnNmb3JtZWRQYXJlbnRWZXJ0aWNlc01hdHJpeCksXG4gICAgICAgIHRoaXJkQWRqdXN0ZWRUZXh0dXJlQ29vcmRpbmF0ZSA9IHRyYW5zZm9ybTIoWyBSM3ggLSBPeCwgUjN5IC0gT3kgXSwgdHJhbnNmb3JtZWRQYXJlbnRWZXJ0aWNlc01hdHJpeCksXG4gICAgICAgIGFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGVUdXBsZSA9IFtcbiAgICAgICAgICBmaXJzdEFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGUsXG4gICAgICAgICAgc2Vjb25kQWRqdXN0ZWRUZXh0dXJlQ29vcmRpbmF0ZSxcbiAgICAgICAgICB0aGlyZEFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGUsXG4gICAgICAgIF07XG5cbiAgcmV0dXJuIGFkanVzdGVkVGV4dHVyZUNvb3JkaW5hdGVUdXBsZTtcbn1cbiJdfQ==