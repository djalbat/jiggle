"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
function createElementBuffer(data) {
    var _context = this.context, ELEMENT_ARRAY_BUFFER = _context.ELEMENT_ARRAY_BUFFER, STATIC_DRAW = _context.STATIC_DRAW, target = ELEMENT_ARRAY_BUFFER, usage = STATIC_DRAW, uint16Array = new Uint16Array(data), elementBuffer = this.context.createBuffer();
    this.context.bindBuffer(target, elementBuffer);
    this.context.bufferData(target, uint16Array, usage);
    return elementBuffer;
}
function bindElementBuffer(elementBuffer) {
    var _context = this.context, ELEMENT_ARRAY_BUFFER = _context.ELEMENT_ARRAY_BUFFER, target = ELEMENT_ARRAY_BUFFER;
    this.context.bindBuffer(target, elementBuffer);
}
function createBuffer(data) {
    var _context = this.context, ARRAY_BUFFER = _context.ARRAY_BUFFER, STATIC_DRAW = _context.STATIC_DRAW, target = ARRAY_BUFFER, usage = STATIC_DRAW, buffer = this.context.createBuffer(), float32Array = new Float32Array(data);
    this.context.bindBuffer(target, buffer);
    this.context.bufferData(target, float32Array, usage);
    return buffer;
}
function bindBuffer(buffer, attributeLocation, components) {
    var _context = this.context, ARRAY_BUFFER = _context.ARRAY_BUFFER, FLOAT = _context.FLOAT, target = ARRAY_BUFFER, type = FLOAT, normalize = false, stride = 0, offset = 0;
    this.context.bindBuffer(target, buffer);
    this.context.vertexAttribPointer(attributeLocation, components, type, normalize, stride, offset);
    this.context.enableVertexAttribArray(attributeLocation);
}
var bufferMixins = {
    createElementBuffer: createElementBuffer,
    bindElementBuffer: bindElementBuffer,
    createBuffer: createBuffer,
    bindBuffer: bindBuffer
};
var _default = bufferMixins;
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvYnVmZmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50QnVmZmVyKGRhdGEpIHtcbiAgY29uc3QgeyBFTEVNRU5UX0FSUkFZX0JVRkZFUiwgU1RBVElDX0RSQVcgfSA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgdGFyZ2V0ID0gRUxFTUVOVF9BUlJBWV9CVUZGRVIsXG4gICAgICAgIHVzYWdlID0gU1RBVElDX0RSQVcsXG4gICAgICAgIHVpbnQxNkFycmF5ID0gbmV3IFVpbnQxNkFycmF5KGRhdGEpLFxuICAgICAgICBlbGVtZW50QnVmZmVyID0gdGhpcy5jb250ZXh0LmNyZWF0ZUJ1ZmZlcigpO1xuXG4gIHRoaXMuY29udGV4dC5iaW5kQnVmZmVyKHRhcmdldCwgZWxlbWVudEJ1ZmZlcik7XG5cbiAgdGhpcy5jb250ZXh0LmJ1ZmZlckRhdGEodGFyZ2V0LCB1aW50MTZBcnJheSwgdXNhZ2UpO1xuXG4gIHJldHVybiBlbGVtZW50QnVmZmVyO1xufVxuXG5mdW5jdGlvbiBiaW5kRWxlbWVudEJ1ZmZlcihlbGVtZW50QnVmZmVyKSB7XG4gIGNvbnN0IHsgRUxFTUVOVF9BUlJBWV9CVUZGRVIgfSA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgdGFyZ2V0ID0gRUxFTUVOVF9BUlJBWV9CVUZGRVI7XG5cbiAgdGhpcy5jb250ZXh0LmJpbmRCdWZmZXIodGFyZ2V0LCBlbGVtZW50QnVmZmVyKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyKGRhdGEpIHtcbiAgY29uc3QgeyBBUlJBWV9CVUZGRVIsIFNUQVRJQ19EUkFXIH0gPSB0aGlzLmNvbnRleHQsXG4gICAgICAgIHRhcmdldCA9IEFSUkFZX0JVRkZFUixcbiAgICAgICAgdXNhZ2UgPSBTVEFUSUNfRFJBVyxcbiAgICAgICAgYnVmZmVyID0gdGhpcy5jb250ZXh0LmNyZWF0ZUJ1ZmZlcigpLFxuICAgICAgICBmbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KGRhdGEpO1xuXG4gIHRoaXMuY29udGV4dC5iaW5kQnVmZmVyKHRhcmdldCwgYnVmZmVyKTtcblxuICB0aGlzLmNvbnRleHQuYnVmZmVyRGF0YSh0YXJnZXQsIGZsb2F0MzJBcnJheSwgdXNhZ2UpO1xuXG4gIHJldHVybiBidWZmZXI7XG59XG5cbmZ1bmN0aW9uIGJpbmRCdWZmZXIoYnVmZmVyLCBhdHRyaWJ1dGVMb2NhdGlvbiwgY29tcG9uZW50cykge1xuICBjb25zdCB7IEFSUkFZX0JVRkZFUiwgRkxPQVQgfSA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgdGFyZ2V0ID0gQVJSQVlfQlVGRkVSLFxuICAgICAgICB0eXBlID0gRkxPQVQsXG4gICAgICAgIG5vcm1hbGl6ZSA9IGZhbHNlLFxuICAgICAgICBzdHJpZGUgPSAwLFxuICAgICAgICBvZmZzZXQgPSAwO1xuXG4gIHRoaXMuY29udGV4dC5iaW5kQnVmZmVyKHRhcmdldCwgYnVmZmVyKTtcblxuICB0aGlzLmNvbnRleHQudmVydGV4QXR0cmliUG9pbnRlcihhdHRyaWJ1dGVMb2NhdGlvbiwgY29tcG9uZW50cywgdHlwZSwgbm9ybWFsaXplLCBzdHJpZGUsIG9mZnNldCk7XG5cbiAgdGhpcy5jb250ZXh0LmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGF0dHJpYnV0ZUxvY2F0aW9uKTtcbn1cblxuY29uc3QgYnVmZmVyTWl4aW5zID0ge1xuICBjcmVhdGVFbGVtZW50QnVmZmVyLFxuICBiaW5kRWxlbWVudEJ1ZmZlcixcbiAgY3JlYXRlQnVmZmVyLFxuICBiaW5kQnVmZmVyXG59O1xuXG5leHBvcnQgZGVmYXVsdCBidWZmZXJNaXhpbnM7XG4iXSwibmFtZXMiOlsiY3JlYXRlRWxlbWVudEJ1ZmZlciIsImRhdGEiLCJjb250ZXh0IiwiRUxFTUVOVF9BUlJBWV9CVUZGRVIiLCJTVEFUSUNfRFJBVyIsInRhcmdldCIsInVzYWdlIiwidWludDE2QXJyYXkiLCJVaW50MTZBcnJheSIsImVsZW1lbnRCdWZmZXIiLCJjcmVhdGVCdWZmZXIiLCJiaW5kQnVmZmVyIiwiYnVmZmVyRGF0YSIsImJpbmRFbGVtZW50QnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiYnVmZmVyIiwiZmxvYXQzMkFycmF5IiwiRmxvYXQzMkFycmF5IiwiYXR0cmlidXRlTG9jYXRpb24iLCJjb21wb25lbnRzIiwiRkxPQVQiLCJ0eXBlIiwibm9ybWFsaXplIiwic3RyaWRlIiwib2Zmc2V0IiwidmVydGV4QXR0cmliUG9pbnRlciIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwiYnVmZmVyTWl4aW5zIl0sIm1hcHBpbmdzIjoiQUFBQSxDQUFZOzs7OztTQUVIQSxtQkFBbUIsQ0FBQ0MsSUFBSSxFQUFFLENBQUM7SUFDbEMsR0FBSyxDQUF5QyxRQUFZLEdBQVosSUFBSSxDQUFDQyxPQUFPLEVBQWxEQyxvQkFBb0IsR0FBa0IsUUFBWSxDQUFsREEsb0JBQW9CLEVBQUVDLFdBQVcsR0FBSyxRQUFZLENBQTVCQSxXQUFXLEVBQ25DQyxNQUFNLEdBQUdGLG9CQUFvQixFQUM3QkcsS0FBSyxHQUFHRixXQUFXLEVBQ25CRyxXQUFXLEdBQUcsR0FBRyxDQUFDQyxXQUFXLENBQUNQLElBQUksR0FDbENRLGFBQWEsR0FBRyxJQUFJLENBQUNQLE9BQU8sQ0FBQ1EsWUFBWTtJQUUvQyxJQUFJLENBQUNSLE9BQU8sQ0FBQ1MsVUFBVSxDQUFDTixNQUFNLEVBQUVJLGFBQWE7SUFFN0MsSUFBSSxDQUFDUCxPQUFPLENBQUNVLFVBQVUsQ0FBQ1AsTUFBTSxFQUFFRSxXQUFXLEVBQUVELEtBQUs7SUFFbEQsTUFBTSxDQUFDRyxhQUFhO0FBQ3RCLENBQUM7U0FFUUksaUJBQWlCLENBQUNKLGFBQWEsRUFBRSxDQUFDO0lBQ3pDLEdBQUssQ0FBNEIsUUFBWSxHQUFaLElBQUksQ0FBQ1AsT0FBTyxFQUFyQ0Msb0JBQW9CLEdBQUssUUFBWSxDQUFyQ0Esb0JBQW9CLEVBQ3RCRSxNQUFNLEdBQUdGLG9CQUFvQjtJQUVuQyxJQUFJLENBQUNELE9BQU8sQ0FBQ1MsVUFBVSxDQUFDTixNQUFNLEVBQUVJLGFBQWE7QUFDL0MsQ0FBQztTQUVRQyxZQUFZLENBQUNULElBQUksRUFBRSxDQUFDO0lBQzNCLEdBQUssQ0FBaUMsUUFBWSxHQUFaLElBQUksQ0FBQ0MsT0FBTyxFQUExQ1ksWUFBWSxHQUFrQixRQUFZLENBQTFDQSxZQUFZLEVBQUVWLFdBQVcsR0FBSyxRQUFZLENBQTVCQSxXQUFXLEVBQzNCQyxNQUFNLEdBQUdTLFlBQVksRUFDckJSLEtBQUssR0FBR0YsV0FBVyxFQUNuQlcsTUFBTSxHQUFHLElBQUksQ0FBQ2IsT0FBTyxDQUFDUSxZQUFZLElBQ2xDTSxZQUFZLEdBQUcsR0FBRyxDQUFDQyxZQUFZLENBQUNoQixJQUFJO0lBRTFDLElBQUksQ0FBQ0MsT0FBTyxDQUFDUyxVQUFVLENBQUNOLE1BQU0sRUFBRVUsTUFBTTtJQUV0QyxJQUFJLENBQUNiLE9BQU8sQ0FBQ1UsVUFBVSxDQUFDUCxNQUFNLEVBQUVXLFlBQVksRUFBRVYsS0FBSztJQUVuRCxNQUFNLENBQUNTLE1BQU07QUFDZixDQUFDO1NBRVFKLFVBQVUsQ0FBQ0ksTUFBTSxFQUFFRyxpQkFBaUIsRUFBRUMsVUFBVSxFQUFFLENBQUM7SUFDMUQsR0FBSyxDQUEyQixRQUFZLEdBQVosSUFBSSxDQUFDakIsT0FBTyxFQUFwQ1ksWUFBWSxHQUFZLFFBQVksQ0FBcENBLFlBQVksRUFBRU0sS0FBSyxHQUFLLFFBQVksQ0FBdEJBLEtBQUssRUFDckJmLE1BQU0sR0FBR1MsWUFBWSxFQUNyQk8sSUFBSSxHQUFHRCxLQUFLLEVBQ1pFLFNBQVMsR0FBRyxLQUFLLEVBQ2pCQyxNQUFNLEdBQUcsQ0FBQyxFQUNWQyxNQUFNLEdBQUcsQ0FBQztJQUVoQixJQUFJLENBQUN0QixPQUFPLENBQUNTLFVBQVUsQ0FBQ04sTUFBTSxFQUFFVSxNQUFNO0lBRXRDLElBQUksQ0FBQ2IsT0FBTyxDQUFDdUIsbUJBQW1CLENBQUNQLGlCQUFpQixFQUFFQyxVQUFVLEVBQUVFLElBQUksRUFBRUMsU0FBUyxFQUFFQyxNQUFNLEVBQUVDLE1BQU07SUFFL0YsSUFBSSxDQUFDdEIsT0FBTyxDQUFDd0IsdUJBQXVCLENBQUNSLGlCQUFpQjtBQUN4RCxDQUFDO0FBRUQsR0FBSyxDQUFDUyxZQUFZLEdBQUcsQ0FBQztJQUNwQjNCLG1CQUFtQixFQUFuQkEsbUJBQW1CO0lBQ25CYSxpQkFBaUIsRUFBakJBLGlCQUFpQjtJQUNqQkgsWUFBWSxFQUFaQSxZQUFZO0lBQ1pDLFVBQVUsRUFBVkEsVUFBVTtBQUNaLENBQUM7ZUFFY2dCLFlBQVkifQ==