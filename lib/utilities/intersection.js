"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    calculateIntersection: function() {
        return calculateIntersection;
    },
    calculateNonNullIntersections: function() {
        return calculateNonNullIntersections;
    },
    calculateNullIntersectionIndex: function() {
        return calculateNullIntersectionIndex;
    },
    calculateNonNullIntersectionIndex: function() {
        return calculateNonNullIntersectionIndex;
    },
    calculateIntermediateVertexPosition: function() {
        return calculateIntermediateVertexPosition;
    }
});
var _array = require("../utilities/array");
var _vector = require("../maths/vector");
var _approximate = require("../utilities/approximate");
function calculateIntersection(edge, firstPositionComponent) {
    var intersection = null;
    var edgeNonParallel = isEdgeNonParallel(edge);
    if (edgeNonParallel) {
        var edgeIntersection = calculateEdgeIntersection(edge, firstPositionComponent), edgeIntersectionNonTrivial = edgeIntersection > 0 && edgeIntersection < 1;
        if (edgeIntersectionNonTrivial) {
            intersection = edgeIntersection; ///
        }
    }
    return intersection;
}
function calculateNonNullIntersections(intersections) {
    var nonNullIntersections = intersections.reduce(function(nonNullIntersections, intersection) {
        if (intersection !== null) {
            var nonNullIntersection = intersection; ///
            nonNullIntersections.push(nonNullIntersection);
        }
        return nonNullIntersections;
    }, []);
    return nonNullIntersections;
}
function calculateNullIntersectionIndex(intersections) {
    var nullIntersectionIndex = intersections.reduce(function(nullIntersectionIndex, intersection, index) {
        if (nullIntersectionIndex === null) {
            if (intersection === null) {
                nullIntersectionIndex = index;
            }
        }
        return nullIntersectionIndex;
    }, null);
    return nullIntersectionIndex;
}
function calculateNonNullIntersectionIndex(intersections) {
    var nullIntersectionIndex = intersections.reduce(function(nullIntersectionIndex, intersection, index) {
        if (nullIntersectionIndex === null) {
            if (intersection !== null) {
                nullIntersectionIndex = index;
            }
        }
        return nullIntersectionIndex;
    }, null);
    return nullIntersectionIndex;
}
function calculateIntermediateVertexPosition(startVertexPosition, endVertexPosition, intersection) {
    var extent = (0, _vector.subtract3)(endVertexPosition, startVertexPosition), offset = (0, _vector.scale3)(extent, intersection), intermediateVertexPosition = (0, _vector.add3)(startVertexPosition, offset);
    return intermediateVertexPosition;
}
function isEdgeNonParallel(edge) {
    var edgeExtent = edge.getExtent(), edgeExtentComponents = edgeExtent, firstEdgeExtentComponent = (0, _array.first)(edgeExtentComponents), secondEdgeExtentComponent = (0, _array.second)(edgeExtentComponents), edgeAngleTangent = firstEdgeExtentComponent / secondEdgeExtentComponent, edgeAngleTangentApproximatelyEqualToZero = (0, _approximate.isApproximatelyEqualToZero)(edgeAngleTangent), edgeParallel = edgeAngleTangentApproximatelyEqualToZero, edgeNonParallel = !edgeParallel;
    return edgeNonParallel;
}
function calculateEdgeIntersection(edge, firstPositionComponent) {
    var edgeExtent = edge.getExtent(), edgePosition = edge.getPosition(), edgeExtentComponents = edgeExtent, edgePositionComponents = edgePosition, firstEdgeExtentComponent = (0, _array.first)(edgeExtentComponents), firstEdgePositionComponent = (0, _array.first)(edgePositionComponents), edgeIntersection = (firstPositionComponent - firstEdgePositionComponent) / firstEdgeExtentComponent;
    return edgeIntersection;
}

//# sourceMappingURL=data:application/json;base64,